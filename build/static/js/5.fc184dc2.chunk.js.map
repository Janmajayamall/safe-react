{"version":3,"sources":["components/forms/Field/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","components/ExecuteCheckbox/index.tsx","routes/safe/components/Transactions/helpers/TxModalWrapper/index.tsx","logic/hooks/useEstimationStatus.tsx","routes/safe/components/Transactions/helpers/utils.ts","logic/hooks/useEstimateTransactionGas.tsx","logic/hooks/useCanTxExecute.tsx","assets/icons/info_red.svg","routes/safe/container/hooks/useTransactionParameters.ts","routes/safe/components/Transactions/helpers/useSafeTxGas.ts","routes/safe/components/Transactions/helpers/TxParametersDetail/index.tsx","routes/safe/components/Transactions/helpers/EditTxParametersForm/style.ts","logic/hooks/useGetRecommendedNonce.tsx","routes/safe/components/Transactions/helpers/EditTxParametersForm/index.tsx","routes/safe/components/Transactions/helpers/EditableTxParameters.tsx","components/TransactionFailText/index.tsx","components/TransactionsFees/index.tsx","components/ReviewInfoText/index.tsx"],"names":["GnoField","props","overflowStyle","overflow","width","useStyles","makeStyles","createStyles","root","paddingTop","lg","paddingBottom","lineHeight","TextField","input","name","onChange","value","restInput","inputAdornment","meta","multiline","rows","testId","text","rest","classes","helperText","undefined","showError","touched","pristine","valid","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","className","InputProps","style","stylesBasedOn","padding","flexDirection","flex","GnoForm","children","decorators","formMutators","initialValues","onSubmit","subscription","validation","mutators","render","handleSubmit","submitting","validating","form","validate","ExecuteCheckbox","Row","margin","Paragraph","noMargin","FormControlLabel","control","Checkbox","defaultChecked","color","e","target","checked","label","Container","styled","div","md","TxModalWrapper","operation","txNonce","txData","txValue","txTo","txType","txConfirmations","txThreshold","safeTxGas","onBack","onClose","submitText","isSubmitDisabled","useState","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualMaxPrioFee","setManualMaxPrioFee","manualGasLimit","setManualGasLimit","manualSafeNonce","setManualSafeNonce","executionApproved","setExecutionApproved","isOwner","useSelector","grantedSelector","userAddress","userAccountSelector","safeAddress","extractSafeAddress","isSpendingLimitTx","isSpendingLimit","preApprovingOwner","confirmationsLen","Array","from","length","canTxExecute","useCanTxExecute","doExecute","useEstimateTransactionGas","txRecipient","txAmount","gasCostFormatted","gasPriceFormatted","gasMaxPrioFeeFormatted","gasLimit","gasEstimation","txEstimationExecutionStatus","isCreation","isOffChainSignature","txEstimationStatus","ButtonStatus","DISABLED","buttonStatus","setButtonStatus","useEffect","mounted","EstimationStatus","LOADING","READY","useEstimationStatus","submitStatus","setSubmitStatus","showCheckbox","parametersStatus","getParametersStatus","EditableTxParameters","isExecution","ethGasLimit","ethGasPrice","ethMaxPrioFee","safeNonce","closeEditModalCallback","txParameters","oldGasPrice","newGasPrice","oldGasLimit","newGasLimit","oldMaxPrioFee","newMaxPrioFee","oldSafeTxGas","newSafeTxGas","newSafeNonce","newSafeNonceNumber","parseInt","toggleEditMode","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","ReviewInfoText","Modal","Footer","withoutBorder","Buttons","cancelButtonProps","onClick","confirmButtonProps","logError","Errors","_802","onSubmitClick","status","disabled","areEthereumParamsVisible","areSafeParamsEnabled","ethereumTxParametersTitle","getInteractionTitle","Number","symbol","getNativeCurrency","sameString","DEFAULT_MAX_GAS_FEE","String","DEFAULT_MAX_PRIO_FEE","checkIfTxIsApproveAndExecution","threshold","checkIfTxIsCreation","getDefaultGasEstimation","gasPrice","gasMaxPrioFee","gasCost","calculateTotalGasCost","decimals","totalPricePerGas","estimatedGasCosts","fromTokenUnit","formatAmount","setGasEstimation","nativeCurrency","currentSafe","address","currentVersion","safeVersion","providerSelector","account","smartContractWallet","providerName","size","estimateGas","a","checkIfOffChainSignatureIsPossible","SUCCESS","fromWei","approvalAndExecution","safeTxGasEstimation","ethGasLimitEstimation","transactionCallSuccess","estimateSafeTxGas","Operation","CALL","estimateTransactionGasLimit","toWei","calculateGasPrice","isMaxFeeParam","toString","checkTransactionExecution","gasToken","ZERO_ADDRESS","refundReceiver","FAILURE","console","warn","message","existingTxThreshold","safeInfo","useTransactionParameters","isCancelTransaction","connectedWalletAddress","currentSafeCurrentVersion","state","initialSafeNonce","setSafeNonce","initialSafeTxGas","setSafeTxGas","ethNonce","setEthNonce","initialEthGasLimit","setEthGasLimit","initialEthGasPrice","setEthGasPrice","ethGasPriceInGWei","setEthGasPriceInGWei","setEthMaxPrioFee","ethMaxPrioFeeInGWei","setEthMaxPrioFeeInGWei","getNonce","getUserNonce","res","getSafeNonce","getRecommendedNonce","recommendedNonce","_616","useSafeTxGas","hasFeature","FEATURES","SAFE_TX_GAS_OPTIONAL","TxParameterWrapper","AccordionDetailsWrapper","StyledText","Text","ColoredText","isOutOfOrder","theme","colors","StyledButtonLink","ButtonLink","compact","nonce","isTxNonceOutOfOrder","setIsTxNonceOutOfOrder","isAccordionExpanded","setIsAccordionExpanded","safeNonceNumber","lastQueuedTxNonce","getLastTxNonce","showSafeTxGas","isNaN","expanded","textSize","styles","heading","justifyContent","boxSizing","height","annotation","letterSpacing","secondaryText","marginRight","marginLeft","headingText","fontSize","closeIcon","container","amount","sm","buttonRow","alignItems","gap","useGetRecommendedNonce","lastTxNonce","storeNextNonce","setRecommendedNonce","isCurrent","fetchRecommendedNonce","StyledDivider","Divider","StyledDividerFooter","SafeOptions","EthereumOptions","StyledLink","Link","StyledTextMt","formValidation","values","minValue","EditTxParametersForm","onCloseFormHandler","align","grow","withoutMargin","IconButton","disableRipple","Block","strong","Field","defaultValue","placeholder","type","min","component","gasPriceText","href","isEditMode","useManualValues","setUseManualValues","currentSafeThreshold","defaultParameterStatus","initialEthMaxPrioFee","toggleStatus","prev","executionWarningRow","display","warningIcon","TransactionFailText","isWrongChain","shouldSwitchWalletChain","isGranted","errorDesc","Img","alt","src","InfoIcon","TransactionFees","transactionAction","as","ReviewInfoTextWrapper","background","txParamsSafeNonce","transactionsToGo","warningMessage"],"mappings":"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","file":"static/js/5.fc184dc2.chunk.js","sourcesContent":["import { Field } from 'react-final-form'\n\nconst GnoField = (props: any): React.ReactElement => <Field {...props} />\n\nexport default GnoField\n","import MuiTextField from '@material-ui/core/TextField'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\n\nimport { lg } from 'src/theme/variables'\n\n// Neded for solving a fix in Windows browsers\nconst overflowStyle = {\n  overflow: 'hidden',\n  width: '100%',\n}\n\nconst styles = () =>\n  createStyles({\n    root: {\n      paddingTop: lg,\n      paddingBottom: '12px',\n      lineHeight: 0,\n    },\n  })\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  input: {\n    name: string\n    onChange?: () => void\n    value: string\n    placeholder: string\n    type: string\n  }\n  meta: {\n    touched?: boolean\n    pristine?: boolean\n    valid?: boolean\n    error?: string\n    modifiedSinceLastSubmit?: boolean\n    submitError?: boolean\n    active?: boolean\n  }\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\n  multiline: boolean\n  rows?: string\n  testId: string\n  text: string\n  disabled?: boolean\n  rowsMax?: number\n  className?: string\n}\n\nconst TextField = (props: Props): React.ReactElement => {\n  const {\n    input: { name, onChange, value, ...restInput },\n    inputAdornment,\n    meta,\n    multiline,\n    rows,\n    testId,\n    text,\n    ...rest\n  } = props\n  const classes = useStyles()\n  const helperText = value ? text : undefined\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\n  const errorMessage = meta.error || meta.submitError\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\n\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\n\n  const inputRoot = helperText ? classes.root : ''\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\n  const inputProps = {\n    ...restInput,\n    autoComplete: 'off',\n    'data-testid': testId,\n  }\n  const inputRootProps = {\n    ...inputAdornment,\n    className: `${inputRoot} ${statusClasses}`,\n    disableUnderline: disableUnderline,\n  }\n\n  return (\n    <MuiTextField\n      error={hasError && showError}\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\n      inputProps={inputProps} // blank in order to force to have helper text\n      InputProps={inputRootProps}\n      multiline={multiline}\n      name={name}\n      onChange={onChange}\n      rows={rows}\n      style={overflowStyle}\n      value={value}\n      {...rest}\n    />\n  )\n}\n\nexport default TextField\n","import { ReactElement } from 'react'\nimport { Form } from 'react-final-form'\n\nconst stylesBasedOn = (padding) => ({\n  padding: `0 ${padding}%`,\n  flexDirection: 'column',\n  flex: '1 0 auto',\n})\n\nconst GnoForm = ({\n  children,\n  decorators,\n  formMutators,\n  initialValues,\n  onSubmit,\n  padding = 0,\n  subscription,\n  testId = '',\n  validation,\n}: any): ReactElement => (\n  <Form\n    decorators={decorators}\n    initialValues={initialValues}\n    mutators={formMutators}\n    onSubmit={onSubmit}\n    render={({ handleSubmit, ...rest }) => (\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\n      </form>\n    )}\n    subscription={subscription}\n    validate={validation}\n  />\n)\n\nexport default GnoForm\n","import { ReactElement } from 'react'\nimport { Checkbox, FormControlLabel } from '@material-ui/core'\nimport Row from 'src/components/layout/Row'\nimport Paragraph from '../layout/Paragraph'\n\ninterface ExecuteCheckboxProps {\n  onChange: (val: boolean) => unknown\n}\n\nconst ExecuteCheckbox = ({ onChange }: ExecuteCheckboxProps): ReactElement => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    onChange(e.target.checked)\n  }\n  return (\n    <Row margin=\"md\">\n      <Paragraph noMargin>\n        If you want to sign the transaction now but manually execute it later, click on the checkbox below.\n      </Paragraph>\n      <FormControlLabel\n        control={<Checkbox defaultChecked color=\"primary\" onChange={handleChange} />}\n        label=\"Execute transaction\"\n        data-testid=\"execute-checkbox\"\n      />\n    </Row>\n  )\n}\n\nexport default ExecuteCheckbox\n","import { ReactNode, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { lg, md } from 'src/theme/variables'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { isSpendingLimit, ParametersStatus } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport useCanTxExecute from 'src/logic/hooks/useCanTxExecute'\nimport { useSelector } from 'react-redux'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\nimport { List } from 'immutable'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { Confirmation } from 'src/logic/safe/store/models/types/confirmation'\nimport { Operation } from '@gnosis.pm/safe-react-gateway-sdk'\n\ntype Props = {\n  children: ReactNode\n  operation?: Operation\n  txNonce?: string\n  txData: string\n  txValue?: string\n  txTo?: string\n  txType?: string\n  txConfirmations?: List<Confirmation>\n  txThreshold?: number\n  safeTxGas?: string\n  onSubmit: (txParams: TxParameters, delayExecution?: boolean) => void\n  onClose?: () => void\n  onBack?: (...rest: any) => void\n  submitText?: string\n  isSubmitDisabled?: boolean\n}\n\nconst Container = styled.div`\n  padding: 0 ${lg} ${md};\n`\n\n/**\n * Determines which fields are displayed in the TxEditableParameters\n */\nconst getParametersStatus = (isCreation: boolean, doExecute: boolean): ParametersStatus => {\n  return isCreation\n    ? doExecute\n      ? 'ENABLED'\n      : 'ETH_HIDDEN' // allow editing nonce when creating\n    : doExecute\n    ? 'SAFE_DISABLED'\n    : 'DISABLED' // when not creating, nonce cannot be edited\n}\n\nexport const TxModalWrapper = ({\n  children,\n  operation,\n  txNonce,\n  txData,\n  txValue = '0',\n  txTo,\n  txType,\n  txConfirmations,\n  txThreshold,\n  safeTxGas,\n  onSubmit,\n  onBack,\n  onClose,\n  submitText,\n  isSubmitDisabled,\n}: Props): React.ReactElement => {\n  const [manualSafeTxGas, setManualSafeTxGas] = useState('0')\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\n  const [manualMaxPrioFee, setManualMaxPrioFee] = useState<string | undefined>()\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\n  const [manualSafeNonce, setManualSafeNonce] = useState<number | undefined>()\n  const [executionApproved, setExecutionApproved] = useState<boolean>(true)\n  const isOwner = useSelector(grantedSelector)\n  const userAddress = useSelector(userAccountSelector)\n  const safeAddress = extractSafeAddress()\n  const isSpendingLimitTx = isSpendingLimit(txType)\n  const preApprovingOwner = isOwner ? userAddress : undefined\n  const confirmationsLen = Array.from(txConfirmations || []).length\n  const canTxExecute = useCanTxExecute(preApprovingOwner, confirmationsLen, txThreshold)\n  const doExecute = executionApproved && canTxExecute\n\n  const {\n    gasCostFormatted,\n    gasPriceFormatted,\n    gasMaxPrioFeeFormatted,\n    gasLimit,\n    gasEstimation,\n    txEstimationExecutionStatus,\n    isCreation,\n    isOffChainSignature,\n  } = useEstimateTransactionGas({\n    txData,\n    txRecipient: txTo || safeAddress,\n    txType,\n    txConfirmations,\n    txAmount: txValue,\n    preApprovingOwner,\n    safeTxGas: safeTxGas || manualSafeTxGas,\n    manualGasPrice,\n    manualMaxPrioFee,\n    manualGasLimit,\n    manualSafeNonce,\n    operation,\n  })\n\n  const [submitStatus, setSubmitStatus] = useEstimationStatus(txEstimationExecutionStatus)\n  const showCheckbox = !isSpendingLimitTx && canTxExecute && (!txThreshold || txThreshold > confirmationsLen)\n\n  const onEditClose = (txParameters: TxParameters) => {\n    const oldGasPrice = gasPriceFormatted\n    const newGasPrice = txParameters.ethGasPrice\n    const oldGasLimit = gasLimit\n    const newGasLimit = txParameters.ethGasLimit\n    const oldMaxPrioFee = gasMaxPrioFeeFormatted\n    const newMaxPrioFee = txParameters.ethMaxPrioFee\n    const oldSafeTxGas = gasEstimation\n    const newSafeTxGas = txParameters.safeTxGas\n    const newSafeNonce = txParameters.safeNonce\n\n    if (oldGasPrice !== newGasPrice) {\n      setManualGasPrice(newGasPrice)\n    }\n\n    if (oldMaxPrioFee !== newMaxPrioFee) {\n      setManualMaxPrioFee(newMaxPrioFee)\n    }\n\n    if (oldGasLimit !== newGasLimit) {\n      setManualGasLimit(newGasLimit)\n    }\n\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\n      setManualSafeTxGas(newSafeTxGas)\n    }\n\n    if (newSafeNonce) {\n      const newSafeNonceNumber = parseInt(newSafeNonce, 10)\n      setManualSafeNonce(newSafeNonceNumber)\n    }\n  }\n\n  const onSubmitClick = (txParameters: TxParameters) => {\n    setSubmitStatus(ButtonStatus.LOADING)\n\n    if (!safeAddress) {\n      setSubmitStatus(ButtonStatus.READY)\n      logError(Errors._802)\n      return\n    }\n\n    onSubmit(txParameters, !doExecute)\n  }\n\n  const parametersStatus = getParametersStatus(isCreation, doExecute)\n\n  return (\n    <EditableTxParameters\n      isOffChainSignature={isOffChainSignature}\n      isExecution={doExecute}\n      ethGasLimit={gasLimit}\n      ethGasPrice={gasPriceFormatted}\n      ethMaxPrioFee={gasMaxPrioFeeFormatted}\n      safeTxGas={gasEstimation}\n      safeNonce={txNonce}\n      parametersStatus={parametersStatus}\n      closeEditModalCallback={onEditClose}\n    >\n      {(txParameters: TxParameters, toggleEditMode: () => void) => (\n        <>\n          {children}\n\n          <Container>\n            {showCheckbox && <ExecuteCheckbox onChange={setExecutionApproved} />}\n\n            {/* Tx Parameters */}\n            {/* FIXME TxParameters should be updated to be used with spending limits */}\n            {!isSpendingLimitTx && (\n              <TxParametersDetail\n                txParameters={txParameters}\n                onEdit={toggleEditMode}\n                isTransactionCreation={isCreation}\n                isTransactionExecution={doExecute}\n                isOffChainSignature={isOffChainSignature}\n                parametersStatus={parametersStatus}\n              />\n            )}\n          </Container>\n\n          {!isSpendingLimitTx && (\n            <ReviewInfoText\n              gasCostFormatted={gasCostFormatted}\n              isCreation={isCreation}\n              isExecution={doExecute}\n              safeNonce={txParameters.safeNonce}\n              txEstimationExecutionStatus={txEstimationExecutionStatus}\n            />\n          )}\n\n          {/* Footer */}\n          <Modal.Footer withoutBorder={!isSpendingLimitTx && submitStatus !== ButtonStatus.LOADING}>\n            <Modal.Footer.Buttons\n              cancelButtonProps={{ onClick: onBack || onClose, text: onBack ? 'Back' : 'Cancel' }}\n              confirmButtonProps={{\n                onClick: () => onSubmitClick(txParameters),\n                status: submitStatus,\n                disabled: isSubmitDisabled,\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : submitText,\n                testId: 'submit-tx-btn',\n              }}\n            />\n          </Modal.Footer>\n        </>\n      )}\n    </EditableTxParameters>\n  )\n}\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react'\n\nimport { EstimationStatus } from './useEstimateTransactionGas'\nimport { ButtonStatus } from 'src/components/Modal'\n\nexport const useEstimationStatus = (\n  txEstimationStatus?: EstimationStatus,\n): [buttonStatus: ButtonStatus, setButtonStatus: Dispatch<SetStateAction<ButtonStatus>>] => {\n  const [buttonStatus, setButtonStatus] = useState<ButtonStatus>(ButtonStatus.DISABLED)\n\n  useEffect(() => {\n    let mounted = true\n\n    if (mounted) {\n      switch (txEstimationStatus) {\n        case EstimationStatus.LOADING:\n          setButtonStatus(ButtonStatus.LOADING)\n          break\n        default:\n          setButtonStatus(ButtonStatus.READY)\n          break\n      }\n    }\n\n    return () => {\n      mounted = false\n    }\n  }, [txEstimationStatus])\n\n  return [buttonStatus, setButtonStatus]\n}\n","import { getNativeCurrency } from 'src/config'\nimport { sameString } from 'src/utils/strings'\n\nexport type ParametersStatus = 'ENABLED' | 'DISABLED' | 'SAFE_DISABLED' | 'ETH_HIDDEN' | 'CANCEL_TRANSACTION'\n\nexport const areEthereumParamsVisible = (parametersStatus: ParametersStatus): boolean => {\n  return (\n    parametersStatus === 'ENABLED' || (parametersStatus !== 'ETH_HIDDEN' && parametersStatus !== 'CANCEL_TRANSACTION')\n  )\n}\n\nexport const areSafeParamsEnabled = (parametersStatus: ParametersStatus): boolean => {\n  return (\n    parametersStatus === 'ENABLED' ||\n    (parametersStatus !== 'SAFE_DISABLED' && parametersStatus !== 'CANCEL_TRANSACTION')\n  )\n}\n\nexport const ethereumTxParametersTitle = (isExecution: boolean): string => {\n  return `Owner transaction ${isExecution ? '(Execution)' : '(On-chain approval)'}`\n}\n\nexport const getInteractionTitle = (value: number | string): string => {\n  if (Number(value) === 0) {\n    return 'Interact with:'\n  }\n\n  const { symbol } = getNativeCurrency()\n  return `Interact with (and send ${value} ${symbol} to):`\n}\n\nexport const isSpendingLimit = (txType?: string): boolean => sameString(txType, 'spendingLimit')\n","import { Operation } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { List } from 'immutable'\nimport { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { fromWei, toWei } from 'web3-utils'\n\nimport { getNativeCurrency } from 'src/config'\nimport {\n  checkTransactionExecution,\n  estimateSafeTxGas,\n  estimateTransactionGasLimit,\n  isMaxFeeParam,\n} from 'src/logic/safe/transactions/gas'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\nimport { calculateGasPrice } from 'src/logic/wallets/ethTransactions'\nimport { currentSafe } from 'src/logic/safe/store/selectors'\nimport { providerSelector } from 'src/logic/wallets/store/selectors'\nimport { Confirmation } from 'src/logic/safe/store/models/types/confirmation'\nimport { checkIfOffChainSignatureIsPossible } from 'src/logic/safe/safeTxSigner'\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { isSpendingLimit } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport useCanTxExecute from './useCanTxExecute'\n\nexport enum EstimationStatus {\n  LOADING = 'LOADING',\n  FAILURE = 'FAILURE',\n  SUCCESS = 'SUCCESS',\n}\n\nconst DEFAULT_MAX_GAS_FEE = String(3.5e9) // 3.5 GWEI\nexport const DEFAULT_MAX_PRIO_FEE = String(2.5e9) // 2.5 GWEI\n\nexport const checkIfTxIsApproveAndExecution = (\n  threshold: number,\n  txConfirmations: number,\n  txType?: string,\n  preApprovingOwner?: string,\n): boolean => {\n  if (txConfirmations === threshold) return false\n  if (!preApprovingOwner) return false\n  return txConfirmations + 1 === threshold || isSpendingLimit(txType)\n}\n\nexport const checkIfTxIsCreation = (txConfirmations: number, txType?: string): boolean =>\n  txConfirmations === 0 && !isSpendingLimit(txType)\n\ntype UseEstimateTransactionGasProps = {\n  txData: string\n  txRecipient: string\n  txConfirmations?: List<Confirmation>\n  txAmount?: string\n  preApprovingOwner?: string\n  operation?: number\n  safeTxGas?: string\n  txType?: string\n  manualGasPrice?: string\n  manualMaxPrioFee?: string\n  manualGasLimit?: string\n  manualSafeNonce?: number // Edited nonce\n}\n\nexport type TransactionGasEstimationResult = {\n  txEstimationExecutionStatus: EstimationStatus\n  gasEstimation: string // Amount of gas needed for execute or approve the transaction\n  gasCost: string // Cost of gas in raw format (estimatedGas * gasPrice)\n  gasCostFormatted: string // Cost of gas in format '< | > 100'\n  gasPrice: string // Current price of gas unit\n  gasPriceFormatted: string // Current gas price formatted\n  gasMaxPrioFee: string // Current max prio gas price\n  gasMaxPrioFeeFormatted: string // Current max prio gas formatted\n  gasLimit: string // Minimum gas requited to execute the Tx\n  isCreation: boolean // Returns true if the transaction is a creation transaction\n  isOffChainSignature: boolean // Returns true if offChainSignature is available\n}\n\ntype DefaultGasEstimationParams = {\n  txEstimationExecutionStatus: EstimationStatus\n  gasPrice: string\n  gasPriceFormatted: string\n  gasMaxPrioFee: string\n  gasMaxPrioFeeFormatted: string\n  isCreation?: boolean\n  isOffChainSignature?: boolean\n}\nconst getDefaultGasEstimation = ({\n  txEstimationExecutionStatus,\n  gasPrice,\n  gasPriceFormatted,\n  gasMaxPrioFee,\n  gasMaxPrioFeeFormatted,\n  isCreation = false,\n  isOffChainSignature = false,\n}: DefaultGasEstimationParams): TransactionGasEstimationResult => {\n  return {\n    txEstimationExecutionStatus,\n    gasEstimation: '0',\n    gasCost: '0',\n    gasCostFormatted: '< 0.001',\n    gasPrice,\n    gasPriceFormatted,\n    gasMaxPrioFee,\n    gasMaxPrioFeeFormatted,\n    gasLimit: '0',\n    isCreation,\n    isOffChainSignature,\n  }\n}\n\nexport const calculateTotalGasCost = (\n  gasLimit: string,\n  gasPrice: string,\n  gasMaxPrioFee: string,\n  decimals: number,\n): [string, string] => {\n  const totalPricePerGas = parseInt(gasPrice, 10) + parseInt(gasMaxPrioFee || '0', 10)\n  const estimatedGasCosts = parseInt(gasLimit, 10) * totalPricePerGas\n  const gasCost = fromTokenUnit(estimatedGasCosts, decimals)\n  const formattedGasCost = formatAmount(gasCost)\n  return [gasCost, formattedGasCost]\n}\n\nexport const useEstimateTransactionGas = ({\n  txRecipient,\n  txData,\n  txConfirmations,\n  txAmount,\n  preApprovingOwner,\n  operation,\n  safeTxGas,\n  txType,\n  manualGasPrice,\n  manualMaxPrioFee,\n  manualGasLimit,\n  manualSafeNonce,\n}: UseEstimateTransactionGasProps): TransactionGasEstimationResult => {\n  const [gasEstimation, setGasEstimation] = useState<TransactionGasEstimationResult>(\n    getDefaultGasEstimation({\n      txEstimationExecutionStatus: EstimationStatus.LOADING,\n      gasPrice: '0',\n      gasPriceFormatted: '0',\n      gasMaxPrioFee: '0',\n      gasMaxPrioFeeFormatted: '0',\n    }),\n  )\n  const nativeCurrency = getNativeCurrency()\n  const { address: safeAddress = '', threshold = 1, currentVersion: safeVersion = '' } = useSelector(currentSafe) ?? {}\n  const { account: from, smartContractWallet, name: providerName } = useSelector(providerSelector)\n\n  const canTxExecute = useCanTxExecute(preApprovingOwner, txConfirmations?.size)\n\n  useEffect(() => {\n    const estimateGas = async () => {\n      if (!txData.length) {\n        return\n      }\n      const isOffChainSignature = checkIfOffChainSignatureIsPossible(canTxExecute, smartContractWallet, safeVersion)\n      const isCreation = checkIfTxIsCreation(txConfirmations?.size || 0, txType)\n\n      if (isOffChainSignature && !isCreation) {\n        setGasEstimation(\n          getDefaultGasEstimation({\n            txEstimationExecutionStatus: EstimationStatus.SUCCESS,\n            gasPrice: fromWei(DEFAULT_MAX_GAS_FEE, 'gwei'),\n            gasPriceFormatted: DEFAULT_MAX_GAS_FEE,\n            gasMaxPrioFee: fromWei(DEFAULT_MAX_PRIO_FEE, 'gwei'),\n            gasMaxPrioFeeFormatted: DEFAULT_MAX_PRIO_FEE,\n            isCreation,\n            isOffChainSignature,\n          }),\n        )\n        return\n      }\n      const approvalAndExecution = checkIfTxIsApproveAndExecution(\n        Number(threshold),\n        txConfirmations?.size || 0,\n        txType,\n        preApprovingOwner,\n      )\n\n      try {\n        let safeTxGasEstimation = safeTxGas || '0'\n        let ethGasLimitEstimation = 0\n        let transactionCallSuccess = true\n        let txEstimationExecutionStatus = EstimationStatus.LOADING\n\n        if (isCreation) {\n          safeTxGasEstimation = await estimateSafeTxGas(\n            {\n              safeAddress,\n              txData,\n              txRecipient,\n              txAmount: txAmount || '0',\n              operation: operation || Operation.CALL,\n            },\n            safeVersion,\n          )\n        }\n\n        if (canTxExecute || approvalAndExecution) {\n          ethGasLimitEstimation = await estimateTransactionGasLimit({\n            safeAddress,\n            safeVersion,\n            txRecipient,\n            txData,\n            txAmount: txAmount || '0',\n            txConfirmations,\n            isExecution: canTxExecute,\n            operation: operation || Operation.CALL,\n            from,\n            safeTxGas: safeTxGasEstimation,\n            approvalAndExecution,\n          })\n        }\n\n        const gasPrice = manualGasPrice ? toWei(manualGasPrice, 'gwei') : await calculateGasPrice()\n        const gasPriceFormatted = fromWei(gasPrice, 'gwei')\n        const gasMaxPrioFee = isMaxFeeParam()\n          ? manualMaxPrioFee\n            ? toWei(manualMaxPrioFee, 'gwei')\n            : DEFAULT_MAX_PRIO_FEE\n          : '0'\n        const gasMaxPrioFeeFormatted = fromWei(gasMaxPrioFee, 'gwei')\n        const gasLimit = manualGasLimit || ethGasLimitEstimation.toString()\n        const [gasCost, gasCostFormatted] = calculateTotalGasCost(\n          gasLimit,\n          gasPrice,\n          gasMaxPrioFee,\n          nativeCurrency.decimals,\n        )\n\n        if (canTxExecute) {\n          transactionCallSuccess = await checkTransactionExecution({\n            safeAddress,\n            safeVersion,\n            txRecipient,\n            txData,\n            txAmount: txAmount || '0',\n            txConfirmations,\n            operation: operation || Operation.CALL,\n            from,\n            gasPrice: '0',\n            gasToken: ZERO_ADDRESS,\n            gasLimit,\n            refundReceiver: ZERO_ADDRESS,\n            safeTxGas: safeTxGasEstimation,\n            approvalAndExecution,\n          })\n        }\n\n        txEstimationExecutionStatus = transactionCallSuccess ? EstimationStatus.SUCCESS : EstimationStatus.FAILURE\n\n        setGasEstimation({\n          txEstimationExecutionStatus,\n          gasEstimation: safeTxGasEstimation,\n          gasCost,\n          gasCostFormatted,\n          gasPrice,\n          gasPriceFormatted,\n          gasMaxPrioFee,\n          gasMaxPrioFeeFormatted,\n          gasLimit,\n          isCreation,\n          isOffChainSignature,\n        })\n      } catch (error) {\n        console.warn(error.message)\n        // If safeTxGas estimation fail we set this value to 0 (so up to all gasLimit can be used)\n        setGasEstimation(\n          getDefaultGasEstimation({\n            txEstimationExecutionStatus: EstimationStatus.FAILURE,\n            gasPrice: DEFAULT_MAX_GAS_FEE,\n            gasPriceFormatted: fromWei(DEFAULT_MAX_GAS_FEE, 'gwei'),\n            gasMaxPrioFee: DEFAULT_MAX_PRIO_FEE,\n            gasMaxPrioFeeFormatted: fromWei(DEFAULT_MAX_PRIO_FEE, 'gwei'),\n          }),\n        )\n      }\n    }\n\n    estimateGas()\n  }, [\n    txData,\n    safeAddress,\n    txRecipient,\n    txConfirmations,\n    txAmount,\n    preApprovingOwner,\n    nativeCurrency.decimals,\n    threshold,\n    from,\n    operation,\n    safeVersion,\n    smartContractWallet,\n    safeTxGas,\n    txType,\n    providerName,\n    manualGasPrice,\n    manualMaxPrioFee,\n    manualGasLimit,\n    manualSafeNonce,\n    canTxExecute,\n  ])\n\n  return gasEstimation\n}\n","import { useSelector } from 'react-redux'\nimport { currentSafe } from '../safe/store/selectors'\n\ntype UseCanTxExecuteType = (\n  preApprovingOwner?: string,\n  txConfirmations?: number,\n  existingTxThreshold?: number,\n) => boolean\n\nconst useCanTxExecute: UseCanTxExecuteType = (preApprovingOwner = '', txConfirmations = 0, existingTxThreshold) => {\n  const safeInfo = useSelector(currentSafe)\n\n  // A tx might have been created with a threshold that is different than the current policy\n  // If an existing tx threshold isn't passed, take the current safe threshold\n  const threshold = existingTxThreshold ?? safeInfo.threshold\n\n  if (txConfirmations >= threshold) {\n    return true\n  }\n\n  // When having a preApprovingOwner it is needed one less confirmation to execute the tx\n  if (preApprovingOwner) {\n    return txConfirmations + 1 === threshold\n  }\n\n  return false\n}\n\nexport default useCanTxExecute\n","export default __webpack_public_path__ + \"static/media/info_red.2d444d88.svg\";","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { toWei } from 'web3-utils'\n\nimport { getUserNonce } from 'src/logic/wallets/ethTransactions'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { currentSafeCurrentVersion } from 'src/logic/safe/store/selectors'\nimport { ParametersStatus } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport { sameString } from 'src/utils/strings'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { AppReduxState } from 'src/store'\nimport { getRecommendedNonce } from 'src/logic/safe/api/fetchSafeTxGasEstimation'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\n\nexport type TxParameters = {\n  safeNonce?: string\n  setSafeNonce: (safeNonce?: string) => void\n  safeTxGas?: string\n  setSafeTxGas: (gas?: string) => void\n  ethNonce?: string\n  setEthNonce: (ethNonce?: string) => void\n  ethGasLimit?: string\n  setEthGasLimit: (ethGasLimit?: string) => void\n  ethGasPrice?: string\n  setEthGasPrice: (ethGasPrice?: string) => void\n  ethMaxPrioFee?: string\n  setEthMaxPrioFee: (maxPrioFee?: string) => void\n  ethGasPriceInGWei?: string\n  ethMaxPrioFeeInGWei?: string\n}\n\ntype Props = {\n  parametersStatus?: ParametersStatus\n  initialSafeNonce?: string\n  initialSafeTxGas?: string\n  initialEthGasLimit?: string\n  initialEthGasPrice?: string\n  initialEthMaxPrioFee?: string\n}\n\n/**\n * This hooks is used to store tx parameter\n * It needs to be initialized calling setGasEstimation.\n */\nexport const useTransactionParameters = (props?: Props): TxParameters => {\n  const isCancelTransaction = sameString(props?.parametersStatus || 'ENABLED', 'CANCEL_TRANSACTION')\n  const connectedWalletAddress = useSelector(userAccountSelector)\n  const safeAddress = extractSafeAddress()\n  const safeVersion = useSelector(currentSafeCurrentVersion) as string\n  const state = useSelector((state: AppReduxState) => state)\n\n  // Safe Params\n  const [safeNonce, setSafeNonce] = useState<string | undefined>(props?.initialSafeNonce)\n  // SafeTxGas: for a new Tx call requiredTxGas, for an existing tx get it from the backend.\n  const [safeTxGas, setSafeTxGas] = useState<string | undefined>(isCancelTransaction ? '0' : props?.initialSafeTxGas)\n\n  // ETH Params\n  const [ethNonce, setEthNonce] = useState<string | undefined>() // we delegate it to the wallet\n  const [ethGasLimit, setEthGasLimit] = useState<string | undefined>(props?.initialEthGasLimit) // call execTx until it returns a number > 0\n  const [ethGasPrice, setEthGasPrice] = useState<string | undefined>(props?.initialEthGasPrice) // get fast gas price\n  const [ethGasPriceInGWei, setEthGasPriceInGWei] = useState<string>() // get fast gas price\n  const [ethMaxPrioFee, setEthMaxPrioFee] = useState<string>() // get max prio fee\n  const [ethMaxPrioFeeInGWei, setEthMaxPrioFeeInGWei] = useState<string>() // get max prio fee in gwei\n\n  // Get nonce for connected wallet\n  useEffect(() => {\n    const getNonce = async () => {\n      const res = await getUserNonce(connectedWalletAddress)\n      setEthNonce(res.toString())\n    }\n\n    if (connectedWalletAddress) {\n      getNonce()\n    }\n  }, [connectedWalletAddress])\n\n  // Get ETH gas price\n  useEffect(() => {\n    if (!ethGasPrice) {\n      setEthGasPriceInGWei(undefined)\n      return\n    }\n    if (isCancelTransaction) {\n      setEthGasPrice('0')\n      return\n    }\n    setEthGasPriceInGWei(toWei(ethGasPrice, 'Gwei'))\n  }, [ethGasPrice, isCancelTransaction])\n\n  // Get max prio fee\n  useEffect(() => {\n    if (!ethMaxPrioFee) {\n      setEthMaxPrioFee(undefined)\n      return\n    }\n    if (isCancelTransaction) {\n      setEthMaxPrioFee('0')\n      return\n    }\n    setEthMaxPrioFeeInGWei(toWei(ethMaxPrioFee, 'Gwei'))\n  }, [ethMaxPrioFee, isCancelTransaction])\n\n  // Calc safe nonce\n  useEffect(() => {\n    const getSafeNonce = async () => {\n      if (safeAddress) {\n        try {\n          const recommendedNonce = (await getRecommendedNonce(safeAddress)).toString()\n          setSafeNonce(recommendedNonce)\n        } catch (e) {\n          logError(Errors._616, e.message)\n        }\n      }\n    }\n\n    if (safeNonce === undefined) {\n      getSafeNonce()\n    }\n  }, [safeAddress, safeVersion, safeNonce, state])\n\n  return {\n    safeNonce,\n    setSafeNonce,\n    safeTxGas,\n    setSafeTxGas,\n    ethNonce,\n    setEthNonce,\n    ethGasLimit,\n    setEthGasLimit,\n    ethGasPrice,\n    setEthGasPrice,\n    ethMaxPrioFee,\n    setEthMaxPrioFee,\n    ethGasPriceInGWei,\n    ethMaxPrioFeeInGWei,\n  }\n}\n","import { FEATURES } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useSelector } from 'react-redux'\nimport { currentSafeCurrentVersion } from 'src/logic/safe/store/selectors'\nimport { hasFeature } from 'src/logic/safe/utils/safeVersion'\n\nconst useSafeTxGas = (): boolean => {\n  const safeVersion = useSelector(currentSafeCurrentVersion)\n  const showSafeTxGas = !hasFeature(FEATURES.SAFE_TX_GAS_OPTIONAL, safeVersion)\n  return showSafeTxGas\n}\n\nexport default useSafeTxGas\n","import { ReactElement, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\nimport { Text, ButtonLink, Accordion, AccordionSummary, AccordionDetails } from '@gnosis.pm/safe-react-components'\n\nimport { currentSafe } from 'src/logic/safe/store/selectors'\nimport { getLastTxNonce } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { ParametersStatus, areEthereumParamsVisible, areSafeParamsEnabled, ethereumTxParametersTitle } from '../utils'\nimport useSafeTxGas from 'src/routes/safe/components/Transactions/helpers/useSafeTxGas'\nimport { isMaxFeeParam } from 'src/logic/safe/transactions/gas'\n\nconst TxParameterWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst AccordionDetailsWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`\nconst StyledText = styled(Text)`\n  margin: 8px 0 0 0;\n`\n\nconst ColoredText = styled(Text)<{ isOutOfOrder: boolean }>`\n  color: ${(props) => (props.isOutOfOrder ? props.theme.colors.error : props.color)};\n`\n\nconst StyledButtonLink = styled(ButtonLink)`\n  padding-left: 0;\n  margin: 8px 0 0 0;\n\n  > p {\n    margin-left: 0;\n  }\n`\n\ntype Props = {\n  txParameters: TxParameters\n  onEdit: () => void\n  compact?: boolean\n  parametersStatus: ParametersStatus\n  isTransactionCreation: boolean\n  isTransactionExecution: boolean\n  isOffChainSignature: boolean\n}\n\nexport const TxParametersDetail = ({\n  onEdit,\n  txParameters,\n  compact = true,\n  parametersStatus,\n  isTransactionExecution,\n}: Props): ReactElement | null => {\n  const { nonce } = useSelector(currentSafe)\n\n  const [isTxNonceOutOfOrder, setIsTxNonceOutOfOrder] = useState(false)\n  const [isAccordionExpanded, setIsAccordionExpanded] = useState(false)\n\n  const { safeNonce = '' } = txParameters\n  const safeNonceNumber = parseInt(safeNonce, 10)\n  const lastQueuedTxNonce = useSelector(getLastTxNonce)\n  const showSafeTxGas = useSafeTxGas()\n\n  useEffect(() => {\n    if (Number.isNaN(safeNonceNumber)) return\n    if (safeNonceNumber === nonce) return\n    if (lastQueuedTxNonce === undefined && safeNonceNumber !== nonce) {\n      setIsAccordionExpanded(true)\n      setIsTxNonceOutOfOrder(true)\n    }\n    if (lastQueuedTxNonce && safeNonceNumber !== lastQueuedTxNonce + 1) {\n      setIsAccordionExpanded(true)\n      setIsTxNonceOutOfOrder(true)\n    }\n  }, [lastQueuedTxNonce, nonce, safeNonceNumber])\n\n  const onChangeExpand = () => {\n    setIsAccordionExpanded(!isAccordionExpanded)\n  }\n\n  if (parametersStatus === 'DISABLED') {\n    return null\n  }\n\n  return (\n    <Accordion compact={compact} expanded={isAccordionExpanded} onChange={onChangeExpand}>\n      <AccordionSummary>\n        <Text size=\"lg\">Advanced options</Text>\n      </AccordionSummary>\n      <AccordionDetails>\n        <AccordionDetailsWrapper>\n          <StyledText size=\"md\" color=\"placeHolder\">\n            Safe transaction\n          </StyledText>\n\n          <TxParameterWrapper>\n            <ColoredText\n              size=\"lg\"\n              isOutOfOrder={isTxNonceOutOfOrder}\n              color={areSafeParamsEnabled(parametersStatus) ? 'text' : 'secondaryLight'}\n            >\n              Safe nonce\n            </ColoredText>\n            <ColoredText\n              size=\"lg\"\n              isOutOfOrder={isTxNonceOutOfOrder}\n              color={areSafeParamsEnabled(parametersStatus) ? 'text' : 'secondaryLight'}\n            >\n              {txParameters.safeNonce}\n            </ColoredText>\n          </TxParameterWrapper>\n\n          {showSafeTxGas && (\n            <TxParameterWrapper>\n              <Text size=\"lg\" color={areSafeParamsEnabled(parametersStatus) ? 'text' : 'secondaryLight'}>\n                SafeTxGas\n              </Text>\n              <Text size=\"lg\" color={areSafeParamsEnabled(parametersStatus) ? 'text' : 'secondaryLight'}>\n                {txParameters.safeTxGas}\n              </Text>\n            </TxParameterWrapper>\n          )}\n\n          {areEthereumParamsVisible(parametersStatus) && (\n            <>\n              <TxParameterWrapper>\n                <StyledText size=\"md\" color=\"placeHolder\">\n                  {ethereumTxParametersTitle(isTransactionExecution)}\n                </StyledText>\n              </TxParameterWrapper>\n\n              <TxParameterWrapper>\n                <Text size=\"lg\">Nonce</Text>\n                <Text size=\"lg\">{txParameters.ethNonce}</Text>\n              </TxParameterWrapper>\n\n              <TxParameterWrapper>\n                <Text size=\"lg\">Gas limit</Text>\n                <Text size=\"lg\">{txParameters.ethGasLimit}</Text>\n              </TxParameterWrapper>\n\n              <TxParameterWrapper>\n                <Text size=\"lg\">{isMaxFeeParam() ? 'Max fee per gas' : 'Gas price'}</Text>\n                <Text size=\"lg\">{txParameters.ethGasPrice}</Text>\n              </TxParameterWrapper>\n\n              {isMaxFeeParam() && (\n                <TxParameterWrapper>\n                  <Text size=\"lg\">Max priority fee</Text>\n                  <Text size=\"lg\">{txParameters.ethMaxPrioFee}</Text>\n                </TxParameterWrapper>\n              )}\n            </>\n          )}\n          <StyledButtonLink color=\"primary\" textSize=\"xl\" onClick={onEdit}>\n            Edit\n          </StyledButtonLink>\n        </AccordionDetailsWrapper>\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import { lg, md, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: `${md} ${lg}`,\n    justifyContent: 'space-between',\n    boxSizing: 'border-box',\n    height: '74px',\n  },\n  annotation: {\n    letterSpacing: '-1px',\n    color: secondaryText,\n    marginRight: 'auto',\n    marginLeft: '20px',\n  },\n  headingText: {\n    fontSize: lg,\n  },\n  closeIcon: {\n    height: '35px',\n    width: '35px',\n  },\n  container: {\n    padding: `${md} ${lg}`,\n  },\n  amount: {\n    marginLeft: sm,\n  },\n  address: {\n    marginRight: sm,\n  },\n  buttonRow: {\n    height: '52px',\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: '16px',\n  },\n})\n","import { SafeTransactionEstimation } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { getRecommendedNonce } from '../safe/api/fetchSafeTxGasEstimation'\nimport { getLastTxNonce } from '../safe/store/selectors/gatewayTransactions'\n\ntype UseGetRecommendedNonce = (safeAddress: string) => number | undefined\n\nconst useGetRecommendedNonce: UseGetRecommendedNonce = (safeAddress) => {\n  const lastTxNonce = useSelector(getLastTxNonce)\n  const storeNextNonce = lastTxNonce ? lastTxNonce + 1 : undefined\n\n  const [recommendedNonce, setRecommendedNonce] = useState<number | undefined>(storeNextNonce)\n\n  useEffect(() => {\n    let isCurrent = true\n\n    const fetchRecommendedNonce = async () => {\n      let recommendedNonce: SafeTransactionEstimation['recommendedNonce']\n      try {\n        recommendedNonce = await getRecommendedNonce(safeAddress)\n      } catch (e) {\n        return\n      }\n\n      if (isCurrent) {\n        setRecommendedNonce(recommendedNonce)\n      }\n    }\n    fetchRecommendedNonce()\n\n    return () => {\n      isCurrent = false\n    }\n  }, [lastTxNonce, safeAddress])\n\n  return recommendedNonce\n}\n\nexport default useGetRecommendedNonce\n","import { ReactElement } from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport Close from '@material-ui/icons/Close'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Title, Text, Divider, Link, Icon } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\nimport { fromWei } from 'web3-utils'\n\nimport Field from 'src/components/forms/Field'\nimport TextField from 'src/components/forms/TextField'\nimport Block from 'src/components/layout/Block'\nimport Row from 'src/components/layout/Row'\nimport { styles } from './style'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { minValue } from 'src/components/forms/validator'\nimport { Modal } from 'src/components/Modal'\nimport {\n  ParametersStatus,\n  areSafeParamsEnabled,\n  areEthereumParamsVisible,\n  ethereumTxParametersTitle,\n} from 'src/routes/safe/components/Transactions/helpers/utils'\nimport useSafeTxGas from 'src/routes/safe/components/Transactions/helpers/useSafeTxGas'\nimport { isMaxFeeParam } from 'src/logic/safe/transactions/gas'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport useGetRecommendedNonce from 'src/logic/hooks/useGetRecommendedNonce'\nimport { DEFAULT_MAX_PRIO_FEE } from 'src/logic/hooks/useEstimateTransactionGas'\n\nconst StyledDivider = styled(Divider)`\n  margin: 0px;\n`\nconst StyledDividerFooter = styled(Divider)`\n  margin: 16px -24px;\n`\n\nconst SafeOptions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  gap: 20px;\n`\n\nconst EthereumOptions = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 10px;\n`\nconst StyledLink = styled(Link)`\n  margin: 16px 0 0 0;\n  display: inline-flex;\n  align-items: center;\n\n  > :first-of-type {\n    margin-right: 5px;\n  }\n`\nconst StyledText = styled(Text)`\n  margin: 0 0 4px 0;\n`\nconst StyledTextMt = styled(Text)`\n  margin: 16px 0 4px 0;\n`\nconst useStyles = makeStyles(styles)\n\ninterface Props {\n  txParameters: TxParameters\n  onClose: (txParameters?: TxParameters) => void\n  parametersStatus: ParametersStatus\n  isExecution: boolean\n}\n\nconst formValidation = (values: Record<keyof TxParameters, string>): Record<string, number | string | undefined> => {\n  const { ethGasLimit, ethGasPrice, ethMaxPrioFee, ethNonce, safeNonce, safeTxGas } = values ?? {}\n\n  const ethGasLimitValidation = minValue(0, true)(ethGasLimit)\n\n  const ethGasPriceValidation = minValue(0, true)(ethGasPrice)\n\n  const ethMaxPrioFeeValidation = minValue(0, true)(ethMaxPrioFee)\n\n  const ethNonceValidation = minValue(0, true)(ethNonce)\n\n  const safeNonceValidation = minValue(0, true)(safeNonce)\n\n  const safeTxGasValidation = minValue(0, true)(safeTxGas)\n\n  return {\n    ethGasLimit: ethGasLimitValidation,\n    ethGasPrice: ethGasPriceValidation,\n    ethMaxPrioFee: ethMaxPrioFeeValidation,\n    ethNonce: ethNonceValidation,\n    safeNonce: safeNonceValidation,\n    safeTxGas: safeTxGasValidation,\n  }\n}\n\nexport const EditTxParametersForm = ({\n  onClose,\n  txParameters,\n  parametersStatus = 'ENABLED',\n  isExecution,\n}: Props): ReactElement => {\n  const classes = useStyles()\n  const { safeNonce, safeTxGas, ethNonce, ethGasLimit, ethGasPrice, ethMaxPrioFee } = txParameters\n  const showSafeTxGas = useSafeTxGas()\n  const safeAddress = extractSafeAddress()\n  const recommendedNonce = useGetRecommendedNonce(safeAddress)\n\n  const onSubmit = (values: TxParameters) => {\n    onClose(values)\n  }\n\n  const onCloseFormHandler = () => {\n    onClose()\n  }\n\n  return (\n    <>\n      {/* Header */}\n      <Row align=\"center\" className={classes.heading} grow data-testid=\"send-funds-review-step\">\n        <Title size=\"sm\" withoutMargin>\n          Advanced options\n        </Title>\n        <IconButton disableRipple onClick={onCloseFormHandler}>\n          <Close className={classes.closeIcon} />\n        </IconButton>\n      </Row>\n\n      <StyledDivider />\n\n      <Block className={classes.container}>\n        <GnoForm\n          initialValues={{\n            safeNonce: safeNonce || recommendedNonce || '0',\n            safeTxGas: safeTxGas || '',\n            ethNonce: ethNonce || '',\n            ethGasLimit: ethGasLimit || '',\n            ethGasPrice: ethGasPrice || '',\n            ethMaxPrioFee: ethMaxPrioFee || '',\n          }}\n          onSubmit={onSubmit}\n          validation={formValidation}\n        >\n          {() => (\n            <>\n              <StyledText size=\"xl\" strong>\n                Safe transaction\n              </StyledText>\n\n              <SafeOptions>\n                <Field\n                  name=\"safeNonce\"\n                  defaultValue={safeNonce}\n                  placeholder=\"Safe nonce\"\n                  text=\"Safe nonce\"\n                  type=\"number\"\n                  min=\"0\"\n                  component={TextField}\n                  disabled={!areSafeParamsEnabled(parametersStatus)}\n                />\n                {showSafeTxGas && (\n                  <Field\n                    name=\"safeTxGas\"\n                    defaultValue={safeTxGas}\n                    placeholder=\"SafeTxGas\"\n                    text=\"SafeTxGas\"\n                    type=\"number\"\n                    min=\"0\"\n                    component={TextField}\n                    disabled={!areSafeParamsEnabled(parametersStatus)}\n                  />\n                )}\n              </SafeOptions>\n\n              {areEthereumParamsVisible(parametersStatus) && (\n                <>\n                  <StyledTextMt size=\"xl\" strong>\n                    {ethereumTxParametersTitle(isExecution)}\n                  </StyledTextMt>\n\n                  <EthereumOptions>\n                    <Field\n                      name=\"ethNonce\"\n                      defaultValue={ethNonce}\n                      placeholder=\"Nonce\"\n                      text=\"Nonce\"\n                      type=\"number\"\n                      component={TextField}\n                      disabled={!areEthereumParamsVisible(parametersStatus)}\n                    />\n                    <Field\n                      name=\"ethGasLimit\"\n                      defaultValue={ethGasLimit}\n                      placeholder=\"Gas limit\"\n                      text=\"Gas limit\"\n                      type=\"number\"\n                      component={TextField}\n                      disabled={parametersStatus === 'CANCEL_TRANSACTION'}\n                    />\n                    {((gasPriceText) => (\n                      <Field\n                        name=\"ethGasPrice\"\n                        defaultValue={ethGasPrice}\n                        type=\"number\"\n                        placeholder={gasPriceText}\n                        text={gasPriceText}\n                        component={TextField}\n                        disabled={!areEthereumParamsVisible(parametersStatus)}\n                      />\n                    ))(`${isMaxFeeParam() ? 'Max fee per gas' : 'Gas price'} (GWEI)`)}\n\n                    {isMaxFeeParam() && (\n                      <Field\n                        name=\"ethMaxPrioFee\"\n                        defaultValue={ethMaxPrioFee}\n                        type=\"number\"\n                        placeholder={`${fromWei(DEFAULT_MAX_PRIO_FEE, 'gwei')} (GWEI)`}\n                        text=\"Max priority fee (GWEI)\"\n                        component={TextField}\n                        disabled={!areEthereumParamsVisible(parametersStatus)}\n                      />\n                    )}\n                  </EthereumOptions>\n\n                  <StyledLink\n                    href=\"https://help.gnosis-safe.io/en/articles/4738445-configure-advanced-transaction-parameters-manually\"\n                    target=\"_blank\"\n                  >\n                    <Text size=\"xl\" color=\"primary\">\n                      How can I configure these parameters manually?\n                    </Text>\n                    <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\n                  </StyledLink>\n                </>\n              )}\n\n              <StyledDividerFooter />\n\n              {/* Footer */}\n              <Row align=\"center\" className={classes.buttonRow}>\n                <Modal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onCloseFormHandler, text: 'Back' }}\n                  confirmButtonProps={{\n                    type: 'submit',\n                    text: 'Confirm',\n                    testId: 'submit-tx-btn',\n                  }}\n                />\n              </Row>\n            </>\n          )}\n        </GnoForm>\n      </Block>\n    </>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport { TxParameters, useTransactionParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { EditTxParametersForm } from 'src/routes/safe/components/Transactions/helpers/EditTxParametersForm'\nimport { ParametersStatus } from './utils'\nimport { useSelector } from 'react-redux'\nimport { fromWei } from 'web3-utils'\n\nimport { currentSafeThreshold } from 'src/logic/safe/store/selectors'\nimport { DEFAULT_MAX_PRIO_FEE } from 'src/logic/hooks/useEstimateTransactionGas'\n\ntype Props = {\n  children: (txParameters: TxParameters, toggleStatus: (txParameters?: TxParameters) => void) => any\n  isOffChainSignature: boolean\n  isExecution: boolean\n  parametersStatus?: ParametersStatus\n  ethGasLimit?: TxParameters['ethGasLimit']\n  ethGasPrice?: TxParameters['ethGasPrice']\n  ethMaxPrioFee?: TxParameters['ethMaxPrioFee']\n  safeNonce?: TxParameters['safeNonce']\n  safeTxGas?: TxParameters['safeTxGas']\n  closeEditModalCallback?: (txParameters: TxParameters) => void\n}\n\nexport const EditableTxParameters = ({\n  children,\n  isOffChainSignature,\n  isExecution,\n  parametersStatus,\n  ethGasLimit,\n  ethGasPrice,\n  ethMaxPrioFee,\n  safeNonce,\n  safeTxGas,\n  closeEditModalCallback,\n}: Props): React.ReactElement => {\n  const [isEditMode, toggleEditMode] = useState(false)\n  const [useManualValues, setUseManualValues] = useState(false)\n  const threshold = useSelector(currentSafeThreshold) || 1\n  const defaultParameterStatus = isOffChainSignature && threshold > 1 ? 'ETH_HIDDEN' : 'ENABLED'\n  const txParameters = useTransactionParameters({\n    parametersStatus: parametersStatus || defaultParameterStatus,\n    initialEthGasLimit: ethGasLimit,\n    initialEthGasPrice: ethGasPrice,\n    initialEthMaxPrioFee: ethMaxPrioFee,\n    initialSafeNonce: safeNonce,\n    initialSafeTxGas: safeTxGas,\n  })\n  const { setEthGasPrice, setEthGasLimit, setEthMaxPrioFee, setSafeNonce, setSafeTxGas, setEthNonce } = txParameters\n\n  // Update TxParameters\n  useEffect(() => {\n    if (!useManualValues) {\n      setEthGasLimit(ethGasLimit)\n      setEthGasPrice(ethGasPrice)\n      setEthMaxPrioFee(ethMaxPrioFee)\n      setSafeTxGas(safeTxGas)\n    }\n  }, [\n    ethGasLimit,\n    setEthGasLimit,\n    ethGasPrice,\n    setEthGasPrice,\n    useManualValues,\n    safeTxGas,\n    setSafeTxGas,\n    setEthMaxPrioFee,\n    ethMaxPrioFee,\n  ])\n\n  const toggleStatus = () => {\n    toggleEditMode((prev) => !prev)\n  }\n\n  const closeEditFormHandler = (txParameters?: TxParameters) => {\n    if (txParameters) {\n      setUseManualValues(true)\n      setSafeNonce(txParameters.safeNonce)\n      setSafeTxGas(txParameters.safeTxGas)\n      setEthGasLimit(txParameters.ethGasLimit)\n      setEthGasPrice(txParameters.ethGasPrice)\n      setEthMaxPrioFee(txParameters.ethMaxPrioFee || fromWei(DEFAULT_MAX_PRIO_FEE, 'gwei'))\n      setEthNonce(txParameters.ethNonce)\n      closeEditModalCallback && closeEditModalCallback(txParameters)\n    }\n    toggleStatus()\n  }\n\n  return isEditMode ? (\n    <EditTxParametersForm\n      isExecution={isExecution}\n      txParameters={txParameters}\n      onClose={closeEditFormHandler}\n      parametersStatus={parametersStatus ? parametersStatus : defaultParameterStatus}\n    />\n  ) : (\n    children(txParameters, toggleStatus)\n  )\n}\n","import { createStyles, makeStyles } from '@material-ui/core'\nimport { sm } from 'src/theme/variables'\nimport { EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\nimport Row from 'src/components/layout/Row'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Img from 'src/components/layout/Img'\nimport InfoIcon from 'src/assets/icons/info_red.svg'\n\nimport { useSelector } from 'react-redux'\nimport { currentSafeThreshold } from 'src/logic/safe/store/selectors'\nimport { shouldSwitchWalletChain } from 'src/logic/wallets/store/selectors'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\n\nconst styles = createStyles({\n  executionWarningRow: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  warningIcon: {\n    marginRight: sm,\n  },\n})\n\nconst useStyles = makeStyles(styles)\n\ntype TransactionFailTextProps = {\n  txEstimationExecutionStatus: EstimationStatus\n  isExecution: boolean\n}\n\nexport const TransactionFailText = ({\n  txEstimationExecutionStatus,\n  isExecution,\n}: TransactionFailTextProps): React.ReactElement | null => {\n  const classes = useStyles()\n  const threshold = useSelector(currentSafeThreshold)\n  const isWrongChain = useSelector(shouldSwitchWalletChain)\n  const isGranted = useSelector(grantedSelector)\n\n  if (txEstimationExecutionStatus !== EstimationStatus.FAILURE) {\n    return null\n  }\n\n  let errorDesc = 'To save gas costs, avoid creating the transaction.'\n  if (isExecution) {\n    errorDesc =\n      threshold && threshold > 1\n        ? `To save gas costs, reject this transaction`\n        : `To save gas costs, avoid executing the transaction.`\n  }\n\n  const error = isGranted\n    ? `This transaction will most likely fail. ${errorDesc}`\n    : isWrongChain\n    ? 'Your wallet is connected to the wrong chain.'\n    : \"You are currently not an owner of this Safe and won't be able to submit this transaction.\"\n\n  return (\n    <Row align=\"center\">\n      <Paragraph color=\"error\" className={classes.executionWarningRow}>\n        <Img alt=\"Info Tooltip\" height={16} src={InfoIcon} className={classes.warningIcon} />\n        {error}\n      </Paragraph>\n    </Row>\n  )\n}\n","import { EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { getNativeCurrency } from 'src/config'\nimport { TransactionFailText } from 'src/components/TransactionFailText'\nimport { Text } from '@gnosis.pm/safe-react-components'\nimport { providerSelector } from 'src/logic/wallets/store/selectors'\nimport { useSelector } from 'react-redux'\nimport { currentSafe } from 'src/logic/safe/store/selectors'\nimport { checkIfOffChainSignatureIsPossible } from 'src/logic/safe/safeTxSigner'\n\ntype TransactionFailTextProps = {\n  txEstimationExecutionStatus: EstimationStatus\n  gasCostFormatted?: string\n  isExecution: boolean\n  isCreation: boolean\n}\n\nexport const TransactionFees = ({\n  gasCostFormatted,\n  isExecution,\n  isCreation,\n  txEstimationExecutionStatus,\n}: TransactionFailTextProps): React.ReactElement | null => {\n  const { currentVersion: safeVersion } = useSelector(currentSafe)\n  const { smartContractWallet } = useSelector(providerSelector)\n  const isOffChainSignature = checkIfOffChainSignatureIsPossible(isExecution, smartContractWallet, safeVersion)\n\n  const nativeCurrency = getNativeCurrency()\n  let transactionAction\n  if (txEstimationExecutionStatus === EstimationStatus.LOADING) {\n    return null\n  }\n  if (isCreation) {\n    transactionAction = 'create'\n  } else if (isExecution) {\n    transactionAction = 'execute'\n  } else {\n    transactionAction = 'approve'\n  }\n\n  return (\n    <>\n      {gasCostFormatted != null && (\n        <Paragraph size=\"lg\" align=\"center\">\n          You&apos;re about to {transactionAction} a transaction and will have to confirm it with your currently\n          connected wallet.{' '}\n          {(!isOffChainSignature || isExecution) && (\n            <>\n              Make sure you have\n              <Text size=\"lg\" as=\"span\" color=\"text\" strong>\n                {' '}\n                {gasCostFormatted} {nativeCurrency.symbol}{' '}\n              </Text>\n              in this wallet to fund the associated transaction fee.\n            </>\n          )}\n        </Paragraph>\n      )}\n      <TransactionFailText txEstimationExecutionStatus={txEstimationExecutionStatus} isExecution={isExecution} />\n    </>\n  )\n}\n","import styled from 'styled-components'\nimport { Text } from '@gnosis.pm/safe-react-components'\nimport { useSelector } from 'react-redux'\n\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { currentSafe } from 'src/logic/safe/store/selectors'\nimport { getLastTxNonce } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { lg, sm } from 'src/theme/variables'\nimport { TransactionFees } from '../TransactionsFees'\nimport { getRecommendedNonce } from 'src/logic/safe/api/fetchSafeTxGasEstimation'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { ComponentProps, useEffect, useState } from 'react'\n\ntype CustomReviewInfoTextProps = {\n  safeNonce?: string\n  testId?: string\n}\n\ntype ReviewInfoTextProps = ComponentProps<typeof TransactionFees> & CustomReviewInfoTextProps\n\nconst ReviewInfoTextWrapper = styled.div`\n  background-color: ${({ theme }) => theme.colors.background};\n  padding: ${sm} ${lg};\n`\n\nexport const ReviewInfoText = ({\n  gasCostFormatted,\n  isCreation,\n  isExecution,\n  safeNonce: txParamsSafeNonce = '',\n  testId,\n  txEstimationExecutionStatus,\n}: ReviewInfoTextProps): React.ReactElement => {\n  const { nonce } = useSelector(currentSafe)\n  const safeNonceNumber = parseInt(txParamsSafeNonce, 10)\n  const lastTxNonce = useSelector(getLastTxNonce)\n  const storeNextNonce = `${lastTxNonce && lastTxNonce + 1}`\n  const safeAddress = extractSafeAddress()\n  const [recommendedNonce, setRecommendedNonce] = useState<string>(storeNextNonce)\n\n  useEffect(() => {\n    const fetchRecommendedNonce = async () => {\n      try {\n        const recommendedNonce = (await getRecommendedNonce(safeAddress)).toString()\n        setRecommendedNonce(recommendedNonce)\n      } catch (e) {\n        return\n      }\n    }\n    fetchRecommendedNonce()\n  }, [safeAddress])\n\n  const warningMessage = () => {\n    const isTxNonceOutOfOrder = () => {\n      // safeNonce can be undefined while waiting for the request.\n      if (isNaN(safeNonceNumber) || safeNonceNumber === nonce) return false\n      if (lastTxNonce !== undefined && safeNonceNumber === lastTxNonce + 1) return false\n      return true\n    }\n    const shouldShowWarning = isTxNonceOutOfOrder()\n    if (!shouldShowWarning) return null\n\n    const transactionsToGo = safeNonceNumber - nonce\n    return (\n      <Paragraph size=\"lg\" align=\"center\">\n        {transactionsToGo < 0 ? (\n          `Nonce ${txParamsSafeNonce} has already been used. Your transaction will fail. Please use nonce ${recommendedNonce}.`\n        ) : (\n          <>\n            <Text size=\"lg\" as=\"span\" color=\"text\" strong>\n              {transactionsToGo}\n            </Text>\n            {` transaction${\n              transactionsToGo > 1 ? 's' : ''\n            } will need to be created and executed before this transaction,\n        are you sure you want to do this?`}\n          </>\n        )}\n      </Paragraph>\n    )\n  }\n\n  return (\n    <ReviewInfoTextWrapper data-testid={testId}>\n      {warningMessage() || (\n        <TransactionFees\n          gasCostFormatted={gasCostFormatted}\n          isCreation={isCreation}\n          isExecution={isExecution}\n          txEstimationExecutionStatus={txEstimationExecutionStatus}\n        />\n      )}\n    </ReviewInfoTextWrapper>\n  )\n}\n"],"sourceRoot":""}