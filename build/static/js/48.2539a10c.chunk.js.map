{"version":3,"sources":["routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils/index.ts","routes/safe/components/Settings/SpendingLimit/FormFields/ResetTime.tsx","routes/safe/components/Settings/SpendingLimit/FormFields/Amount.tsx","routes/safe/components/Settings/SpendingLimit/style.ts","routes/safe/components/Settings/SpendingLimit/InfoDisplay/AddressInfo.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/ResetTimeInfo.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/TokenInfo.tsx","logic/safe/hooks/useTokenInfo.tsx","routes/safe/components/Transactions/TxList/assets/custom.svg","logic/hooks/useDebounce.tsx","routes/safe/components/Transactions/TxList/hooks/usePagedHistoryTransactions.ts","routes/safe/components/Transactions/TxList/hooks/useHistoryTransactions.ts","routes/safe/components/Transactions/TxList/styled.tsx","components/InfiniteScroll/index.tsx","routes/safe/components/Transactions/TxList/TxsInfiniteScroll.tsx","routes/safe/components/Transactions/TxList/hooks/useAssetInfo.ts","logic/hooks/useTxStatus.ts","routes/safe/components/Transactions/TxList/hooks/useTransactionStatus.ts","routes/safe/components/Transactions/TxList/assets/circle-cross-red.svg","routes/safe/components/Transactions/TxList/assets/incoming.svg","routes/safe/components/Transactions/TxList/assets/outgoing.svg","routes/safe/components/Transactions/TxList/assets/settings.svg","routes/safe/components/Transactions/TxList/hooks/useKnownAddress.ts","routes/safe/components/Transactions/TxList/hooks/useTransactionType.ts","components/CustomIconText/index.tsx","routes/safe/components/Transactions/TxList/TxLocationProvider.tsx","routes/safe/components/Transactions/TxList/TxActionProvider.tsx","routes/safe/components/Transactions/TxList/TxHoverProvider.tsx","routes/safe/components/Transactions/TxList/hooks/useActionButtonsHandlers.ts","routes/safe/components/Transactions/TxList/hooks/useTransactionActions.ts","routes/safe/components/Transactions/TxList/TxCollapsedActions.tsx","routes/safe/components/Transactions/TxList/TokenTransferAmount.tsx","routes/safe/components/Transactions/TxList/TxCollapsed.tsx","routes/safe/components/Transactions/TxList/TxHistoryCollapsed.tsx","routes/safe/components/Transactions/TxList/SpendingLimitDetails.tsx","routes/safe/components/AddressBook/EllipsisTransactionDetails/index.tsx","routes/safe/components/Transactions/TxList/AddressInfo.tsx","routes/safe/components/Transactions/TxList/InfoDetails.tsx","routes/safe/components/Transactions/TxList/TxInfoDetails.tsx","routes/safe/components/Transactions/TxList/HexEncodedData.tsx","routes/safe/components/Transactions/TxList/MethodValue.tsx","routes/safe/components/Transactions/TxList/MethodDetails.tsx","routes/safe/components/Transactions/TxList/DelegateCallWarning.tsx","routes/safe/components/Transactions/TxList/MultiSendDetails.tsx","routes/safe/components/Transactions/TxList/TxData.tsx","routes/safe/components/Transactions/TxList/TxExpandedActions.tsx","routes/safe/components/Transactions/TxList/TxInfoSettings.tsx","routes/safe/components/Transactions/TxList/TxInfoTransfer.tsx","routes/safe/components/Transactions/TxList/TxInfo.tsx","routes/safe/components/Transactions/TxList/assets/transactions-list-active.svg","routes/safe/components/Transactions/TxList/assets/transactions-list-inactive.svg","routes/safe/components/Transactions/TxList/TxOwners.tsx","routes/safe/components/Transactions/TxList/TxShareButton.tsx","routes/safe/components/Transactions/TxList/TxInfoMultiSend.tsx","routes/safe/components/Transactions/TxList/TxSummary.tsx","routes/safe/components/Transactions/TxList/TxModuleInfo.tsx","routes/safe/components/Transactions/TxList/TxDetails.tsx","routes/safe/components/Transactions/TxList/hooks/useTransactionDetails.ts","routes/safe/components/Transactions/TxList/TxInfoCreation.tsx","routes/safe/components/Transactions/TxList/TxHistoryRow.tsx","routes/safe/components/Transactions/TxList/HistoryTxList.tsx","routes/safe/components/Transactions/TxList/assets/no-transactions.svg","routes/safe/components/Transactions/TxList/HistoryTransactions.tsx","routes/safe/components/Transactions/TxList/hooks/usePagedQueuedTransactions.ts","routes/safe/components/Transactions/TxList/hooks/useQueueTransactions.ts","routes/safe/components/Transactions/TxList/TxQueueCollapsed.tsx","routes/safe/components/Transactions/TxList/TxQueueRow.tsx","routes/safe/components/Transactions/TxList/modals/style.ts","logic/safe/store/models/confirmation.ts","routes/safe/components/Transactions/TxList/modals/ApproveTxModal.tsx","logic/safe/store/actions/processTransaction.ts","routes/safe/components/Transactions/TxList/modals/RejectTxModal.tsx","routes/safe/components/Transactions/TxList/ActionModal.tsx","routes/safe/components/Transactions/TxList/QueueTxList.tsx","routes/safe/components/Transactions/TxList/QueueTransactions.tsx","routes/safe/components/Transactions/TxList/TxSingularDetails.tsx","routes/safe/components/Transactions/TxList/index.tsx"],"names":["setImageToPlaceholder","event","img","currentTarget","test","src","TokenPlaceholder","Bold","this","props","children","React","NO_CONTRACT","ensResolver","createDecorator","field","updates","contractAddress","a","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","resolvedAddress","console","error","message","formMutators","setMax","args","state","utils","changeValue","setContractAddress","setSelectedMethod","lastFormState","values","selectedMethod","name","setCallResults","setAbiValue","isAddress","type","indexOf","isBoolean","isUint","isInt","isByte","isArrayParameter","parameter","handleSubmitError","key","hasOwnProperty","undefined","value","reason","FORM_ERROR","generateFormFieldKey","signatureHash","index","keyType","extractMethodArgs","JSON","parse","map","Number","isInteger","BigNumber","toString","err","getParsedJSONOrArrayFromString","createTxObject","method","contract","getWeb3","eth","Contract","inputs","methods","isReadMethod","action","getValueFromTxInputs","tx","replace","String","SpendingLimitRadioButtons","styled","RadioButtons","theme","colors","primary","StyledSwitch","rest","icon","hexToRgb","primaryLight","SafeRadioButtons","options","initialValue","groupName","input","onChange","onRadioChange","Switch","label","control","render","checked","ResetTimeLabel","div","ResetTimeToggle","ResetTimeOptions","RESET_TIME_OPTIONS","RINKEBY_RESET_TIME_OPTIONS","getResetTimeOptions","getChainName","toLowerCase","ResetTime","withResetTime","useField","subscription","resetTimeOptions","switchExplanation","size","Field","GnoField","AmountInput","TextField","SRCTextField","Amount","classes","useStyles","tokenAddress","touched","visited","meta","selectedTokenRecord","useSelector","extendedSafeTokensSelector","find","token","address","validate","composeValidators","required","mustBeFloat","minValue","component","endAdornment","symbol","className","amountInput","makeStyles","createStyles","title","padding","lg","paddingBottom","hide","backgroundColor","visibility","actions","justifyContent","noBorderBottom","borderBottom","annotation","paddingLeft","ownersText","color","secondaryText","fontColor","container","actionButton","fontWeight","boldFont","marginRight","sm","buttonRow","left","bottom","boxSizing","width","borderTop","border","modifyBtn","height","xl","fontSize","smallFontSize","removeModuleIcon","marginLeft","cursor","modalHeading","modalContainer","minHeight","modalManage","modalClose","modalButtonRow","modalButtonRemove","modalName","textOverflow","overflow","modalUserName","whiteSpace","modalOwner","background","md","alignItems","modalUser","modalDescription","modalOpen","AddressInfo","logoUri","addessBookName","addressBookEntryName","strong","PrefixedEthHashInfo","hash","sameString","ADDRESS_BOOK_DEFAULT_NAME","showCopyBtn","showAvatar","textSize","explorerUrl","getExplorerInfo","customAvatar","ResetTimeInfo","Row","align","margin","iconSize","iconType","text","StyledImage","StyledImageName","TokenInfo","amount","alt","onError","useTokenInfo","tokens","safeKnownCoins","sameAddress","useDebounce","delay","previousValue","useRef","useState","current","setCurrent","debouncedCallback","useMemo","debounce","val","useEffect","cancel","usePagedHistoryTransactions","historyTxs","historyTransactions","count","setCount","history","Object","entries","reduce","acc","length","transactions","useHistoryTransactions","chainId","currentChainId","dispatch","useDispatch","safeAddress","extractSafeAddress","hasMore","setHasMore","isLoading","setIsLoading","next","useCallback","loadPagedHistoryTransactions","results","content","Errors","_608","log","addHistoryTransactions","Wrapper","ContentWrapper","ColumnDisplayAccordionDetails","AccordionDetails","NoPaddingAccordion","Accordion","attrs","isDeeplinkedTx","expanded","ActionAccordion","StyledTransactionsGroup","SubTitle","h2","Text","placeHolder","StyledTransactions","white","GroupedTransactionsCard","separator","inputField","gridColumns","nonce","info","time","votes","status","willBeReplaced","css","failedTransaction","onChainRejection","errorTooltip","StyledTransaction","join","StyledGroupedTransactions","slice","GroupedTransactions","DisclaimerContainer","TxDetailsContainer","ownerRows","errorHover","secondary","OwnerList","ul","OwnerListItem","li","InlineEthHashInfo","EthHashInfo","StyledScrollableBar","ScrollableTransactionsContainer","Centered","HorizontallyCentered","isVisible","StyledAccordionSummary","AccordionSummary","expandIcon","AlignItemsWithMargin","NoTransactions","INFINITE_SCROLL_CONTAINER","InfiniteScrollContext","createContext","setLastItemId","ref","InfiniteScrollProvider","forwardRef","lastItemId","_setLastItemId","Provider","itemId","setTimeout","displayName","InfiniteScroll","config","useInView","threshold","root","document","querySelector","rootMargin","triggerOnce","inView","isMounted","TxsInfiniteScroll","id","defaultTokenTransferAsset","NOT_AVAILABLE","directionSign","amountWithSymbol","tokenType","useAssetInfo","txInfo","asset","setAsset","getTxAmount","isTransferTxInfo","direction","transferInfo","TokenType","ERC20","tokenName","ERC721","getTokenIdLabel","NATIVE_COIN","nativeCurrency","getNativeCurrency","isSettingsChangeTxInfo","isCustomTxInfo","useTxStatus","transaction","storedStatus","selectTxStatus","localStatus","setLocalStatus","useTransactionStatus","currentUser","userAccountSelector","setStatus","txStatus","executionInfo","LocalTransactionStatus","SUCCESS","FAILED","CANCELLED","WILL_BE_REPLACED","AWAITING_CONFIRMATIONS","addressInList","missingSigners","signaturePending","AWAITING_EXECUTION","PENDING","DEFAULT_PROPS","useKnownAddress","recipientName","isInAddressBook","useTransactionType","CustomTxIcon","setType","toAddress","getTxTo","knownAddressBookAddress","SettingsTxIcon","isSendTx","OutgoingTxIcon","IncomingTxIcon","dataDecoded","isCancellation","CircleCrossRed","safeAppInfo","fallbackIcon","CustomIconText","iconUrl","iconUrlFallback","showHash","avatarSize","customAvatarFallback","TxLocationContext","txLocation","setTxLocation","TransactionActionStateContext","selectedAction","actionSelected","transactionId","selectAction","TxActionProvider","setSelectedAction","fetchTransactionDetails","TxHoverContext","activeHover","setActiveHover","TxHoverProvider","useActionButtonsHandlers","actionContext","useContext","hoverContext","locationContext","isUserAnOwner","grantedSelector","isWrongChain","shouldSwitchWalletChain","transactionsByNonce","getTransactionsByNonce","canCancel","some","canConfirm","canConfirmThenExecute","canExecute","setState","isMultisigExecutionInfo","confirmationsSubmitted","confirmationsRequired","currentUserSigned","missingSigner","oneToGo","includes","prev","useTransactionActions","isPending","handleConfirmButtonClick","stopPropagation","txDetails","isMultiSigExecutionDetails","detailedExecutionInfo","details","confirmations","enqueueSnackbar","NOTIFICATIONS","TX_FETCH_SIGNATURES_ERROR_MSG","handleCancelButtonClick","handleOnMouseEnter","handleOnMouseLeave","disabledActions","IconButton","MuiIconButton","TxCollapsedActions","currentSafeNonce","isAwaitingEx","isAwaitingExecution","getTitle","placement","onClick","disabled","onMouseEnter","onMouseLeave","AmountWrapper","TokenTransferAmount","assetInfo","Img","onerror","NFTIcon","TxInfo","settingsInfo","as","isMultiSendTxInfo","actionCount","methodName","CircularProgressPainter","SmallDot","Dot","IconText","IconTextSrc","TooltipContent","TxCollapsed","isGrouped","TxsInfiniteScrollContext","userAddress","toInfo","isCancelTxDetails","txCollapsedNonce","txCollapsedType","txCollapsedInfo","timestamp","txCollapsedTime","formatDateTime","arrow","formatTime","formatTimeInWords","txCollapsedVotes","submitted","txCollapsedActions","txCollapsedStatus","TxHistoryCollapsed","isSetAllowance","isDeleteAllowance","SpendingLimitRow","ModifySpendingLimitDetails","txData","parameters","beneficiary","resetTimeMin","resetTimeLabel","tokenInfo","txTo","fromTokenUnit","decimals","DeleteSpendingLimitDetails","display","xs","borderRadius","transition","outline","increasedPopperZindex","zIndex","EllipsisTransactionDetails","sendModalOpenHandler","anchorEl","setAnchorEl","isOwnerConnected","isStoredInAddressBook","handleClick","closeMenuHandler","addOrEditEntryHandler","push","pathname","generateSafeRoute","SAFE_ROUTES","ADDRESS_BOOK","shortName","getShortName","search","ClickAwayListener","onClickAway","role","tabIndex","onKeyDown","Menu","keepMounted","onClose","open","Boolean","MenuItem","Divider","avatarUrl","InfoDetails","SingleRow","TxInfoDetails","isTransferType","canRepeatTransaction","sendModalOpen","setSendModalOpen","activeScreenType","recipientAddress","selectedToken","ZERO_ADDRESS","tokenAmount","sendModalParams","setSendModalParams","isCollectible","getTxTokenData","SendModal","isOpen","styles","txDataParagraph","linkTxData","textDecoration","HexEncodedData","hexData","limit","showTxData","setShowTxData","showExpandBtn","shortener","textShortener","charsStart","charsEnd","Paragraph","noMargin","Link","rel","target","NestedWrapper","GenericValue","getTextValue","Array","isArray","getArrayValue","parentId","currentValue","Value","shortenHash","TxDetailsMethodParam","ValueWrapper","MethodDetails","data","param","DelegateCallWarning","showWarning","MultiSendTxGroup","actionTitle","isDelegateCall","operation","Operation","DELEGATE","defaultExpanded","MultiSendDetails","valueDecoded","valuesDecoded","to","getInteractionTitle","addressInfo","addressInfoIndex","DetailsWithTxInfo","TxData","TxExpandedActions","getConfirmTooltipTitle","TxInfoSettings","handler","owner","oldOwner","newOwner","implementation","module","TxInfoTransfer","setDetails","toUpperCase","sender","recipient","StyledImg","TxOwners","isModuleExecutionInfo","confirmationsNeeded","CreationNode","signer","executor","TransactionListActive","TransactionListInactive","TxShareButton","safeTxHash","txDetailsPathname","generatePath","TRANSACTIONS_SINGULAR","SAFE_ADDRESS_SLUG","getPrefixedSafeAddressSlug","TRANSACTION_ID_SLUG","txDetailsLink","window","location","origin","PUBLIC_URL","textToCopy","TxInfoMultiSend","TxSummary","txHash","executedAt","created","submittedAt","trustedDelegateCallTarget","TxModuleInfo","NormalBreakingText","TxDataGroup","txNonce","isTxExecuted","href","TxDetails","loading","setTxDetails","getTransactionByAttribute","attributeValue","attributeName","useTransactionDetails","hasModule","isMultiSend","getModuleDetails","cn","TxInfoCreation","creator","factory","transactionHash","TxHistoryRow","TransitionProps","mountOnEnter","unmountOnExit","appear","isCreationTxInfo","HistoryTxList","lastTransactionsGroup","lastTransaction","txs","formatWithSchema","HistoryTransactions","NoTransactionsImage","usePagedQueuedTransactions","nextTxs","nextTransactions","queuedTxs","queuedTransactions","txsCount","setTxsCount","queued","getQueuedTxs","loadQueuedTransactions","addQueuedTransactions","_getChainId","queue","useQueueTransactions","nextPage","loadPagedQueuedTransactions","TxQueueCollapsed","calculateVotes","TxQueueRow","setTx","currTx","nonceNumber","marginTop","makeConfirmation","Record","signature","ApproveTxModal","isCancelTx","thresholdReached","isThresholdReached","modalInfo","description","getModalTitleAndDescription","t","List","EMPTY_DATA","baseGas","gasPrice","safeTxGas","gasToken","refundReceiver","CALL","stringify","url","useTxInfo","Modal","handleClose","TxModalWrapper","txConfirmations","txThreshold","txValue","onSubmit","txParameters","delayExecution","notifiedTransaction","TX_NOTIFICATION_TYPES","CONFIRMATION_TX","approveAndExecute","ethParameters","getState","TxSender","txId","txProps","navigateToTransactionsTab","valueInWei","prepare","logError","_815","shouldExecuteTransaction","safeInstance","getLastTransaction","isFinalization","preApprovingOwner","txArgs","from","sigs","generateSignaturesFromTxConfirmations","getPreValidatedSignatures","submitTx","ModalHeader","Hairline","Block","style","flexDirection","RejectTxModal","gwTransaction","useEstimateTransactionGas","txRecipient","gasCostFormatted","txEstimationExecutionStatus","isOffChainSignature","isCreation","gasLimit","gasPriceFormatted","canTxExecute","useCanTxExecute","confirmButtonStatus","ButtonStatus","READY","confirmButtonText","EstimationStatus","LOADING","EditableTxParameters","isExecution","ethGasLimit","ethGasPrice","safeNonce","parametersStatus","toggleEditMode","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","ReviewInfoText","Footer","withoutBorder","Buttons","cancelButtonProps","confirmButtonProps","createTransaction","CANCELLATION_TX","sendReplacementTransaction","ActionModal","useTransactionParameters","TreeView","firstElement","Disclaimer","QueueTransaction","QueueTxList","QueueTransactions","TxSingularDetails","useParams","fetchedTx","setFetchedTx","liveTx","setLiveTx","indexedTx","getTransactionWithLocationByAttribute","shallowEqual","isCurrent","getTransaction","fetchSafeTransaction","_614","txsRoute","TRANSACTIONS","extractPrefixedSafeAddress","listItemTx","makeTxFromDetails","payload","conflictType","isTxQueued","TxList","TRANSACTION_TABS","TRANSACTIONS_QUEUE","TRANSACTIONS_HISTORY","GatewayTransactions","useHistory","path","useRouteMatch","trackEvent","useAnalytics","SAFE_EVENTS","Col","start","items","selectedTab","exact"],"mappings":"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","file":"static/js/48.2539a10c.chunk.js","sourcesContent":["import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render(): React.ReactElement {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","import { FORM_ERROR, Mutator, SubmissionErrors } from 'final-form'\nimport createDecorator from 'final-form-calculate'\nimport { ContractSendMethod } from 'web3-eth-contract'\n\nimport { AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\nimport { getAddressFromDomain, getWeb3 } from 'src/logic/wallets/getWeb3'\nimport { TransactionReviewType } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/Review'\nimport { isValidCryptoDomainName, isValidEnsName } from 'src/logic/wallets/ethAddresses'\nimport { BigNumber } from 'bignumber.js'\n\nexport const NO_CONTRACT = 'no contract'\n\nexport const ensResolver = createDecorator({\n  field: 'contractAddress',\n  updates: {\n    contractAddress: async (contractAddress) => {\n      try {\n        const resolvedAddress =\n          (isValidEnsName(contractAddress) || isValidCryptoDomainName(contractAddress)) &&\n          (await getAddressFromDomain(contractAddress))\n\n        if (resolvedAddress) {\n          return resolvedAddress\n        }\n\n        return contractAddress\n      } catch (e) {\n        console.error(e.message)\n        return contractAddress\n      }\n    },\n  },\n})\n\nexport const formMutators: Record<string, Mutator<{ selectedMethod: { name: string } }>> = {\n  setMax: (args, state, utils) => {\n    utils.changeValue(state, 'value', () => args[0])\n  },\n  setContractAddress: (args, state, utils) => {\n    utils.changeValue(state, 'contractAddress', () => args[0])\n  },\n  setSelectedMethod: (args, state, utils) => {\n    const modified =\n      state.lastFormState?.values.selectedMethod && state.lastFormState.values.selectedMethod.name !== args[0].name\n\n    if (modified) {\n      utils.changeValue(state, 'callResults', () => '')\n      utils.changeValue(state, 'value', () => '')\n    }\n\n    utils.changeValue(state, 'selectedMethod', () => args[0])\n  },\n  setCallResults: (args, state, utils) => {\n    utils.changeValue(state, 'callResults', () => args[0])\n  },\n  setAbiValue: (args, state, utils) => {\n    utils.changeValue(state, 'abi', () => args[0])\n  },\n}\n\nexport const isAddress = (type: string): boolean => type.indexOf('address') === 0\nexport const isBoolean = (type: string): boolean => type.indexOf('bool') === 0\nexport const isString = (type: string): boolean => type.indexOf('string') === 0\nexport const isUint = (type: string): boolean => type.indexOf('uint') === 0\nexport const isInt = (type: string): boolean => type.indexOf('int') === 0\nexport const isByte = (type: string): boolean => type.indexOf('byte') === 0\n\nexport const isArrayParameter = (parameter: string): boolean => /(\\[\\d*])+$/.test(parameter)\nexport const getParsedJSONOrArrayFromString = (parameter: string): (string | number)[] | null => {\n  try {\n    const arrayResult = JSON.parse(parameter)\n    return arrayResult.map((value) => {\n      if (Number.isInteger(value)) {\n        return new BigNumber(value).toString()\n      }\n      return value\n    })\n  } catch (err) {\n    return null\n  }\n}\n\nexport const handleSubmitError = (error: SubmissionErrors, values: Record<string, string>): Record<string, string> => {\n  for (const key in values) {\n    if (values.hasOwnProperty(key) && error !== undefined && values[key] === error.value) {\n      return { [key]: error.reason }\n    }\n  }\n\n  // .call() failed and we're logging a generic error\n  return { [FORM_ERROR]: error ? error.message : undefined }\n}\n\nexport const generateFormFieldKey = (type: string, signatureHash: string, index: number): string => {\n  const keyType = isArrayParameter(type) ? 'arrayParam' : type\n  return `methodInput-${signatureHash}_${index}_${keyType}`\n}\n\nconst extractMethodArgs =\n  (signatureHash: string, values: Record<string, string>) =>\n  ({ type }, index) => {\n    const key = generateFormFieldKey(type, signatureHash, index)\n\n    return getParsedJSONOrArrayFromString(values[key]) || values[key]\n  }\n\nexport const createTxObject = (\n  method: AbiItemExtended,\n  contractAddress: string,\n  values: Record<string, string>,\n): ContractSendMethod => {\n  const web3 = getWeb3()\n  const contract = new web3.eth.Contract([method], contractAddress)\n  const { inputs, name = '', signatureHash } = method\n  const args = inputs?.map(extractMethodArgs(signatureHash, values)) || []\n\n  return contract.methods[name](...args)\n}\n\nexport const isReadMethod = (method: AbiItemExtended): boolean => method && method.action === 'read'\n\nexport const getValueFromTxInputs = (key: string, type: string, tx: TransactionReviewType): string => {\n  if (isArrayParameter(type)) {\n    key = key.replace('[]', '')\n  }\n\n  let value = tx[key]\n\n  if (type === 'bool') {\n    value = String(value)\n  }\n\n  return value\n}\n","import { RadioButtons, Text } from '@gnosis.pm/safe-react-components'\nimport { FormControlLabel, hexToRgb, Switch as SwitchMui } from '@material-ui/core'\nimport { ReactElement } from 'react'\nimport { useField } from 'react-final-form'\nimport styled from 'styled-components'\n\nimport { getChainName } from 'src/config'\nimport { Field } from 'src/routes/safe/components/Settings/SpendingLimit/FormFields/Amount'\n\n// TODO: propose refactor in safe-react-components based on this requirements\nconst SpendingLimitRadioButtons = styled(RadioButtons)`\n  & .MuiRadio-colorPrimary.Mui-checked {\n    color: ${({ theme }) => theme.colors.primary};\n  }\n`\n\n// TODO: add `name` and `value` to SRC Switch, as they're required for a better RFF integration\nconst StyledSwitch = styled(({ ...rest }) => <SwitchMui {...rest} />)`\n  && {\n    .MuiIconButton-label,\n    .MuiSwitch-colorSecondary {\n      color: ${({ theme }) => theme.colors.icon};\n    }\n\n    .MuiSwitch-colorSecondary.Mui-checked .MuiIconButton-label {\n      color: ${({ theme }) => theme.colors.primary};\n    }\n\n    .MuiSwitch-colorSecondary.Mui-checked:hover {\n      background-color: ${({ theme }) => hexToRgb(`${theme.colors.primary}03`)};\n    }\n\n    .Mui-checked + .MuiSwitch-track {\n      background-color: ${({ theme }) => theme.colors.primaryLight};\n    }\n  }\n`\n\ninterface RadioButtonOption {\n  label: string\n  value: string\n}\n\ninterface RadioButtonProps {\n  options: RadioButtonOption[]\n  initialValue: string\n  groupName: string\n}\n\nconst SafeRadioButtons = ({ options, initialValue, groupName }: RadioButtonProps): ReactElement => (\n  <Field name={groupName} initialValue={initialValue}>\n    {({ input: { name, value, onChange } }) => (\n      <SpendingLimitRadioButtons name={name} value={value || initialValue} onRadioChange={onChange} options={options} />\n    )}\n  </Field>\n)\n\nconst Switch = ({ label, name }: { label: string; name: string }): ReactElement => (\n  <FormControlLabel\n    label={label}\n    control={\n      <Field\n        name={name}\n        type=\"checkbox\"\n        render={({ input: { checked, onChange, name, value } }) => (\n          <StyledSwitch checked={checked} onChange={onChange} name={name} value={value} />\n        )}\n      />\n    }\n  />\n)\n\nconst ResetTimeLabel = styled.div`\n  grid-area: resetTimeLabel;\n`\n\nconst ResetTimeToggle = styled.div`\n  grid-area: resetTimeToggle;\n`\n\nconst ResetTimeOptions = styled.div`\n  grid-area: resetTimeOption;\n`\n\nconst RESET_TIME_OPTIONS = [\n  { label: '1 day', value: '1440' }, // 1 day x 24h x 60min\n  { label: '1 week', value: '10080' }, // 7 days x 24h x 60min\n  { label: '1 month', value: '43200' }, // 30 days x 24h x 60min\n]\n\nconst RINKEBY_RESET_TIME_OPTIONS = [\n  { label: '5 minutes', value: '5' },\n  { label: '30 minutes', value: '30' },\n  { label: '1 hour', value: '60' },\n]\n\nexport const getResetTimeOptions = (): RadioButtonOption[] => {\n  const currentNetwork = getChainName().toLowerCase()\n  return currentNetwork !== 'rinkeby' ? RESET_TIME_OPTIONS : RINKEBY_RESET_TIME_OPTIONS\n}\n\nconst ResetTime = (): ReactElement => {\n  const {\n    input: { value: withResetTime },\n  } = useField('withResetTime', { subscription: { value: true } })\n\n  const resetTimeOptions = getResetTimeOptions()\n\n  const switchExplanation = withResetTime ? 'choose reset time period' : 'one time'\n\n  return (\n    <>\n      <ResetTimeLabel>\n        <Text size=\"xl\">Set a reset time so the allowance automatically refills after the defined time period.</Text>\n      </ResetTimeLabel>\n      <ResetTimeToggle>\n        <Switch label={`Reset time (${switchExplanation})`} name=\"withResetTime\" />\n      </ResetTimeToggle>\n      {withResetTime && (\n        <ResetTimeOptions>\n          <SafeRadioButtons groupName=\"resetTime\" initialValue={resetTimeOptions[0].value} options={resetTimeOptions} />\n        </ResetTimeOptions>\n      )}\n    </>\n  )\n}\n\nexport default ResetTime\n","import { TextField as SRCTextField } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\nimport { useField } from 'react-final-form'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport GnoField from 'src/components/forms/Field'\nimport { composeValidators, minValue, mustBeFloat, required } from 'src/components/forms/validator'\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\nimport { useStyles } from 'src/routes/safe/components/Settings/SpendingLimit/style'\n\nexport const Field = styled(GnoField)`\n  margin: 8px 0;\n  width: 100%;\n`\n\nconst AmountInput = styled.div`\n  grid-area: amountInput;\n`\n\nconst TextField = styled(SRCTextField)`\n  margin: 0;\n`\n\nconst Amount = (): ReactElement => {\n  const classes = useStyles()\n\n  const {\n    input: { value: tokenAddress },\n  } = useField('token', { subscription: { value: true } })\n  const {\n    meta: { touched, visited },\n  } = useField('amount', { subscription: { touched: true, visited: true } })\n\n  const tokens = useSelector(extendedSafeTokensSelector)\n\n  const selectedTokenRecord = tokens.find((token) => token.address === tokenAddress)\n\n  const validate = (touched || visited) && composeValidators(required, mustBeFloat, minValue(0, false))\n\n  return (\n    <AmountInput>\n      <Field\n        component={TextField}\n        label=\"Amount*\"\n        name=\"amount\"\n        type=\"text\"\n        data-testid=\"amount-input\"\n        endAdornment={selectedTokenRecord?.symbol}\n        className={classes.amountInput}\n        validate={validate}\n      />\n    </AmountInput>\n  )\n}\n\nexport default Amount\n","import { createStyles, makeStyles } from '@material-ui/core'\nimport {\n  background,\n  boldFont,\n  border,\n  error,\n  fontColor,\n  lg,\n  md,\n  secondaryText,\n  sm,\n  smallFontSize,\n  xl,\n} from 'src/theme/variables'\n\nexport const useStyles = makeStyles(\n  createStyles({\n    title: {\n      padding: lg,\n      paddingBottom: 0,\n    },\n    hide: {\n      '&:hover': {\n        backgroundColor: '#f7f5f5',\n      },\n      '&:hover $actions': {\n        visibility: 'initial',\n      },\n    },\n    actions: {\n      justifyContent: 'flex-end',\n      visibility: 'hidden',\n    },\n    noBorderBottom: {\n      '& > td': {\n        borderBottom: 'none',\n      },\n    },\n    annotation: {\n      paddingLeft: lg,\n    },\n    ownersText: {\n      color: secondaryText,\n      '& b': {\n        color: fontColor,\n      },\n    },\n    container: {\n      padding: lg,\n    },\n    actionButton: {\n      fontWeight: boldFont,\n      marginRight: sm,\n    },\n    buttonRow: {\n      padding: lg,\n      left: 0,\n      bottom: 0,\n      boxSizing: 'border-box',\n      width: '100%',\n      justifyContent: 'flex-end',\n      borderTop: `2px solid ${border}`,\n    },\n    modifyBtn: {\n      height: xl,\n      fontSize: smallFontSize,\n    },\n    removeModuleIcon: {\n      marginLeft: lg,\n      cursor: 'pointer',\n    },\n    modalHeading: {\n      boxSizing: 'border-box',\n      justifyContent: 'space-between',\n      height: '74px',\n      padding: `${sm} ${lg}`,\n    },\n    modalContainer: {\n      minHeight: '369px',\n    },\n    modalManage: {\n      fontSize: lg,\n    },\n    modalClose: {\n      height: '35px',\n      width: '35px',\n    },\n    modalButtonRow: {\n      height: '84px',\n      justifyContent: 'center',\n    },\n    modalButtonRemove: {\n      color: '#fff',\n      backgroundColor: error,\n      height: '42px',\n    },\n    modalName: {\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n    },\n    modalUserName: {\n      whiteSpace: 'nowrap',\n    },\n    modalOwner: {\n      backgroundColor: background,\n      padding: md,\n      alignItems: 'center',\n    },\n    modalUser: {\n      justifyContent: 'left',\n    },\n    modalDescription: {\n      padding: md,\n    },\n    modalOpen: {\n      paddingLeft: sm,\n      width: 'auto',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n    amountInput: {\n      width: '100% !important',\n    },\n  }),\n)\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { getExplorerInfo } from 'src/config'\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\nimport { sameString } from 'src/utils/strings'\n\ninterface AddressInfoProps {\n  address: string\n  title?: string\n  name?: string\n  logoUri?: string\n}\n\nconst AddressInfo = ({ address, title, name, logoUri }: AddressInfoProps): ReactElement => {\n  const addessBookName = useSelector((state) => addressBookEntryName(state, { address }))\n\n  return (\n    <>\n      {title && (\n        <Text size=\"xl\" strong>\n          {title}\n        </Text>\n      )}\n      <PrefixedEthHashInfo\n        hash={address}\n        name={sameString(addessBookName, ADDRESS_BOOK_DEFAULT_NAME) ? name : addessBookName}\n        showCopyBtn\n        showAvatar\n        textSize=\"lg\"\n        explorerUrl={getExplorerInfo(address)}\n        customAvatar={logoUri || undefined}\n      />\n    </>\n  )\n}\n\nexport default AddressInfo\n","import { IconText, Text } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport Row from 'src/components/layout/Row'\n\ninterface ResetTimeInfoProps {\n  title?: string\n  label?: string\n}\n\nconst ResetTimeInfo = ({ title, label }: ResetTimeInfoProps): ReactElement => (\n  <>\n    <Text size=\"xl\" strong>\n      {title}\n    </Text>\n    {label ? (\n      <Row align=\"center\" margin=\"md\">\n        <IconText iconSize=\"md\" iconType=\"fuelIndicator\" text={label} textSize=\"lg\" />\n      </Row>\n    ) : (\n      <Row align=\"center\" margin=\"md\">\n        <Text size=\"lg\">One-time spending limit</Text>\n      </Row>\n    )}\n  </>\n)\n\nexport default ResetTimeInfo\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\nimport styled from 'styled-components'\n\nimport { Token } from 'src/logic/tokens/store/model/token'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\n\nconst StyledImage = styled.img`\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n  margin: 0 8px 0 0;\n`\nconst StyledImageName = styled.div`\n  display: flex;\n  align-items: center;\n`\n\ninterface TokenInfoProps {\n  amount: string\n  title?: string\n  token: Token\n}\n\nconst TokenInfo = ({ amount, title, token }: TokenInfoProps): ReactElement => (\n  <>\n    <Text size=\"xl\" strong>\n      {title}\n    </Text>\n    <StyledImageName>\n      <StyledImage alt={token.name} onError={setImageToPlaceholder} src={token.logoUri || ''} />\n      <Text size=\"lg\">\n        {amount} {token.symbol}\n      </Text>\n    </StyledImageName>\n  </>\n)\n\nexport default TokenInfo\n","import { useSelector } from 'react-redux'\n\nimport { Token } from 'src/logic/tokens/store/model/token'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { safeKnownCoins } from 'src/routes/safe/container/selector'\n\nconst useTokenInfo = (address: string): Token | undefined => {\n  const tokens = useSelector(safeKnownCoins)\n\n  if (tokens) {\n    return tokens.find((token) => sameAddress(token.address, address))\n  }\n}\n\nexport default useTokenInfo\n","export default __webpack_public_path__ + \"static/media/custom.6f7b401c.svg\";","import debounce from 'lodash/debounce'\nimport { useMemo, useEffect, useState, useRef } from 'react'\n\n/*\n  This code snippet is copied from https://github.com/gnbaron/use-lodash-debounce\n  with the sole intention to be able to tweak it if is needed and prevent from having\n  a new dependency for something relatively trivial\n*/\n\ninterface DebounceOptions {\n  leading: boolean\n  maxWait: number\n  trailing: boolean\n}\n\nexport const useDebounce = <T extends unknown>(value: T, delay = 0, options?: DebounceOptions): T => {\n  const previousValue = useRef(value)\n  const [current, setCurrent] = useState(value)\n  const debouncedCallback = useMemo(\n    () => debounce((val: T) => setCurrent(val), delay, options),\n    [setCurrent, delay, options],\n  )\n\n  useEffect(() => {\n    // does trigger the debounce timer initially\n    if (value !== previousValue.current) {\n      debouncedCallback(value)\n      previousValue.current = value\n      // cancel the debounced callback on clean up\n      return debouncedCallback.cancel\n    }\n  }, [debouncedCallback, value, previousValue])\n\n  return current\n}\n","import { useCallback, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loadPagedHistoryTransactions } from 'src/logic/safe/store/actions/transactions/fetchTransactions/loadGatewayTransactions'\nimport { addHistoryTransactions } from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { currentChainId } from 'src/logic/config/store/selectors'\nimport { useHistoryTransactions } from 'src/routes/safe/components/Transactions/TxList/hooks/useHistoryTransactions'\nimport { Errors } from 'src/logic/exceptions/CodedException'\nimport { Await } from 'src/types/helpers'\nimport { extractSafeAddress } from 'src/routes/routes'\n\ntype PagedTransactions = {\n  count: number\n  transactions: TransactionDetails['transactions']\n  hasMore: boolean\n  next: () => Promise<void>\n  isLoading: boolean\n}\n\nexport const usePagedHistoryTransactions = (): PagedTransactions => {\n  const { count, transactions } = useHistoryTransactions()\n  const chainId = useSelector(currentChainId)\n\n  const dispatch = useRef(useDispatch())\n  const safeAddress = useRef(extractSafeAddress())\n  const [hasMore, setHasMore] = useState(true)\n  const [isLoading, setIsLoading] = useState(false)\n\n  const next = useCallback(async () => {\n    setIsLoading(true)\n\n    let results: Await<ReturnType<typeof loadPagedHistoryTransactions>>\n    try {\n      results = await loadPagedHistoryTransactions(safeAddress.current)\n    } catch (e) {\n      // No next page\n      if (e.content !== Errors._608) {\n        e.log()\n      }\n    }\n\n    if (!results) {\n      setHasMore(false)\n      setIsLoading(false)\n      return\n    }\n\n    const { values, next } = results\n\n    if (next === null) {\n      setHasMore(false)\n    }\n\n    if (values) {\n      dispatch.current(addHistoryTransactions({ chainId, safeAddress: safeAddress.current, values }))\n    } else {\n      setHasMore(false)\n    }\n    setIsLoading(false)\n  }, [chainId])\n\n  return { count, transactions, hasMore, next, isLoading }\n}\n","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { historyTransactions } from 'src/logic/safe/store/selectors/gatewayTransactions'\n\nexport const useHistoryTransactions = (): TransactionDetails => {\n  const historyTxs = useSelector(historyTransactions)\n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    const history = historyTxs\n      ? Object.entries(historyTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\n      : 0\n    setCount(history)\n  }, [historyTxs])\n\n  return {\n    count,\n    transactions: historyTxs ? Object.entries(historyTxs) : [],\n  }\n}\n","import { Text, Accordion, AccordionDetails, AccordionSummary, EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport styled, { css } from 'styled-components'\nimport { isDeeplinkedTx } from './utils'\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nexport const ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  align-items: center;\n`\n\nexport const ColumnDisplayAccordionDetails = styled(AccordionDetails)`\n  flex-flow: column;\n`\n\nexport const NoPaddingAccordion = styled(Accordion).attrs((props) =>\n  isDeeplinkedTx() ? { expanded: true, ...props } : props,\n)`\n  &.MuiAccordion-root {\n    background-color: transparent;\n\n    .MuiAccordionDetails-root {\n      padding: 0;\n    }\n  }\n`\n\nexport const ActionAccordion = styled(Accordion)`\n  &.MuiAccordion-root {\n    &:first-child {\n      border-top: none;\n    }\n\n    &.Mui-expanded {\n      &:last-child {\n        border-bottom: none;\n      }\n    }\n\n    .MuiAccordionDetails-root {\n      padding: 16px;\n    }\n  }\n`\n\nexport const StyledTransactionsGroup = styled.div`\n  align-items: flex-start;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  margin: 16px 8px;\n  width: 98%;\n`\n\nexport const H2 = styled.h2`\n  text-transform: uppercase;\n  font-size: smaller;\n`\n\nexport const SubTitle = styled(Text)`\n  margin-bottom: 8px;\n\n  font-size: 0.76em;\n  font-weight: 600;\n  line-height: 1.5;\n  letter-spacing: 1px;\n  color: ${({ theme }) => theme.colors.placeHolder};\n  text-transform: uppercase;\n`\n\nexport const StyledTransactions = styled.div`\n  background-color: ${({ theme }) => theme.colors.white};\n  border-radius: 8px;\n  box-shadow: #00000026 0 4px 12px 0;\n  overflow: hidden;\n  width: 100%;\n\n  & > .MuiAccordion-root {\n    &:first-child {\n      border-top: none;\n    }\n\n    &:last-child {\n      border-bottom: none;\n    }\n\n    &:last-of-type {\n      div {\n        row-gap: 0px;\n      }\n    }\n  }\n`\n\nexport const GroupedTransactionsCard = styled(StyledTransactions)`\n  transition: all 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  background-color: transparent;\n  border-radius: 0;\n  box-shadow: none;\n\n  &:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n  }\n\n  .MuiAccordion-root,\n  .MuiAccordionSummary-root,\n  .MuiAccordionDetails-root {\n    background-color: transparent;\n\n    &:hover,\n    &.Mui-expanded {\n      background-color: transparent;\n    }\n  }\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    .MuiAccordionDetails-root {\n      div[class^='tx-'] {\n        background-color: ${({ theme }) => theme.colors.background};\n      }\n    }\n\n    .disclaimer-container {\n      background-color: ${({ theme }) => theme.colors.inputField};\n    }\n  }\n`\nconst gridColumns = {\n  nonce: '0.5fr',\n  type: '3fr',\n  info: '3fr',\n  time: '2.5fr',\n  votes: '1.5fr',\n  actions: '1fr',\n  status: '2.5fr',\n}\n\nconst willBeReplaced = css`\n  .will-be-replaced * {\n    color: gray !important;\n    text-decoration: line-through !important;\n    filter: grayscale(1) opacity(0.8) !important;\n  }\n`\n\nconst failedTransaction = css`\n  &.failed-transaction {\n    div[class^='tx-']:not(.tx-status):not(.tx-nonce) {\n      opacity: 0.5;\n    }\n  }\n`\n\nconst onChainRejection = css`\n  &.on-chain-rejection {\n    background-color: ${({ theme }) => theme.colors.errorTooltip};\n    border-left: 4px solid ${({ theme }) => theme.colors.error};\n    border-radius: 4px;\n    padding-left: 7px;\n    height: 22px;\n    max-width: 165px;\n\n    > div {\n      height: 17px;\n      align-items: center;\n      padding-top: 3px;\n    }\n\n    p {\n      font-size: 11px;\n      line-height: 16px;\n      letter-spacing: 1px;\n      font-weight: bold;\n      text-transform: uppercase;\n      margin-left: -2px;\n    }\n  }\n`\n\nexport const StyledTransaction = styled.div`\n  ${willBeReplaced};\n  ${failedTransaction};\n\n  display: grid;\n  grid-template-columns: ${Object.values(gridColumns).join(' ')};\n  width: 100%;\n\n  & > div {\n    align-self: center;\n  }\n\n  .tx-type {\n    ${onChainRejection};\n  }\n\n  .tx-votes {\n    justify-self: center;\n  }\n\n  .tx-actions {\n    visibility: hidden;\n    justify-self: end;\n  }\n\n  .tx-status {\n    justify-self: end;\n    margin-right: 8px;\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: center;\n    justify-content: end;\n\n    p {\n      margin-left: 8px;\n    }\n  }\n\n  &:hover {\n    .tx-actions {\n      visibility: visible;\n\n      &.will-be-replaced {\n        visibility: hidden;\n      }\n    }\n  }\n`\n\nexport const StyledGroupedTransactions = styled(StyledTransaction)`\n  // no \\`tx-nonce\\` column required\n  grid-template-columns: ${Object.values(gridColumns).slice(1).join(' ')};\n`\n\nexport const GroupedTransactions = styled(StyledTransaction)`\n  // add a bottom division line for all elements but the last\n  &:not(:last-of-type) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n  }\n\n  // builds the tree-view layout\n  .tree-lines {\n    height: 100%;\n    margin-left: 30px;\n    position: relative;\n    width: 30%;\n\n    // this is a special case, the first element in the list needs to have a block child component\n    // add tree lines line to the first item of the list\n    .first-node {\n      display: block;\n      position: absolute;\n      top: -16px;\n      width: 100%;\n\n      &::before {\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n        border-left: 2px solid ${({ theme }) => theme.colors.separator};\n        content: '';\n        height: 22px;\n        position: absolute;\n        top: 8px;\n        width: 100%;\n      }\n    }\n\n    // add tree lines to all elements of the list (except for the last one)\n    // :last-of-type won't work with classes selector (HTML elements only)\n    // as we need block-level elements, we're using paragraphs for .tree-lines and .first-node\n    // given that divs are already being used for the transaction row, and both (p and div) are siblings\n    &:not(:last-of-type) {\n      &::before {\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n        border-left: 2px solid ${({ theme }) => theme.colors.separator};\n        content: '';\n        height: 100%;\n        margin-top: 14px;\n        position: absolute;\n        width: 100%;\n      }\n    }\n  }\n\n  // overrides Accordion styles, as grouped txs behave differently\n  > .MuiAccordion-root {\n    transition: none;\n    border: 0;\n    grid-column-end: span 6;\n    grid-column-start: 2;\n\n    &:first-child {\n      border: 0;\n    }\n\n    &.Mui-expanded {\n      justify-self: center;\n      width: calc(100% - 32px);\n\n      &:not(:last-of-type) {\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n      }\n\n      &:not(:first-of-type) {\n        border-top: 2px solid ${({ theme }) => theme.colors.separator};\n        // if two consecutive accordions are expanded, borders will get duplicated\n        // this rule is to overlap them\n        margin-top: -2px;\n      }\n\n      > .MuiAccordionSummary-root {\n        padding: 0;\n      }\n    }\n  }\n}\n`\n\nexport const DisclaimerContainer = styled(StyledTransaction)`\n  background-color: ${({ theme }) => theme.colors.inputField} !important;\n  border-radius: 4px;\n  margin: 12px 8px 0 12px;\n  padding: 8px 12px;\n  width: calc(100% - 48px);\n\n  .nonce {\n    grid-column-start: 1;\n  }\n\n  .disclaimer {\n    grid-column-start: 2;\n    grid-column-end: span 6;\n  }\n`\n\nexport const TxDetailsContainer = styled.div<{ ownerRows?: number }>`\n  ${willBeReplaced};\n\n  background-color: ${({ theme }) => theme.colors.separator} !important;\n  column-gap: 2px;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-auto-rows: minmax(min-content, max-content);\n  grid-template-rows: [tx-summary] minmax(min-content, max-content) [tx-details] minmax(min-content, 1fr);\n  row-gap: 2px;\n  width: 100%;\n\n  & > div {\n    background-color: ${({ theme }) => theme.colors.white};\n    line-break: anywhere;\n    overflow: hidden;\n    padding: 20px 24px;\n    word-break: break-all;\n  }\n\n  .tx-summary {\n  }\n\n  .tx-share {\n    float: right;\n  }\n\n  .tx-details {\n    &.not-executed {\n      grid-row-end: span 2;\n    }\n\n    &.no-padding {\n      padding: 0;\n    }\n  }\n\n  .tx-owners {\n    padding: 24px;\n    grid-column-start: 2;\n    grid-row-end: span ${({ ownerRows }) => ownerRows || 2};\n    grid-row-start: 1;\n  }\n\n  .tx-details-actions {\n    align-items: center;\n    display: flex;\n    height: 60px;\n    justify-content: center;\n\n    button {\n      color: ${({ theme }) => theme.colors.white};\n      margin: 0 8px;\n\n      &:hover {\n        color: ${({ theme }) => theme.colors.white};\n      }\n\n      &.error {\n        background-color: ${({ theme }) => theme.colors.error};\n\n        &:hover {\n          background-color: ${({ theme }) => theme.colors.errorHover};\n        }\n      }\n\n      &.primary {\n        background-color: ${({ theme }) => theme.colors.primary};\n\n        &:hover {\n          background-color: ${({ theme }) => theme.colors.secondary};\n        }\n      }\n    }\n  }\n`\n\nexport const OwnerList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding-left: 6px;\n\n  .legend {\n    left: 15px;\n    padding-bottom: 0.86em;\n    position: relative;\n    top: -3px;\n\n    .owner-info {\n      margin: 5px;\n    }\n\n    span::first-of-type {\n      color: #008c73;\n      font-weight: bold;\n    }\n  }\n\n  ul {\n    margin-top: 0;\n  }\n\n  .icon {\n    left: -7px;\n    position: absolute;\n    width: 16px;\n    z-index: 2;\n  }\n`\n\nexport const OwnerListItem = styled.li`\n  display: flex;\n  position: relative;\n\n  &::before {\n    border-left: 2px ${({ theme }) => theme.colors.icon} solid;\n    border-radius: 1px;\n    content: '';\n    height: calc(100% - 16px);\n    top: 16px;\n    left: 0;\n    position: absolute;\n    z-index: 1;\n  }\n\n  &:last-child::before {\n    border-left: none;\n  }\n`\n\nexport const InlineEthHashInfo = styled(EthHashInfo)`\n  display: inline-flex;\n\n  span {\n    font-weight: normal;\n  }\n`\n\nexport const StyledScrollableBar = styled.div`\n  &::-webkit-scrollbar {\n    width: 0.7em;\n    scroll-behavior: smooth;\n  }\n\n  &::-webkit-scrollbar-track {\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n    border-radius: 20px;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: darkgrey;\n    outline: 1px solid #dadada;\n    border-radius: 20px;\n  }\n\n  // firefox experimental\n  scrollbar-color: darkgrey #dadada;\n  scrollbar-width: thin;\n`\n\nexport const ScrollableTransactionsContainer = styled(StyledScrollableBar)`\n  height: calc(100vh - 170px);\n  overflow-x: hidden;\n  overflow-y: auto;\n  width: 100%;\n`\nexport const Centered = styled.div<{ padding?: number }>`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  padding: ${({ padding }) => `${padding}px`};\n  justify-content: center;\n  align-items: center;\n`\n\nexport const HorizontallyCentered = styled(Centered)<{ isVisible: boolean }>`\n  display: ${({ isVisible }) => (isVisible ? 'flex' : 'none')};\n  height: 100px;\n`\n\nexport const StyledAccordionSummary = styled(AccordionSummary).attrs((props) =>\n  isDeeplinkedTx() ? { expandIcon: null, ...props } : props,\n)`\n  height: 52px;\n  .tx-nonce {\n    margin: 0 16px 0 8px;\n  }\n`\nexport const AlignItemsWithMargin = styled.div`\n  display: flex;\n  align-items: center;\n\n  span:first-child {\n    margin-right: 6px;\n  }\n`\nexport const NoTransactions = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 60px;\n`\n","import { createContext, forwardRef, MutableRefObject, ReactElement, ReactNode, useEffect, useState } from 'react'\nimport { InViewHookResponse, useInView } from 'react-intersection-observer'\n\nexport const INFINITE_SCROLL_CONTAINER = 'infinite-scroll-container'\n\nexport const InfiniteScrollContext = createContext<{\n  ref: MutableRefObject<HTMLDivElement | null> | ((instance: HTMLDivElement | null) => void) | null\n  lastItemId?: string\n  setLastItemId: (itemId?: string) => void\n}>({ setLastItemId: () => {}, ref: null })\n\nexport const InfiniteScrollProvider = forwardRef<HTMLDivElement, { children: ReactNode }>(\n  ({ children }, ref): ReactElement => {\n    const [lastItemId, _setLastItemId] = useState<string>()\n\n    const setLastItemId = (itemId?: string) => {\n      setTimeout(() => _setLastItemId(itemId), 0)\n    }\n\n    return (\n      <InfiniteScrollContext.Provider value={{ ref, lastItemId, setLastItemId }}>\n        {children}\n      </InfiniteScrollContext.Provider>\n    )\n  },\n)\n\nInfiniteScrollProvider.displayName = 'InfiniteScrollProvider'\n\ntype InfiniteScrollProps = {\n  children: ReactNode\n  hasMore: boolean\n  next: () => Promise<void>\n  config?: InViewHookResponse\n}\n\nexport const InfiniteScroll = ({ children, hasMore, next, config }: InfiniteScrollProps): ReactElement => {\n  const { ref, inView } = useInView({\n    threshold: 0,\n    root: document.querySelector(`#${INFINITE_SCROLL_CONTAINER}`),\n    rootMargin: '0px 0px 200px 0px',\n    triggerOnce: true,\n    ...config,\n  })\n\n  useEffect(() => {\n    // Avoid memory leak - queue/history have separate InfiniteScroll wrappers\n    let isMounted = true\n\n    if (isMounted && inView && hasMore) {\n      next()\n    }\n\n    return () => {\n      isMounted = false\n    }\n  }, [inView, hasMore, next])\n\n  return <InfiniteScrollProvider ref={ref}>{children}</InfiniteScrollProvider>\n}\n","import { Loader } from '@gnosis.pm/safe-react-components'\nimport { ReactElement, ReactNode } from 'react'\n\nimport { INFINITE_SCROLL_CONTAINER, InfiniteScroll } from 'src/components/InfiniteScroll'\nimport { HorizontallyCentered, ScrollableTransactionsContainer } from './styled'\n\ntype TxsInfiniteScrollProps = {\n  children: ReactNode\n  next: () => Promise<void>\n  hasMore: boolean\n  isLoading: boolean\n}\n\nexport const TxsInfiniteScroll = ({ children, next, hasMore, isLoading }: TxsInfiniteScrollProps): ReactElement => {\n  return (\n    <InfiniteScroll next={next} hasMore={hasMore}>\n      <ScrollableTransactionsContainer id={INFINITE_SCROLL_CONTAINER}>\n        {children}\n        <HorizontallyCentered isVisible={isLoading}>\n          <Loader size=\"md\" />\n        </HorizontallyCentered>\n      </ScrollableTransactionsContainer>\n    </InfiniteScroll>\n  )\n}\n\nexport { InfiniteScrollContext as TxsInfiniteScrollContext } from 'src/components/InfiniteScroll'\n","import { Custom, SettingsChange, TransactionInfo, Transfer, TokenType } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useEffect, useState } from 'react'\n\nimport { getNativeCurrency } from 'src/config'\nimport { isCustomTxInfo, isSettingsChangeTxInfo, isTransferTxInfo } from 'src/logic/safe/store/models/types/gateway.d'\nimport { getTokenIdLabel, getTxAmount, NOT_AVAILABLE } from 'src/routes/safe/components/Transactions/TxList/utils'\n\nexport type TokenTransferAsset = {\n  type: 'Transfer'\n  name: string\n  logoUri: string\n  directionSign: '+' | '-' | ''\n  amountWithSymbol: string\n  tokenType: string\n}\n\nexport type AssetInfo = TokenTransferAsset | SettingsChange | Custom\n\nexport const isTokenTransferAsset = (value: AssetInfo): value is TokenTransferAsset => {\n  return value.type === 'Transfer'\n}\n\nconst defaultTokenTransferAsset: TokenTransferAsset = {\n  type: 'Transfer',\n  name: NOT_AVAILABLE,\n  logoUri: NOT_AVAILABLE,\n  directionSign: '',\n  amountWithSymbol: NOT_AVAILABLE,\n  tokenType: 'UNKNOWN',\n}\n\nexport const useAssetInfo = (txInfo: TransactionInfo): AssetInfo | undefined => {\n  const [asset, setAsset] = useState<AssetInfo>()\n  const amountWithSymbol = getTxAmount(txInfo)\n\n  useEffect(() => {\n    if (isTransferTxInfo(txInfo)) {\n      const { direction, transferInfo } = txInfo as Transfer\n      const directionSign = direction === 'INCOMING' ? '+' : '-'\n\n      switch (transferInfo.type) {\n        case TokenType.ERC20: {\n          setAsset({\n            type: 'Transfer',\n            name: transferInfo.tokenName ?? defaultTokenTransferAsset.name,\n            logoUri: transferInfo.logoUri ?? defaultTokenTransferAsset.logoUri,\n            directionSign,\n            amountWithSymbol,\n            tokenType: transferInfo.type,\n          })\n          break\n        }\n        case TokenType.ERC721: {\n          setAsset({\n            type: 'Transfer',\n            name: `${transferInfo.tokenName ?? defaultTokenTransferAsset.name} ${getTokenIdLabel(transferInfo)}`,\n            logoUri: transferInfo.logoUri ?? defaultTokenTransferAsset.logoUri,\n            directionSign: directionSign,\n            amountWithSymbol,\n            tokenType: transferInfo.type,\n          })\n          break\n        }\n        case TokenType.NATIVE_COIN: {\n          const nativeCurrency = getNativeCurrency()\n\n          setAsset({\n            type: 'Transfer',\n            name: nativeCurrency.name ?? defaultTokenTransferAsset.name,\n            logoUri: nativeCurrency.logoUri ?? defaultTokenTransferAsset.logoUri,\n            directionSign: directionSign,\n            amountWithSymbol,\n            tokenType: transferInfo.type,\n          })\n          break\n        }\n      }\n      return\n    }\n\n    if (isSettingsChangeTxInfo(txInfo)) {\n      setAsset(txInfo as SettingsChange)\n      return\n    }\n\n    if (isCustomTxInfo(txInfo)) {\n      setAsset(txInfo as Custom)\n    }\n  }, [txInfo, amountWithSymbol])\n\n  return asset\n}\n","import { useSelector } from 'react-redux'\nimport { TransactionStatus } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { AppReduxState } from 'src/store'\nimport { selectTxStatus } from 'src/logic/safe/store/selectors/pendingTransactions'\nimport { useState } from 'react'\nimport { useDebounce } from './useDebounce'\n\n// Takes into account whether a transaction is pending or not\nconst useTxStatus = (transaction: Transaction): TransactionStatus => {\n  const storedStatus = useSelector((state: AppReduxState) => selectTxStatus(state, transaction))\n  const [localStatus, setLocalStatus] = useState(storedStatus)\n\n  useDebounce(() => {\n    if (storedStatus) {\n      setLocalStatus(storedStatus)\n    }\n  }, 100)\n\n  return localStatus\n}\n\nexport default useTxStatus\n","import { ThemeColors } from '@gnosis.pm/safe-react-components/dist/theme'\nimport { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport useTxStatus from 'src/logic/hooks/useTxStatus'\n\nimport { LocalTransactionStatus, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { addressInList } from 'src/routes/safe/components/Transactions/TxList/utils'\n\nexport type TransactionStatusProps = {\n  color: ThemeColors\n  text: string\n}\n\nexport const useTransactionStatus = (transaction: Transaction): TransactionStatusProps => {\n  const currentUser = useSelector(userAccountSelector)\n  const [status, setStatus] = useState<TransactionStatusProps>({ color: 'primary', text: '' })\n  const txStatus = useTxStatus(transaction)\n  const { executionInfo } = transaction\n\n  useEffect(() => {\n    switch (txStatus) {\n      case LocalTransactionStatus.SUCCESS:\n        setStatus({ color: 'primary', text: 'Success' })\n        break\n      case LocalTransactionStatus.FAILED:\n        setStatus({ color: 'error', text: 'Failed' })\n        break\n      case LocalTransactionStatus.CANCELLED:\n        setStatus({ color: 'error', text: 'Cancelled' })\n        break\n      case LocalTransactionStatus.WILL_BE_REPLACED:\n        setStatus({ color: 'placeHolder', text: 'Transaction will be replaced' })\n        break\n      case LocalTransactionStatus.AWAITING_CONFIRMATIONS:\n        const signaturePending = addressInList((executionInfo as MultisigExecutionInfo)?.missingSigners ?? undefined)\n        const text = signaturePending(currentUser) ? 'Needs your confirmation' : 'Needs confirmations'\n        setStatus({ color: 'rinkeby', text })\n        break\n      case LocalTransactionStatus.AWAITING_EXECUTION:\n        setStatus({ color: 'rinkeby', text: 'Needs execution' })\n        break\n      case LocalTransactionStatus.PENDING:\n        setStatus({ color: 'rinkeby', text: 'Pending' })\n        break\n    }\n  }, [setStatus, txStatus, currentUser, executionInfo])\n\n  return status\n}\n","export default __webpack_public_path__ + \"static/media/circle-cross-red.c9afa2b3.svg\";","export default __webpack_public_path__ + \"static/media/incoming.1bf5be26.svg\";","export default __webpack_public_path__ + \"static/media/outgoing.d744cc02.svg\";","export default __webpack_public_path__ + \"static/media/settings.0fea6f0c.svg\";","import { useSelector } from 'react-redux'\n\nimport { sameString } from 'src/utils/strings'\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\nimport { AddressEx } from '@gnosis.pm/safe-react-gateway-sdk'\n\nconst DEFAULT_PROPS: AddressEx = {\n  value: '',\n  name: null,\n  logoUri: null,\n}\nexport const useKnownAddress = (props: AddressEx | null = DEFAULT_PROPS): AddressEx & { isInAddressBook: boolean } => {\n  const recipientName = useSelector((state) => addressBookEntryName(state, { address: props?.value || '' }))\n\n  // Undefined known address\n  if (!props) {\n    return {\n      ...DEFAULT_PROPS,\n      isInAddressBook: false,\n    }\n  }\n\n  // We have to check that the name returned is not UNKNOWN\n  const isInAddressBook = !sameString(recipientName, ADDRESS_BOOK_DEFAULT_NAME)\n  const name = isInAddressBook && recipientName ? recipientName : props?.name\n\n  return {\n    ...props,\n    name,\n    isInAddressBook,\n  }\n}\n","import { useEffect, useState } from 'react'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport CustomTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/custom.svg'\nimport CircleCrossRed from 'src/routes/safe/components/Transactions/TxList/assets/circle-cross-red.svg'\nimport IncomingTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/incoming.svg'\nimport OutgoingTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/outgoing.svg'\nimport SettingsTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/settings.svg'\nimport { getTxTo } from 'src/routes/safe/components/Transactions/TxList/utils'\nimport { useKnownAddress } from './useKnownAddress'\nimport { extractSafeAddress } from 'src/routes/routes'\n\nexport type TxTypeProps = {\n  icon?: string\n  fallbackIcon?: string\n  text?: string\n}\n\nexport const useTransactionType = (tx: Transaction): TxTypeProps => {\n  const [type, setType] = useState<TxTypeProps>({ icon: CustomTxIcon, text: 'Contract interaction' })\n  const safeAddress = extractSafeAddress()\n  const toAddress = getTxTo(tx)\n  const knownAddressBookAddress = useKnownAddress(toAddress)\n\n  useEffect(() => {\n    switch (tx.txInfo.type) {\n      case 'Creation': {\n        setType({ icon: toAddress?.logoUri || SettingsTxIcon, text: 'Safe created' })\n        break\n      }\n      case 'Transfer': {\n        const isSendTx = tx.txInfo.direction === 'OUTGOING'\n\n        setType({\n          icon: isSendTx ? OutgoingTxIcon : IncomingTxIcon,\n          text: isSendTx ? 'Send' : 'Receive',\n        })\n        break\n      }\n      case 'SettingsChange': {\n        setType({ icon: SettingsTxIcon, text: tx.txInfo.dataDecoded.method })\n        break\n      }\n      case 'Custom': {\n        // TODO: is this the only way to identify a 'module' transaction?\n        if (!tx.executionInfo) {\n          setType({ icon: SettingsTxIcon, text: 'Module' })\n          break\n        }\n\n        if (tx.txInfo.isCancellation) {\n          setType({ icon: CircleCrossRed, text: 'On-chain rejection' })\n          break\n        }\n\n        if (tx.safeAppInfo) {\n          setType({ icon: tx.safeAppInfo.logoUri, text: tx.safeAppInfo.name })\n          break\n        }\n\n        setType({\n          icon: knownAddressBookAddress.isInAddressBook\n            ? CustomTxIcon\n            : knownAddressBookAddress.logoUri || toAddress?.logoUri || CustomTxIcon,\n          fallbackIcon: knownAddressBookAddress.isInAddressBook ? undefined : CustomTxIcon,\n          text: knownAddressBookAddress.name || toAddress?.name || 'Contract interaction',\n        })\n        break\n      }\n    }\n  }, [\n    tx,\n    safeAddress,\n    knownAddressBookAddress.name,\n    knownAddressBookAddress.logoUri,\n    knownAddressBookAddress.isInAddressBook,\n    toAddress?.logoUri,\n    toAddress?.name,\n  ])\n\n  return type\n}\n","import { ReactElement } from 'react'\nimport PrefixedEthHashInfo from '../PrefixedEthHashInfo'\n\ntype Props = {\n  address: string\n  iconUrl?: string\n  iconUrlFallback?: string\n  text?: string\n}\n\nexport const CustomIconText = ({ address, iconUrl, text, iconUrlFallback }: Props): ReactElement => (\n  <PrefixedEthHashInfo\n    hash={address}\n    showHash={false}\n    avatarSize=\"sm\"\n    showAvatar\n    customAvatar={iconUrl || undefined}\n    customAvatarFallback={iconUrlFallback}\n    name={text}\n    textSize=\"xl\"\n  />\n)\n","import { createContext, ReactElement, ReactNode, useState } from 'react'\nimport { TxLocation } from 'src/logic/safe/store/models/types/gateway.d'\n\nexport type TxLocationProps = {\n  txLocation: TxLocation\n  setTxLocation?: (txLocation: TxLocation) => void\n}\n\nexport const TxLocationContext = createContext<TxLocationProps>({\n  txLocation: 'history',\n  setTxLocation: () => {},\n})\n\nexport const TxLocationProvider = ({ children }: { children: ReactNode }): ReactElement => {\n  const [txLocation, setTxLocation] = useState<TxLocation>('history')\n\n  return <TxLocationContext.Provider value={{ txLocation, setTxLocation }}>{children}</TxLocationContext.Provider>\n}\n","import { createContext, ReactElement, ReactNode, useCallback, useRef, useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { fetchTransactionDetails } from 'src/logic/safe/store/actions/fetchTransactionDetails'\n\nexport type ActionType = 'cancel' | 'confirm' | 'execute' | 'none'\n\nexport type SelectedAction = {\n  selectedAction: {\n    actionSelected: ActionType\n    transactionId: string\n  }\n  selectAction: (args: SelectedAction['selectedAction']) => void\n}\n\nexport const TransactionActionStateContext = createContext<SelectedAction>({\n  selectedAction: {\n    actionSelected: 'none',\n    transactionId: '',\n  },\n  selectAction: () => {},\n})\n\nexport const TxActionProvider = ({ children }: { children: ReactNode }): ReactElement => {\n  const dispatch = useRef(useDispatch())\n  const [selectedAction, setSelectedAction] = useState<SelectedAction['selectedAction']>({\n    actionSelected: 'none',\n    transactionId: '',\n  })\n\n  const selectAction = useCallback(({ actionSelected, transactionId }: SelectedAction['selectedAction']) => {\n    if (transactionId) {\n      dispatch.current(fetchTransactionDetails({ transactionId }))\n    }\n\n    setSelectedAction({ actionSelected, transactionId })\n  }, [])\n\n  return (\n    <TransactionActionStateContext.Provider value={{ selectedAction, selectAction }}>\n      {children}\n    </TransactionActionStateContext.Provider>\n  )\n}\n","import { createContext, ReactElement, ReactNode, useState } from 'react'\n\nexport const TxHoverContext = createContext<{\n  activeHover?: string\n  setActiveHover: (activeHover?: string) => void\n}>({\n  activeHover: undefined,\n  setActiveHover: () => {},\n})\n\nexport const TxHoverProvider = ({ children }: { children: ReactNode }): ReactElement => {\n  const [activeHover, setActiveHover] = useState<string | undefined>()\n\n  return <TxHoverContext.Provider value={{ activeHover, setActiveHover }}>{children}</TxHoverContext.Provider>\n}\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { MouseEvent as ReactMouseEvent, useCallback, useContext, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n  isMultiSigExecutionDetails,\n  LocalTransactionStatus,\n  Transaction,\n} from 'src/logic/safe/store/models/types/gateway.d'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { addressInList } from 'src/routes/safe/components/Transactions/TxList/utils'\nimport { useTransactionActions } from './useTransactionActions'\nimport { TransactionActionStateContext } from 'src/routes/safe/components/Transactions/TxList/TxActionProvider'\nimport { TxHoverContext } from 'src/routes/safe/components/Transactions/TxList/TxHoverProvider'\nimport { TxLocationContext } from 'src/routes/safe/components/Transactions/TxList/TxLocationProvider'\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\nimport { NOTIFICATIONS } from 'src/logic/notifications'\nimport useTxStatus from 'src/logic/hooks/useTxStatus'\n\ntype ActionButtonsHandlers = {\n  canCancel: boolean\n  handleConfirmButtonClick: (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void\n  handleCancelButtonClick: (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void\n  handleOnMouseEnter: () => void\n  handleOnMouseLeave: () => void\n  isPending: boolean\n  disabledActions: boolean\n}\n\nexport const useActionButtonsHandlers = (transaction: Transaction): ActionButtonsHandlers => {\n  const currentUser = useSelector(userAccountSelector)\n  const actionContext = useRef(useContext(TransactionActionStateContext))\n  const hoverContext = useRef(useContext(TxHoverContext))\n  const locationContext = useContext(TxLocationContext)\n  const dispatch = useDispatch()\n  const { canCancel, canConfirmThenExecute, canExecute } = useTransactionActions(transaction)\n  const txStatus = useTxStatus(transaction)\n  const isPending = txStatus === LocalTransactionStatus.PENDING\n\n  const handleConfirmButtonClick = useCallback(\n    (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n      event.stopPropagation()\n      if (transaction.txDetails && isMultiSigExecutionDetails(transaction.txDetails.detailedExecutionInfo)) {\n        const details = transaction.txDetails.detailedExecutionInfo\n        if (\n          (canExecute && details.confirmationsRequired > details.confirmations.length) ||\n          (canConfirmThenExecute && details.confirmationsRequired - 1 > details.confirmations.length)\n        ) {\n          dispatch(enqueueSnackbar(NOTIFICATIONS.TX_FETCH_SIGNATURES_ERROR_MSG))\n          return\n        }\n      }\n      actionContext.current.selectAction({\n        actionSelected: canExecute || canConfirmThenExecute ? 'execute' : 'confirm',\n        transactionId: transaction.id,\n      })\n    },\n    [canConfirmThenExecute, canExecute, dispatch, transaction.id, transaction.txDetails],\n  )\n\n  const handleCancelButtonClick = useCallback(\n    (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n      event.stopPropagation()\n      actionContext.current.selectAction({\n        actionSelected: 'cancel',\n        transactionId: transaction.id,\n      })\n    },\n    [transaction.id],\n  )\n\n  const handleOnMouseEnter = useCallback(() => {\n    if (canExecute) {\n      hoverContext.current.setActiveHover(transaction.id)\n    }\n  }, [canExecute, transaction.id])\n\n  const handleOnMouseLeave = useCallback(() => {\n    hoverContext.current.setActiveHover()\n  }, [])\n\n  const signaturePending = addressInList(\n    (transaction.executionInfo as MultisigExecutionInfo)?.missingSigners ?? undefined,\n  )\n\n  const disabledActions =\n    !currentUser ||\n    isPending ||\n    (txStatus === LocalTransactionStatus.AWAITING_EXECUTION && locationContext.txLocation === 'queued.queued') ||\n    (txStatus === LocalTransactionStatus.AWAITING_CONFIRMATIONS && !signaturePending(currentUser))\n\n  return {\n    canCancel,\n    handleConfirmButtonClick,\n    handleCancelButtonClick,\n    handleOnMouseEnter,\n    handleOnMouseLeave,\n    isPending,\n    disabledActions,\n  }\n}\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useContext, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { isCustomTxInfo, isMultisigExecutionInfo, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { getTransactionsByNonce } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { shouldSwitchWalletChain, userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\nimport { AppReduxState } from 'src/store'\nimport { TxLocationContext } from '../TxLocationProvider'\n\nexport const isThresholdReached = (executionInfo: MultisigExecutionInfo): boolean => {\n  const { confirmationsSubmitted, confirmationsRequired } = executionInfo\n  return confirmationsSubmitted >= confirmationsRequired\n}\n\nexport type TransactionActions = {\n  canConfirm: boolean\n  canConfirmThenExecute: boolean\n  canExecute: boolean\n  canCancel: boolean\n  isUserAnOwner: boolean\n}\n\nexport const useTransactionActions = (transaction: Transaction): TransactionActions => {\n  const currentUser = useSelector(userAccountSelector)\n  const safeAddress = extractSafeAddress()\n  const isUserAnOwner = useSelector(grantedSelector)\n  const isWrongChain = useSelector(shouldSwitchWalletChain)\n  const { txLocation } = useContext(TxLocationContext)\n  const transactionsByNonce = useSelector((state: AppReduxState) =>\n    getTransactionsByNonce(state, (transaction.executionInfo as MultisigExecutionInfo)?.nonce ?? -1),\n  )\n  const canCancel =\n    !transactionsByNonce.some(({ txInfo }) => isCustomTxInfo(txInfo) && txInfo.isCancellation) &&\n    isUserAnOwner &&\n    !isWrongChain\n\n  const [state, setState] = useState<TransactionActions>({\n    canConfirm: false,\n    canConfirmThenExecute: false,\n    canExecute: false,\n    canCancel: false,\n    isUserAnOwner,\n  })\n\n  useEffect(() => {\n    if (\n      !!currentUser &&\n      txLocation !== 'history' &&\n      isMultisigExecutionInfo(transaction.executionInfo) &&\n      transaction.executionInfo\n    ) {\n      const { missingSigners, confirmationsSubmitted = 0, confirmationsRequired = 0 } = transaction.executionInfo || {}\n\n      const currentUserSigned = !missingSigners?.some((missingSigner) => sameAddress(missingSigner.value, currentUser))\n      const oneToGo = confirmationsSubmitted === confirmationsRequired - 1\n      const canConfirm =\n        ['queued.next', 'queued.queued'].includes(txLocation) && !currentUserSigned && isUserAnOwner && !isWrongChain\n      const thresholdReached = confirmationsSubmitted >= confirmationsRequired\n\n      setState({\n        canConfirm,\n        canConfirmThenExecute: txLocation === 'queued.next' && canConfirm && oneToGo,\n        canExecute: txLocation === 'queued.next' && thresholdReached && !!currentUser && !isWrongChain,\n        canCancel,\n        isUserAnOwner,\n      })\n    } else {\n      setState((prev) => ({ ...prev, isUserAnOwner }))\n    }\n  }, [currentUser, isUserAnOwner, safeAddress, transaction, txLocation, canCancel, isWrongChain])\n\n  return state\n}\n","import { Icon, Tooltip } from '@gnosis.pm/safe-react-components'\nimport { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { default as MuiIconButton } from '@material-ui/core/IconButton'\nimport { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { currentSafeNonce } from 'src/logic/safe/store/selectors'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useActionButtonsHandlers } from './hooks/useActionButtonsHandlers'\nimport useTxStatus from 'src/logic/hooks/useTxStatus'\nimport { isAwaitingExecution } from './utils'\n\nconst IconButton = styled(MuiIconButton)`\n  padding: 8px !important;\n\n  &.Mui-disabled {\n    opacity: 0.4;\n  }\n`\n\ntype TxCollapsedActionsProps = {\n  transaction: Transaction\n}\n\nexport const TxCollapsedActions = ({ transaction }: TxCollapsedActionsProps): ReactElement => {\n  const {\n    canCancel,\n    handleConfirmButtonClick,\n    handleCancelButtonClick,\n    handleOnMouseEnter,\n    handleOnMouseLeave,\n    isPending,\n    disabledActions,\n  } = useActionButtonsHandlers(transaction)\n  const nonce = useSelector(currentSafeNonce)\n  const txStatus = useTxStatus(transaction)\n  const isAwaitingEx = isAwaitingExecution(txStatus)\n\n  const getTitle = () => {\n    if (isAwaitingEx) {\n      return (transaction.executionInfo as MultisigExecutionInfo)?.nonce === nonce\n        ? 'Execute'\n        : `Transaction with nonce ${nonce} needs to be executed first`\n    }\n    return 'Confirm'\n  }\n\n  return (\n    <>\n      <Tooltip title={getTitle()} placement=\"top\">\n        <span>\n          <IconButton\n            size=\"small\"\n            type=\"button\"\n            onClick={handleConfirmButtonClick}\n            disabled={disabledActions}\n            onMouseEnter={handleOnMouseEnter}\n            onMouseLeave={handleOnMouseLeave}\n          >\n            <Icon type={isAwaitingEx ? 'rocket' : 'check'} color=\"primary\" size=\"sm\" />\n          </IconButton>\n        </span>\n      </Tooltip>\n      {canCancel && (\n        <Tooltip title=\"Reject\" placement=\"top\">\n          <span>\n            <IconButton size=\"small\" type=\"button\" onClick={handleCancelButtonClick} disabled={isPending}>\n              <Icon type=\"circleCross\" color=\"error\" size=\"sm\" />\n            </IconButton>\n          </span>\n        </Tooltip>\n      )}\n    </>\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { TokenType } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\nimport styled from 'styled-components'\n\nimport Img from 'src/components/layout/Img'\nimport NFTIcon from 'src/routes/safe/components/Balances/assets/nft_icon.png'\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\nimport { TokenTransferAsset } from './hooks/useAssetInfo'\n\nconst Amount = styled(Text)`\n  margin-left: 10px;\n  line-height: 16px;\n  max-width: 200px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\nconst AmountWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport type TokenTransferAmountProps = {\n  assetInfo: TokenTransferAsset\n}\n\nexport const TokenTransferAmount = ({ assetInfo }: TokenTransferAmountProps): ReactElement => {\n  return (\n    <AmountWrapper>\n      <Img\n        alt={assetInfo.name}\n        height={26}\n        onError={(error) => {\n          error.currentTarget.onerror = null\n          error.currentTarget.src = assetInfo.tokenType === TokenType.ERC721 ? NFTIcon : TokenPlaceholder\n        }}\n        src={assetInfo.logoUri}\n      />\n      <Amount size=\"xl\">{`${assetInfo.directionSign}${assetInfo.amountWithSymbol}`}</Amount>\n    </AmountWrapper>\n  )\n}\n","import { Dot, IconText as IconTextSrc, Loader, Text, Tooltip } from '@gnosis.pm/safe-react-components'\nimport { ThemeColors } from '@gnosis.pm/safe-react-components/dist/theme'\nimport { ReactElement, useContext, useRef } from 'react'\nimport styled from 'styled-components'\nimport { MultiSend, Custom } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useSelector } from 'react-redux'\n\nimport { CustomIconText } from 'src/components/CustomIconText'\nimport {\n  isCustomTxInfo,\n  isMultiSendTxInfo,\n  isSettingsChangeTxInfo,\n  LocalTransactionStatus,\n  Transaction,\n} from 'src/logic/safe/store/models/types/gateway.d'\nimport { TxCollapsedActions } from './TxCollapsedActions'\nimport { formatDateTime, formatTime, formatTimeInWords } from 'src/utils/date'\nimport { sameString } from 'src/utils/strings'\nimport { AssetInfo, isTokenTransferAsset } from './hooks/useAssetInfo'\nimport { TransactionStatusProps } from './hooks/useTransactionStatus'\nimport { TxTypeProps } from './hooks/useTransactionType'\nimport { StyledGroupedTransactions, StyledTransaction } from './styled'\nimport { TokenTransferAmount } from './TokenTransferAmount'\nimport { TxsInfiniteScrollContext } from './TxsInfiniteScroll'\nimport { TxLocationContext } from './TxLocationProvider'\nimport { CalculatedVotes } from './TxQueueCollapsed'\nimport { getTxTo, isAwaitingExecution, isCancelTxDetails } from './utils'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { useKnownAddress } from './hooks/useKnownAddress'\nimport useTxStatus from 'src/logic/hooks/useTxStatus'\n\nconst TxInfo = ({ info, name }: { info: AssetInfo; name?: string }) => {\n  if (isTokenTransferAsset(info)) {\n    return <TokenTransferAmount assetInfo={info} />\n  }\n\n  if (isSettingsChangeTxInfo(info) && !isCustomTxInfo(info)) {\n    const UNKNOWN_MODULE = 'Unknown module'\n\n    switch (info.settingsInfo?.type) {\n      case 'SET_FALLBACK_HANDLER':\n      case 'ADD_OWNER':\n      case 'REMOVE_OWNER':\n      case 'SWAP_OWNER':\n      case 'CHANGE_THRESHOLD':\n      case 'CHANGE_IMPLEMENTATION':\n        break\n      case 'ENABLE_MODULE':\n      case 'DISABLE_MODULE':\n        return (\n          <Text size=\"xl\" as=\"span\">\n            {name || UNKNOWN_MODULE}\n          </Text>\n        )\n    }\n  }\n\n  if (isCustomTxInfo(info)) {\n    if (isMultiSendTxInfo(info)) {\n      return (\n        <Text size=\"xl\" as=\"span\">\n          {info.actionCount} {`action${(info as MultiSend).actionCount > 1 ? 's' : ''}`}\n        </Text>\n      )\n    }\n\n    return (\n      <Text size=\"xl\" as=\"span\">\n        {(info as Custom).methodName}\n      </Text>\n    )\n  }\n  return null\n}\n\nconst CircularProgressPainter = styled.div<{ color: ThemeColors }>`\n  color: ${({ theme, color }) => theme.colors[color]};\n`\n\nconst SmallDot = styled(Dot)`\n  height: 8px;\n  width: 8px;\n  background-color: ${({ theme, color }) => theme.colors[color]} !important;\n`\n\nconst IconText = styled(IconTextSrc)`\n  p {\n    font-weight: bold;\n  }\n`\n\nconst TooltipContent = styled.div`\n  width: max-content;\n`\n\ntype TxCollapsedProps = {\n  transaction: Transaction\n  isGrouped?: boolean\n  nonce?: number\n  type: TxTypeProps\n  info?: AssetInfo\n  time: number\n  votes?: CalculatedVotes\n  status: TransactionStatusProps\n}\n\nexport const TxCollapsed = ({\n  transaction,\n  isGrouped = false,\n  nonce,\n  type,\n  info,\n  time,\n  votes,\n  status,\n}: TxCollapsedProps): ReactElement => {\n  const { txLocation } = useContext(TxLocationContext)\n  const { ref, lastItemId } = useContext(TxsInfiniteScrollContext)\n  const userAddress = useSelector(userAccountSelector)\n  const toAddress = getTxTo(transaction)\n  const toInfo = useKnownAddress(toAddress)\n  const txStatus = useTxStatus(transaction)\n  const isPending = txStatus === LocalTransactionStatus.PENDING\n  const willBeReplaced = txStatus === LocalTransactionStatus.WILL_BE_REPLACED ? ' will-be-replaced' : ''\n\n  const onChainRejection =\n    isCancelTxDetails(transaction.txInfo) && txLocation !== 'history' ? ' on-chain-rejection' : ''\n\n  const txCollapsedNonce = (\n    <div className={'tx-nonce' + willBeReplaced}>\n      <Text size=\"xl\">{nonce}</Text>\n    </div>\n  )\n\n  const txCollapsedType = (\n    <div className={'tx-type' + willBeReplaced + onChainRejection}>\n      <CustomIconText\n        address={toAddress?.value || '0x'}\n        iconUrl={type.icon || toInfo?.logoUri || undefined}\n        iconUrlFallback={type.fallbackIcon}\n        text={type.text || toInfo?.name || undefined}\n      />\n    </div>\n  )\n\n  const txCollapsedInfo = (\n    <div className={'tx-info' + willBeReplaced}>{info && <TxInfo info={info} name={toInfo?.name || undefined} />}</div>\n  )\n\n  const timestamp = useRef<HTMLDivElement | null>(null)\n\n  const txCollapsedTime = (\n    <div className={'tx-time' + willBeReplaced}>\n      <Tooltip title={formatDateTime(time)} arrow backgroundColor=\"white\" size=\"lg\">\n        <TooltipContent ref={timestamp}>\n          <Text size=\"xl\">{txLocation === 'history' ? formatTime(time) : formatTimeInWords(time)}</Text>\n        </TooltipContent>\n      </Tooltip>\n    </div>\n  )\n\n  const txCollapsedVotes = (\n    <div className={'tx-votes' + willBeReplaced}>\n      {votes && (\n        <IconText\n          color={votes.required > votes.submitted ? 'secondaryLight' : 'primary'}\n          iconType=\"owners\"\n          iconSize=\"sm\"\n          text={`${votes.votes}`}\n          textSize=\"md\"\n        />\n      )}\n    </div>\n  )\n\n  const txCollapsedActions = (\n    <div className={'tx-actions' + willBeReplaced}>\n      {!isPending && userAddress && txLocation !== 'history' && transaction && (\n        <TxCollapsedActions transaction={transaction} />\n      )}\n    </div>\n  )\n\n  // attaching ref to a div element as it was causing troubles to add a `ref` to a FunctionComponent\n  const txCollapsedStatus = (\n    <div className=\"tx-status\" ref={sameString(lastItemId, transaction.id) ? ref : null}>\n      {isPending ? (\n        <CircularProgressPainter color={status.color}>\n          <Loader size=\"xs\" color=\"pending\" />\n        </CircularProgressPainter>\n      ) : (\n        isAwaitingExecution(txStatus) && <SmallDot color={status.color} />\n      )}\n      <Text size=\"md\" color={status.color} className=\"col\" strong>\n        {status.text}\n      </Text>\n    </div>\n  )\n\n  return isGrouped ? (\n    <StyledGroupedTransactions>\n      {/* no nonce */}\n      {txCollapsedType}\n      {txCollapsedInfo}\n      {txCollapsedTime}\n      {txCollapsedVotes}\n      {txCollapsedActions}\n      {txCollapsedStatus}\n    </StyledGroupedTransactions>\n  ) : (\n    <StyledTransaction className={sameString(status.text, 'Failed') ? 'failed-transaction' : ''}>\n      {txCollapsedNonce}\n      {txCollapsedType}\n      {txCollapsedInfo}\n      {txCollapsedTime}\n      {txCollapsedVotes}\n      {txCollapsedActions}\n      {txCollapsedStatus}\n    </StyledTransaction>\n  )\n}\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\n\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useAssetInfo } from './hooks/useAssetInfo'\nimport { useTransactionStatus } from './hooks/useTransactionStatus'\nimport { useTransactionType } from './hooks/useTransactionType'\nimport { TxCollapsed } from './TxCollapsed'\n\nexport const TxHistoryCollapsed = ({ transaction }: { transaction: Transaction }): ReactElement => {\n  const nonce = (transaction.executionInfo as MultisigExecutionInfo)?.nonce\n  const type = useTransactionType(transaction)\n  const info = useAssetInfo(transaction.txInfo)\n  const status = useTransactionStatus(transaction)\n\n  return (\n    <TxCollapsed\n      nonce={nonce}\n      type={type}\n      info={info}\n      time={transaction.timestamp}\n      status={status}\n      transaction={transaction}\n    />\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport useTokenInfo from 'src/logic/safe/hooks/useTokenInfo'\nimport { sameString } from 'src/utils/strings'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { getResetTimeOptions } from 'src/routes/safe/components/Settings/SpendingLimit/FormFields/ResetTime'\nimport { AddressInfo, ResetTimeInfo, TokenInfo } from 'src/routes/safe/components/Settings/SpendingLimit/InfoDisplay'\nimport { TransactionData, TransactionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { getTxTo } from './utils'\n\nconst SET_ALLOWANCE = 'setAllowance'\nconst DELETE_ALLOWANCE = 'deleteAllowance'\n\nexport const isSetAllowance = (method?: string): boolean => {\n  return sameString(method, SET_ALLOWANCE)\n}\n\nexport const isDeleteAllowance = (method?: string): boolean => {\n  return sameString(method, DELETE_ALLOWANCE)\n}\n\nexport const isSpendingLimitMethod = (method?: string): boolean => {\n  return isSetAllowance(method) || isDeleteAllowance(method)\n}\n\nconst SpendingLimitRow = styled.div`\n  margin-bottom: 16px;\n`\n\ntype SpendingLimitProps = {\n  txData: TransactionData\n  txInfo: TransactionInfo\n}\n\nexport const ModifySpendingLimitDetails = ({ txData, txInfo }: SpendingLimitProps): React.ReactElement => {\n  const { dataDecoded } = txData\n  const [beneficiary, tokenAddress, amount, resetTimeMin] = useMemo(\n    () => dataDecoded?.parameters?.map(({ value }) => value) ?? [],\n    [dataDecoded?.parameters],\n  )\n\n  const resetTimeLabel = useMemo(\n    () => getResetTimeOptions().find(({ value }) => +value === +resetTimeMin)?.label ?? '',\n    [resetTimeMin],\n  )\n\n  const tokenInfo = useTokenInfo(tokenAddress as string)\n  const txTo = getTxTo({ txInfo })\n\n  return (\n    <>\n      <SpendingLimitRow>\n        <Text size=\"xl\" strong>\n          Modify spending limit:\n        </Text>\n      </SpendingLimitRow>\n      <SpendingLimitRow>\n        <AddressInfo\n          title=\"Beneficiary\"\n          address={(beneficiary as string) || txTo?.value || '0x'}\n          name={txTo?.name || undefined}\n          logoUri={txTo?.logoUri || undefined}\n        />\n      </SpendingLimitRow>\n      <SpendingLimitRow>\n        {tokenInfo && (\n          <TokenInfo amount={fromTokenUnit(amount as string, tokenInfo.decimals)} title=\"Amount\" token={tokenInfo} />\n        )}\n      </SpendingLimitRow>\n      <SpendingLimitRow>\n        <ResetTimeInfo title=\"Reset Time\" label={resetTimeLabel} />\n      </SpendingLimitRow>\n    </>\n  )\n}\n\nexport const DeleteSpendingLimitDetails = ({ txData, txInfo }: SpendingLimitProps): React.ReactElement => {\n  const { dataDecoded } = txData\n  const [beneficiary, tokenAddress] = useMemo(\n    () => dataDecoded?.parameters?.map(({ value }) => value) ?? [],\n    [dataDecoded?.parameters],\n  )\n  const tokenInfo = useTokenInfo(tokenAddress as string)\n  const txTo = getTxTo({ txInfo })\n\n  return (\n    <>\n      <SpendingLimitRow>\n        <Text size=\"xl\" strong>\n          Delete spending limit:\n        </Text>\n      </SpendingLimitRow>\n      <SpendingLimitRow>\n        <AddressInfo\n          title=\"Beneficiary\"\n          address={(beneficiary as string) || txTo?.value || '0x'}\n          name={txTo?.name || undefined}\n          logoUri={txTo?.logoUri || undefined}\n        />\n      </SpendingLimitRow>\n      <SpendingLimitRow>{tokenInfo && <TokenInfo amount=\"\" title=\"Token\" token={tokenInfo} />}</SpendingLimitRow>\n    </>\n  )\n}\n","import { useState } from 'react'\nimport { ClickAwayListener, createStyles, Divider } from '@material-ui/core'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz'\nimport { useSelector } from 'react-redux'\n\nimport { sameString } from 'src/utils/strings'\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\nimport { xs } from 'src/theme/variables'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\nimport { SAFE_ROUTES, history, extractSafeAddress, generateSafeRoute } from 'src/routes/routes'\nimport { getShortName } from 'src/config'\n\nconst useStyles = makeStyles(\n  createStyles({\n    container: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      cursor: 'pointer',\n      margin: `0 ${xs}`,\n      borderRadius: '50%',\n      transition: 'background-color .2s ease-in-out',\n      '&:hover': {\n        backgroundColor: '#F0EFEE',\n      },\n      outline: 'none',\n    },\n    increasedPopperZindex: {\n      zIndex: 2001,\n    },\n  }),\n)\n\ntype EllipsisTransactionDetailsProps = {\n  address: string\n  sendModalOpenHandler?: () => void\n}\n\nexport const EllipsisTransactionDetails = ({\n  address,\n  sendModalOpenHandler,\n}: EllipsisTransactionDetailsProps): React.ReactElement => {\n  const classes = useStyles()\n  const [anchorEl, setAnchorEl] = useState(null)\n\n  const isOwnerConnected = useSelector(grantedSelector)\n\n  const recipientName = useSelector((state) => addressBookEntryName(state, { address }))\n  // We have to check that the name returned is not UNKNOWN\n  const isStoredInAddressBook = !sameString(recipientName, ADDRESS_BOOK_DEFAULT_NAME)\n\n  const handleClick = (event) => setAnchorEl(event.currentTarget)\n\n  const closeMenuHandler = () => setAnchorEl(null)\n\n  const addOrEditEntryHandler = () => {\n    history.push({\n      pathname: generateSafeRoute(SAFE_ROUTES.ADDRESS_BOOK, {\n        shortName: getShortName(),\n        safeAddress: extractSafeAddress(),\n      }),\n      search: `?entryAddress=${address}`,\n    })\n    closeMenuHandler()\n  }\n\n  return (\n    <ClickAwayListener onClickAway={closeMenuHandler}>\n      <div className={classes.container} role=\"menu\" tabIndex={0}>\n        <MoreHorizIcon onClick={handleClick} onKeyDown={handleClick} />\n        <Menu anchorEl={anchorEl} id=\"simple-menu\" keepMounted onClose={closeMenuHandler} open={Boolean(anchorEl)}>\n          {sendModalOpenHandler\n            ? [\n                <MenuItem key=\"send-again-button\" onClick={sendModalOpenHandler} disabled={!isOwnerConnected}>\n                  Send Again\n                </MenuItem>,\n                <Divider key=\"divider\" />,\n              ]\n            : null}\n          {isStoredInAddressBook ? (\n            <MenuItem onClick={addOrEditEntryHandler}>Edit Address book Entry</MenuItem>\n          ) : (\n            <MenuItem onClick={addOrEditEntryHandler}>Add to address book</MenuItem>\n          )}\n        </Menu>\n      </div>\n    </ClickAwayListener>\n  )\n}\n","import { ReactElement } from 'react'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\n\nimport { getExplorerInfo } from 'src/config'\nimport { useKnownAddress } from './hooks/useKnownAddress'\n\ntype EthHashInfoRestProps = Omit<\n  Parameters<typeof PrefixedEthHashInfo>[0],\n  'hash' | 'name' | 'showAvatar' | 'customAvatar' | 'showCopyBtn' | 'explorerUrl'\n>\n\ntype Props = EthHashInfoRestProps & {\n  address: string\n  name?: string | undefined\n  avatarUrl?: string | undefined\n}\n\nexport const AddressInfo = ({ address, name, avatarUrl, ...rest }: Props): ReactElement | null => {\n  const toInfo = useKnownAddress({ value: address, name: name || null, logoUri: avatarUrl || null })\n\n  if (address === '') {\n    return null\n  }\n\n  return (\n    <PrefixedEthHashInfo\n      hash={address}\n      name={toInfo.name || undefined}\n      showAvatar\n      customAvatar={toInfo.logoUri || undefined}\n      showCopyBtn\n      explorerUrl={getExplorerInfo(address)}\n      {...rest}\n    />\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { ReactElement, ReactNode } from 'react'\n\ntype InfoDetailsProps = {\n  children: ReactNode\n  title: string\n}\n\nexport const InfoDetails = ({ children, title }: InfoDetailsProps): ReactElement => (\n  <>\n    <Text size=\"xl\" strong>\n      {title}\n    </Text>\n    {children}\n  </>\n)\n","import { Erc721Transfer, Transfer, TokenType } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement, useContext, useEffect, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { EllipsisTransactionDetails } from 'src/routes/safe/components/AddressBook/EllipsisTransactionDetails'\nimport SendModal from 'src/routes/safe/components/Balances/SendModal'\nimport { AddressInfo } from './AddressInfo'\nimport { InfoDetails } from './InfoDetails'\nimport { TxLocationContext, TxLocationProps } from './TxLocationProvider'\nimport { getTxTokenData } from './utils'\n\nconst SingleRow = styled.div`\n  display: flex;\n  align-items: flex-end;\n`\n\ntype TxInfoDetailsProps = {\n  title: string\n  address: string\n  name?: string | undefined\n  avatarUrl?: string | undefined\n  isTransferType?: boolean\n  txInfo?: Transfer\n}\n\nexport const TxInfoDetails = ({\n  title,\n  address,\n  isTransferType,\n  txInfo,\n  name,\n  avatarUrl,\n}: TxInfoDetailsProps): ReactElement => {\n  const { txLocation } = useContext<TxLocationProps>(TxLocationContext)\n  const canRepeatTransaction =\n    // is transfer type by context\n    isTransferType &&\n    // not a Collectible\n    txInfo?.transferInfo.type !== TokenType.ERC721 &&\n    // in history list\n    txLocation === 'history' &&\n    // it's outgoing\n    txInfo?.direction === 'OUTGOING'\n\n  const [sendModalOpen, setSendModalOpen] = useState(false)\n  const sendModalOpenHandler = () => {\n    setSendModalOpen(true)\n  }\n  const onClose = () => {\n    setSendModalOpen(false)\n  }\n\n  const [sendModalParams, setSendModalParams] = useState<{\n    activeScreenType: 'sendCollectible' | 'sendFunds'\n    recipientAddress: string\n    selectedToken: string | Erc721Transfer\n    tokenAmount: string\n  }>({\n    activeScreenType: 'sendFunds',\n    recipientAddress: address,\n    selectedToken: ZERO_ADDRESS,\n    tokenAmount: '0',\n  })\n\n  useEffect(() => {\n    if (txInfo) {\n      const isCollectible = txInfo.transferInfo.type === TokenType.ERC721\n      const { address, value, decimals } = getTxTokenData(txInfo)\n\n      setSendModalParams((prev) => ({\n        ...prev,\n        activeScreenType: isCollectible ? 'sendCollectible' : 'sendFunds',\n        selectedToken: isCollectible ? (txInfo.transferInfo as Erc721Transfer) : address,\n        tokenAmount: isCollectible ? '1' : fromTokenUnit(value, Number(decimals)),\n      }))\n    }\n  }, [txInfo])\n\n  return (\n    <InfoDetails title={title}>\n      <SingleRow>\n        <AddressInfo address={address} name={name} avatarUrl={avatarUrl} />\n        <EllipsisTransactionDetails\n          address={address}\n          sendModalOpenHandler={canRepeatTransaction ? sendModalOpenHandler : undefined}\n        />\n      </SingleRow>\n      {canRepeatTransaction && <SendModal isOpen={sendModalOpen} onClose={onClose} {...sendModalParams} />}\n    </InfoDetails>\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport { ReactElement, useState } from 'react'\n\nimport Paragraph from 'src/components/layout/Paragraph'\nimport LinkWithRef from 'src/components/layout/Link'\nimport { textShortener } from 'src/utils/strings'\n\nexport const styles = createStyles({\n  txDataParagraph: {\n    whiteSpace: 'normal',\n  },\n  linkTxData: {\n    textDecoration: 'underline',\n    cursor: 'pointer',\n  },\n})\n\nconst useStyles = makeStyles(styles)\n\nexport const HexEncodedData = ({\n  hexData,\n  title,\n  limit = 20,\n}: {\n  hexData: string\n  title?: string\n  limit?: number\n}): ReactElement => {\n  const classes = useStyles()\n  const [showTxData, setShowTxData] = useState(false)\n  const showExpandBtn = hexData.length > limit\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\n\n  return (\n    <div className=\"tx-hexData\">\n      {title && (\n        <Text size=\"xl\" strong>\n          {title}:\n        </Text>\n      )}\n      <Paragraph className={classes.txDataParagraph} noMargin size=\"md\">\n        {showExpandBtn ? (\n          <>\n            {showTxData ? (\n              <>\n                {hexData}{' '}\n                <LinkWithRef\n                  aria-label=\"Hide details of the transaction\"\n                  className={classes.linkTxData}\n                  onClick={() => setShowTxData(false)}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  Show Less\n                </LinkWithRef>\n              </>\n            ) : (\n              <>\n                {shortener(hexData)}{' '}\n                <LinkWithRef\n                  aria-label=\"Show details of the transaction\"\n                  className={classes.linkTxData}\n                  onClick={() => setShowTxData(true)}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  Show More\n                </LinkWithRef>\n              </>\n            )}\n          </>\n        ) : (\n          hexData\n        )}\n      </Paragraph>\n    </div>\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport {\n  isAddress,\n  isArrayParameter,\n} from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\nimport { HexEncodedData } from './HexEncodedData'\nimport { getExplorerInfo } from 'src/config'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\n\nconst NestedWrapper = styled.div`\n  padding-left: 4px;\n`\n\ninterface RenderValueProps {\n  method: string\n  type: string\n  value: string | string[]\n}\n\nconst GenericValue = ({ method, type, value }: RenderValueProps): React.ReactElement => {\n  const getTextValue = (value: string) => <HexEncodedData limit={60} hexData={value} />\n\n  const getArrayValue = (parentId: string, value: string[] | string) => (\n    <>\n      [\n      <NestedWrapper>\n        {(value as string[]).map((currentValue, index) => {\n          const key = `${parentId}-value-${index}`\n          return Array.isArray(currentValue) ? (\n            <Text key={key} size=\"xl\">\n              {getArrayValue(key, currentValue)}\n            </Text>\n          ) : (\n            getTextValue(currentValue)\n          )\n        })}\n      </NestedWrapper>\n      ]\n    </>\n  )\n\n  if (isArrayParameter(type) || Array.isArray(value)) {\n    return getArrayValue(method, value)\n  }\n\n  return getTextValue(value as string)\n}\n\nconst Value = ({ type, ...props }: RenderValueProps): React.ReactElement => {\n  if (isArrayParameter(type) && isAddress(type)) {\n    return (\n      <>\n        [\n        <NestedWrapper>\n          {(props.value as string[]).map((address) => {\n            const explorerUrl = getExplorerInfo(address)\n            return (\n              <PrefixedEthHashInfo key={address} textSize=\"xl\" hash={address} showCopyBtn explorerUrl={explorerUrl} />\n            )\n          })}\n        </NestedWrapper>\n        ]\n      </>\n    )\n  }\n\n  if (isAddress(type)) {\n    const explorerUrl = getExplorerInfo(props.value as string)\n    return (\n      <PrefixedEthHashInfo\n        textSize=\"xl\"\n        hash={props.value as string}\n        showCopyBtn\n        explorerUrl={explorerUrl}\n        shortenHash={4}\n      />\n    )\n  }\n\n  return <GenericValue type={type} {...props} />\n}\n\nexport default Value\n","import { Text } from '@gnosis.pm/safe-react-components'\n\nimport styled from 'styled-components'\n\nimport { isArrayParameter } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\nimport Value from 'src/routes/safe/components/Transactions/TxList/MethodValue'\nimport { DataDecoded } from '@gnosis.pm/safe-react-gateway-sdk'\n\nconst TxDetailsMethodParam = styled.div<{ isArrayParameter: boolean }>`\n  padding-left: 24px;\n  display: ${({ isArrayParameter }) => (isArrayParameter ? 'block' : 'flex')};\n  align-items: center;\n  flex-wrap: wrap;\n\n  p:first-of-type {\n    margin-right: ${({ isArrayParameter }) => (isArrayParameter ? '0' : '4px')};\n  }\n`\n\nconst TxInfo = styled.div`\n  padding: 8px 0;\n  overflow-x: auto;\n`\n\nconst ValueWrapper = styled.div`\n  min-width: 50%;\n  flex-shrink: 0;\n`\n\nexport const MethodDetails = ({ data }: { data: DataDecoded }): React.ReactElement => {\n  return (\n    <TxInfo>\n      <Text size=\"xl\" strong>\n        {data.method}\n      </Text>\n\n      {data.parameters?.map((param, index) => (\n        <TxDetailsMethodParam key={`${data.method}_param-${index}`} isArrayParameter={isArrayParameter(param.type)}>\n          <Text size=\"xl\" strong>\n            {param.name}({param.type}):\n          </Text>\n          <ValueWrapper>\n            <Value method={data.method} type={param.type} value={param.value as string} />\n          </ValueWrapper>\n        </TxDetailsMethodParam>\n      ))}\n    </TxInfo>\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nconst DelegateCallWarning = ({ showWarning }: { showWarning: boolean }): ReactElement => {\n  if (showWarning) {\n    return (\n      <Text size=\"xl\" strong as=\"span\" color=\"error\">\n        ⚠️ Unexpected Delegate Call\n      </Text>\n    )\n  }\n  return (\n    <Text size=\"xl\" strong as=\"span\">\n      Delegate Call\n    </Text>\n  )\n}\n\nexport default DelegateCallWarning\n","import { AccordionSummary, IconText } from '@gnosis.pm/safe-react-components'\nimport { DataDecoded, Operation, TransactionData } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement, ReactNode } from 'react'\n\nimport { getNativeCurrency } from 'src/config'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { getInteractionTitle } from '../helpers/utils'\nimport DelegateCallWarning from './DelegateCallWarning'\nimport { HexEncodedData } from './HexEncodedData'\nimport { MethodDetails } from './MethodDetails'\nimport { isSpendingLimitMethod } from './SpendingLimitDetails'\nimport { ColumnDisplayAccordionDetails, ActionAccordion } from './styled'\nimport { TxInfoDetails } from './TxInfoDetails'\n\ntype MultiSendTxGroupProps = {\n  actionTitle: string\n  children: ReactNode\n  txDetails: {\n    title: string\n    address: string\n    name?: string | undefined\n    avatarUrl?: string | undefined\n    dataDecoded: DataDecoded | null\n    operation: Operation\n  }\n}\n\nconst MultiSendTxGroup = ({ actionTitle, children, txDetails }: MultiSendTxGroupProps): ReactElement => {\n  const isDelegateCall = txDetails.operation === Operation.DELEGATE\n  return (\n    <ActionAccordion defaultExpanded={isDelegateCall || undefined}>\n      <AccordionSummary>\n        <IconText iconSize=\"sm\" iconType=\"code\" text={actionTitle} textSize=\"xl\" />\n      </AccordionSummary>\n      <ColumnDisplayAccordionDetails>\n        {/* We always warn of nested delegate calls */}\n        {isDelegateCall && <DelegateCallWarning showWarning={isDelegateCall} />}\n        {!isSpendingLimitMethod(txDetails.dataDecoded?.method) && (\n          <TxInfoDetails\n            title={txDetails.title}\n            address={txDetails.address}\n            name={txDetails.name}\n            avatarUrl={txDetails.avatarUrl}\n          />\n        )}\n        {children}\n      </ColumnDisplayAccordionDetails>\n    </ActionAccordion>\n  )\n}\n\nexport const MultiSendDetails = ({ txData }: { txData: TransactionData }): ReactElement | null => {\n  const nativeCurrency = getNativeCurrency()\n  // no parameters for the `multiSend`\n  if (!txData.dataDecoded?.parameters) {\n    // we render the hex encoded data\n    if (txData.hexData) {\n      return <HexEncodedData title=\"Data (hex encoded)\" hexData={txData.hexData} />\n    }\n\n    return null\n  }\n\n  // multiSend has one parameter `transactions` therefore `txData.dataDecoded.parameters[0]` is safe to be used here\n  return (\n    <>\n      {txData.dataDecoded.parameters[0].valueDecoded?.map(({ dataDecoded }, index, valuesDecoded) => {\n        let details\n        const { data, value, to, operation } = valuesDecoded[index]\n\n        const actionTitle = `Action ${index + 1} ${dataDecoded ? `(${dataDecoded.method})` : ''}`\n        const amount = value ? fromTokenUnit(value, nativeCurrency.decimals) : 0\n        const title = getInteractionTitle(amount)\n\n        if (dataDecoded) {\n          // Backend decoded data\n          details = <MethodDetails data={dataDecoded} />\n        } else {\n          // We couldn't decode it but we have data\n          details = data && <HexEncodedData title=\"Data (hex encoded)\" hexData={data} />\n        }\n\n        const addressInfo = txData.addressInfoIndex?.[to]\n        const name = addressInfo?.name || undefined\n        const avatarUrl = addressInfo?.logoUri || undefined\n\n        return (\n          <MultiSendTxGroup\n            key={`${data ?? to}-${index}`}\n            actionTitle={actionTitle}\n            txDetails={{ title, address: to, dataDecoded, name, avatarUrl, operation }}\n          >\n            {details}\n          </MultiSendTxGroup>\n        )\n      })}\n    </>\n  )\n}\n","import { TransactionData } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement, ReactNode } from 'react'\n\nimport { getNativeCurrency } from 'src/config'\nimport { ExpandedTxDetails, isCustomTxInfo } from 'src/logic/safe/store/models/types/gateway.d'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport {\n  DeleteSpendingLimitDetails,\n  isDeleteAllowance,\n  isSetAllowance,\n  ModifySpendingLimitDetails,\n} from './SpendingLimitDetails'\nimport { TxInfoDetails } from './TxInfoDetails'\nimport { sameString } from 'src/utils/strings'\nimport { HexEncodedData } from './HexEncodedData'\nimport { MethodDetails } from './MethodDetails'\nimport { MultiSendDetails } from './MultiSendDetails'\nimport { TransactionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { getInteractionTitle } from '../helpers/utils'\n\ntype DetailsWithTxInfoProps = {\n  children: ReactNode\n  txData: TransactionData\n  txInfo: TransactionInfo\n}\n\nconst DetailsWithTxInfo = ({ children, txData, txInfo }: DetailsWithTxInfoProps): ReactElement => {\n  const nativeCurrency = getNativeCurrency()\n  const amount = txData.value ? fromTokenUnit(txData.value, nativeCurrency.decimals) : 'n/a'\n  let name\n  let avatarUrl\n\n  if (isCustomTxInfo(txInfo)) {\n    name = txInfo.to.name\n    avatarUrl = txInfo.to.logoUri\n  }\n\n  return (\n    <>\n      <TxInfoDetails address={txData.to.value} name={name} avatarUrl={avatarUrl} title={getInteractionTitle(amount)} />\n      {children}\n    </>\n  )\n}\n\ntype TxDataProps = {\n  txData: ExpandedTxDetails['txData']\n  txInfo: TransactionInfo\n}\n\nexport const TxData = ({ txData, txInfo }: TxDataProps): ReactElement | null => {\n  // nothing to render\n  if (!txData) {\n    return null\n  }\n\n  // unknown tx information\n  if (!txData.dataDecoded) {\n    // no hex data, nothing to render\n    if (!txData.hexData) {\n      return null\n    }\n\n    // we render the hex encoded data\n    return (\n      <DetailsWithTxInfo txData={txData} txInfo={txInfo}>\n        <HexEncodedData title=\"Data (hex encoded)\" hexData={txData.hexData} />\n      </DetailsWithTxInfo>\n    )\n  }\n\n  // known data and particularly `multiSend` data type\n  if (sameString(txData.dataDecoded.method, 'multiSend')) {\n    return <MultiSendDetails txData={txData} />\n  }\n\n  // FixMe: this way won't scale well\n  if (isSetAllowance(txData.dataDecoded.method)) {\n    return <ModifySpendingLimitDetails txData={txData} txInfo={txInfo} />\n  }\n\n  // FixMe: this way won't scale well\n  if (isDeleteAllowance(txData.dataDecoded.method)) {\n    return <DeleteSpendingLimitDetails txData={txData} txInfo={txInfo} />\n  }\n\n  // we render the decoded data\n  return (\n    <DetailsWithTxInfo txData={txData} txInfo={txInfo}>\n      <MethodDetails data={txData.dataDecoded} />\n    </DetailsWithTxInfo>\n  )\n}\n","import { Button, Tooltip } from '@gnosis.pm/safe-react-components'\nimport { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { currentSafeNonce } from 'src/logic/safe/store/selectors'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useActionButtonsHandlers } from 'src/routes/safe/components/Transactions/TxList/hooks/useActionButtonsHandlers'\nimport useTxStatus from 'src/logic/hooks/useTxStatus'\nimport { isAwaitingExecution } from './utils'\n\ntype TxExpandedActionsProps = {\n  transaction: Transaction\n}\n\nexport const TxExpandedActions = ({ transaction }: TxExpandedActionsProps): ReactElement => {\n  const {\n    canCancel,\n    handleConfirmButtonClick,\n    handleCancelButtonClick,\n    handleOnMouseEnter,\n    handleOnMouseLeave,\n    isPending,\n    disabledActions,\n  } = useActionButtonsHandlers(transaction)\n  const nonce = useSelector(currentSafeNonce)\n  const txStatus = useTxStatus(transaction)\n  const isAwaitingEx = isAwaitingExecution(txStatus)\n\n  const onExecuteOrConfirm = (event) => {\n    handleOnMouseLeave()\n    handleConfirmButtonClick(event)\n  }\n\n  const getConfirmTooltipTitle = () => {\n    if (isAwaitingEx) {\n      return (transaction.executionInfo as MultisigExecutionInfo)?.nonce === nonce\n        ? 'Execute'\n        : `Transaction with nonce ${nonce} needs to be executed first`\n    }\n    return 'Confirm'\n  }\n\n  // There is a problem in chrome that produces onMouseLeave event not being triggered properly.\n  // https://github.com/facebook/react/issues/4492\n  return (\n    <>\n      <Tooltip title={getConfirmTooltipTitle()} placement=\"top\">\n        <span>\n          <Button\n            size=\"md\"\n            color=\"primary\"\n            disabled={disabledActions}\n            onClick={onExecuteOrConfirm}\n            onMouseEnter={handleOnMouseEnter}\n            onMouseLeave={handleOnMouseLeave}\n            className=\"primary\"\n          >\n            {isAwaitingEx ? 'Execute' : 'Confirm'}\n          </Button>\n        </span>\n      </Tooltip>\n      {canCancel && (\n        <Button size=\"md\" color=\"error\" onClick={handleCancelButtonClick} className=\"error\" disabled={isPending}>\n          Reject\n        </Button>\n      )}\n    </>\n  )\n}\n","import { SettingsChange } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\n\nimport { AddressInfo } from './AddressInfo'\nimport { InfoDetails } from './InfoDetails'\nimport { TxInfoDetails } from './TxInfoDetails'\n\ntype TxInfoSettingsProps = {\n  settingsInfo: SettingsChange['settingsInfo']\n}\n\nexport const TxInfoSettings = ({ settingsInfo }: TxInfoSettingsProps): ReactElement | null => {\n  if (!settingsInfo) {\n    return null\n  }\n\n  switch (settingsInfo.type) {\n    case 'SET_FALLBACK_HANDLER': {\n      return (\n        <InfoDetails title=\"Set fallback handler:\">\n          <AddressInfo\n            address={settingsInfo.handler.value}\n            name={settingsInfo.handler?.name || undefined}\n            avatarUrl={settingsInfo.handler?.logoUri || undefined}\n          />\n        </InfoDetails>\n      )\n    }\n    case 'ADD_OWNER':\n    case 'REMOVE_OWNER': {\n      const title = settingsInfo.type === 'ADD_OWNER' ? 'Add owner:' : 'Remove owner:'\n      return (\n        <InfoDetails title={title}>\n          <AddressInfo\n            address={settingsInfo.owner.value}\n            name={settingsInfo.owner?.name || undefined}\n            avatarUrl={settingsInfo.owner?.logoUri || undefined}\n          />\n          <InfoDetails title=\"Change required confirmations:\">{settingsInfo.threshold}</InfoDetails>\n        </InfoDetails>\n      )\n    }\n    case 'SWAP_OWNER': {\n      return (\n        <InfoDetails title=\"Swap owner:\">\n          <TxInfoDetails\n            title=\"Old owner\"\n            address={settingsInfo.oldOwner.value}\n            name={settingsInfo.oldOwner?.name || undefined}\n            avatarUrl={settingsInfo.oldOwner?.logoUri || undefined}\n          />\n          <TxInfoDetails\n            title=\"New owner\"\n            address={settingsInfo.newOwner.value}\n            name={settingsInfo.newOwner?.name || undefined}\n            avatarUrl={settingsInfo.newOwner?.logoUri || undefined}\n          />\n        </InfoDetails>\n      )\n    }\n    case 'CHANGE_THRESHOLD': {\n      return <InfoDetails title=\"Change required confirmations:\">{settingsInfo.threshold}</InfoDetails>\n    }\n    case 'CHANGE_IMPLEMENTATION': {\n      return (\n        <InfoDetails title=\"Change implementation:\">\n          <AddressInfo\n            address={settingsInfo.implementation.value}\n            name={settingsInfo.implementation?.name || undefined}\n            avatarUrl={settingsInfo.implementation?.logoUri || undefined}\n          />\n        </InfoDetails>\n      )\n    }\n    case 'ENABLE_MODULE':\n    case 'DISABLE_MODULE': {\n      const title = settingsInfo.type === 'ENABLE_MODULE' ? 'Enable module:' : 'Disable module:'\n      return (\n        <InfoDetails title={title}>\n          <AddressInfo\n            address={settingsInfo.module.value}\n            name={settingsInfo.module?.name || undefined}\n            avatarUrl={settingsInfo.module?.logoUri || undefined}\n          />\n        </InfoDetails>\n      )\n    }\n    default:\n      return null\n  }\n}\n","import { Transfer } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement, useEffect, useState } from 'react'\n\nimport { useAssetInfo } from './hooks/useAssetInfo'\nimport { TxInfoDetails } from './TxInfoDetails'\n\ntype Details = {\n  title: string\n  address: string\n  name: string | undefined // AddressEx returns null if unknown\n}\n\nexport const TxInfoTransfer = ({ txInfo }: { txInfo: Transfer }): ReactElement | null => {\n  const assetInfo = useAssetInfo(txInfo)\n  const [details, setDetails] = useState<Details | undefined>()\n\n  useEffect(() => {\n    if (assetInfo && assetInfo.type === 'Transfer') {\n      if (txInfo.direction.toUpperCase() === 'INCOMING') {\n        setDetails({\n          title: `Received ${assetInfo.amountWithSymbol} from:`,\n          address: txInfo.sender.value,\n          name: txInfo.sender.name || undefined,\n        })\n      } else {\n        setDetails({\n          title: `Send ${assetInfo.amountWithSymbol} to:`,\n          address: txInfo.recipient.value,\n          name: txInfo.recipient.name || undefined,\n        })\n      }\n    }\n  }, [assetInfo, txInfo.direction, txInfo.recipient, txInfo.sender])\n\n  return details ? <TxInfoDetails {...details} isTransferType txInfo={txInfo} /> : null\n}\n","import { SettingsChange, TransactionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\n\nimport { isSettingsChangeTxInfo, isTransferTxInfo } from 'src/logic/safe/store/models/types/gateway.d'\nimport { TxInfoSettings } from './TxInfoSettings'\nimport { TxInfoTransfer } from './TxInfoTransfer'\n\nexport const TxInfo = ({ txInfo }: { txInfo: TransactionInfo }): ReactElement | null => {\n  if (isSettingsChangeTxInfo(txInfo)) {\n    return <TxInfoSettings settingsInfo={(txInfo as SettingsChange).settingsInfo} />\n  }\n\n  if (isTransferTxInfo(txInfo)) {\n    return <TxInfoTransfer txInfo={txInfo} />\n  }\n\n  return null\n}\n","export default __webpack_public_path__ + \"static/media/transactions-list-active.275ff76c.svg\";","export default __webpack_public_path__ + \"static/media/transactions-list-inactive.362550b8.svg\";","import { Text, Icon } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\nimport styled from 'styled-components'\n\nimport Img from 'src/components/layout/Img'\nimport { ExpandedTxDetails, isModuleExecutionInfo } from 'src/logic/safe/store/models/types/gateway.d'\nimport TransactionListActive from './assets/transactions-list-active.svg'\nimport TransactionListInactive from './assets/transactions-list-inactive.svg'\nimport { AddressInfo } from './AddressInfo'\nimport { OwnerList, OwnerListItem } from './styled'\nimport { isCancelTxDetails } from './utils'\n\nconst StyledImg = styled(Img)`\n  background-color: transparent;\n  border-radius: 50%;\n`\n\nexport const TxOwners = ({\n  txDetails,\n  isPending,\n}: {\n  txDetails: ExpandedTxDetails\n  isPending: boolean\n}): ReactElement | null => {\n  const { txInfo, detailedExecutionInfo } = txDetails\n\n  if (!detailedExecutionInfo || isModuleExecutionInfo(detailedExecutionInfo)) {\n    return null\n  }\n\n  const confirmationsNeeded = detailedExecutionInfo.confirmationsRequired - detailedExecutionInfo.confirmations.length\n\n  const CreationNode = isCancelTxDetails(txInfo) ? (\n    <OwnerListItem>\n      <span className=\"icon\">\n        <Icon size=\"sm\" type=\"circleCross\" color=\"error\" />\n      </span>\n      <div className=\"legend\">\n        <Text color=\"error\" size=\"xl\" strong>\n          On-chain rejection created\n        </Text>\n      </div>\n    </OwnerListItem>\n  ) : (\n    <OwnerListItem>\n      <span className=\"icon\">\n        <Icon size=\"sm\" type=\"add\" color=\"primary\" />\n      </span>\n      <div className=\"legend\">\n        <Text color=\"primary\" size=\"xl\" strong>\n          Created\n        </Text>\n      </div>\n    </OwnerListItem>\n  )\n\n  return (\n    <OwnerList>\n      {CreationNode}\n      {detailedExecutionInfo.confirmations.map(({ signer }) => (\n        <OwnerListItem key={signer.value}>\n          <span className=\"icon\">\n            <Icon size=\"sm\" type=\"circleCheck\" color=\"primary\" />\n          </span>\n          <div className=\"legend\">\n            <Text color=\"primary\" size=\"xl\" strong>\n              Confirmed\n            </Text>\n            <AddressInfo\n              address={signer.value}\n              name={signer?.name || undefined}\n              avatarUrl={signer?.logoUri || undefined}\n              shortenHash={4}\n            />\n          </div>\n        </OwnerListItem>\n      ))}\n      {isPending || confirmationsNeeded <= 0 ? (\n        <OwnerListItem>\n          <span className=\"icon\">\n            {detailedExecutionInfo.executor ? (\n              <Icon type=\"circleCheck\" size=\"sm\" color=\"primary\" />\n            ) : (\n              <StyledImg alt=\"\" src={TransactionListActive} />\n            )}\n          </span>\n          <div className=\"legend\">\n            <Text color=\"primary\" size=\"xl\" strong>\n              {detailedExecutionInfo.executor ? 'Executed' : isPending ? 'Executing' : 'Execute'}\n            </Text>\n            {detailedExecutionInfo.executor && (\n              <AddressInfo\n                address={detailedExecutionInfo.executor.value}\n                name={detailedExecutionInfo.executor?.name || undefined}\n                avatarUrl={detailedExecutionInfo.executor?.logoUri || undefined}\n                shortenHash={4}\n              />\n            )}\n          </div>\n        </OwnerListItem>\n      ) : (\n        <OwnerListItem>\n          <span className=\"icon\">\n            <StyledImg alt=\"\" src={TransactionListInactive} />\n          </span>\n          <div className=\"legend\">\n            <Text color=\"icon\" size=\"xl\" strong>\n              Execute ({confirmationsNeeded} more {confirmationsNeeded === 1 ? 'confirmation' : 'confirmations'} needed)\n            </Text>\n          </div>\n        </OwnerListItem>\n      )}\n    </OwnerList>\n  )\n}\n","import { CopyToClipboardBtn } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\nimport { generatePath } from 'react-router-dom'\n\nimport { getPrefixedSafeAddressSlug, SAFE_ADDRESS_SLUG, SAFE_ROUTES, TRANSACTION_ID_SLUG } from 'src/routes/routes'\nimport { PUBLIC_URL } from 'src/utils/constants'\n\ntype Props = {\n  safeTxHash: string\n}\n\nconst TxShareButton = ({ safeTxHash }: Props): ReactElement => {\n  const txDetailsPathname = generatePath(SAFE_ROUTES.TRANSACTIONS_SINGULAR, {\n    [SAFE_ADDRESS_SLUG]: getPrefixedSafeAddressSlug(),\n    [TRANSACTION_ID_SLUG]: safeTxHash,\n  })\n  const txDetailsLink = `${window.location.origin}${PUBLIC_URL}${txDetailsPathname}`\n\n  return <CopyToClipboardBtn textToCopy={txDetailsLink} iconType=\"share\" />\n}\n\nexport default TxShareButton\n","import { ReactElement } from 'react'\nimport { MultiSend } from '@gnosis.pm/safe-react-gateway-sdk'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { getExplorerInfo } from 'src/config'\nimport { InfoDetails } from './InfoDetails'\n\n// Does not use AddressInfo as to not allow address book data display\n// as we use backend data to verify the deligate call\nconst TxInfoMultiSend = ({ txInfo }: { txInfo: MultiSend }): ReactElement => {\n  const hash = txInfo?.to.value\n  const name = txInfo.to?.name || undefined\n  const customAvatar = txInfo.to?.logoUri || undefined\n  return (\n    <InfoDetails title=\"MultiSend contract:\">\n      <PrefixedEthHashInfo\n        hash={hash}\n        name={name}\n        customAvatar={customAvatar}\n        showAvatar\n        showCopyBtn\n        explorerUrl={getExplorerInfo(hash)}\n      />\n    </InfoDetails>\n  )\n}\n\nexport default TxInfoMultiSend\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { Operation } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\n\nimport { getExplorerInfo } from 'src/config'\nimport { formatDateTime } from 'src/utils/date'\nimport {\n  ExpandedTxDetails,\n  isMultiSendTxInfo,\n  isMultiSigExecutionDetails,\n} from 'src/logic/safe/store/models/types/gateway.d'\nimport { InlineEthHashInfo } from './styled'\nimport { NOT_AVAILABLE } from './utils'\nimport TxShareButton from './TxShareButton'\nimport TxInfoMultiSend from './TxInfoMultiSend'\nimport DelegateCallWarning from './DelegateCallWarning'\n\ntype Props = { txDetails: ExpandedTxDetails }\n\nexport const TxSummary = ({ txDetails }: Props): ReactElement => {\n  const { txHash, detailedExecutionInfo, executedAt, txData, txInfo } = txDetails\n  const explorerUrl = txHash ? getExplorerInfo(txHash) : undefined\n  const nonce = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.nonce : undefined\n  const created = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.submittedAt : undefined\n  const safeTxHash = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.safeTxHash : undefined\n\n  return (\n    <>\n      {isMultiSigExecutionDetails(txDetails.detailedExecutionInfo) && (\n        <div className=\"tx-share\">\n          <TxShareButton safeTxHash={txDetails.detailedExecutionInfo.safeTxHash} />\n        </div>\n      )}\n      <div className=\"tx-hash\">\n        <Text size=\"xl\" strong as=\"span\">\n          Transaction hash:{' '}\n        </Text>\n        {txHash ? (\n          <InlineEthHashInfo textSize=\"xl\" hash={txHash} shortenHash={8} showCopyBtn explorerUrl={explorerUrl} />\n        ) : (\n          <Text size=\"xl\" as=\"span\">\n            {NOT_AVAILABLE}\n          </Text>\n        )}\n      </div>\n      {safeTxHash !== undefined && (\n        <div className=\"tx-hash\">\n          <Text size=\"xl\" strong as=\"span\">\n            SafeTxHash:{' '}\n          </Text>\n          <InlineEthHashInfo textSize=\"xl\" hash={safeTxHash} shortenHash={8} showCopyBtn />\n        </div>\n      )}\n      {nonce !== undefined && (\n        <div className=\"tx-nonce\">\n          <Text size=\"xl\" strong as=\"span\">\n            Nonce:{' '}\n          </Text>\n          <Text size=\"xl\" as=\"span\">\n            {nonce}\n          </Text>\n        </div>\n      )}\n      {created && (\n        <div className=\"tx-created\">\n          <Text size=\"xl\" strong as=\"span\">\n            Created:{' '}\n          </Text>\n          <Text size=\"xl\" as=\"span\">\n            {formatDateTime(created)}\n          </Text>\n        </div>\n      )}\n      <div className=\"tx-executed\">\n        <Text size=\"xl\" strong as=\"span\">\n          Executed:{' '}\n        </Text>\n        <Text size=\"xl\" as=\"span\">\n          {executedAt ? formatDateTime(executedAt) : NOT_AVAILABLE}\n        </Text>\n      </div>\n      {txData?.operation === Operation.DELEGATE && (\n        <div className=\"tx-operation\">\n          <DelegateCallWarning showWarning={!txData.trustedDelegateCallTarget} />\n        </div>\n      )}\n      {isMultiSendTxInfo(txInfo) && <TxInfoMultiSend txInfo={txInfo} />}\n    </>\n  )\n}\n","import { ReactElement } from 'react'\nimport { ModuleExecutionDetails } from '@gnosis.pm/safe-react-gateway-sdk'\n\nimport { AddressInfo } from './AddressInfo'\nimport { InfoDetails } from './InfoDetails'\n\nconst TxModuleInfo = ({ detailedExecutionInfo }: { detailedExecutionInfo: ModuleExecutionDetails }): ReactElement => {\n  const { value, name, logoUri } = detailedExecutionInfo.address\n\n  return (\n    <InfoDetails title=\"Module:\">\n      <AddressInfo address={value} name={name || undefined} avatarUrl={logoUri || undefined} />\n    </InfoDetails>\n  )\n}\n\nexport default TxModuleInfo\n","import { Icon, Link, Loader, Text } from '@gnosis.pm/safe-react-components'\nimport cn from 'classnames'\nimport { ReactElement, useContext } from 'react'\nimport styled from 'styled-components'\n\nimport {\n  ExpandedTxDetails,\n  isModuleExecutionInfo,\n  isMultiSendTxInfo,\n  isMultiSigExecutionDetails,\n  isSettingsChangeTxInfo,\n  isTransferTxInfo,\n  LocalTransactionStatus,\n  Transaction,\n} from 'src/logic/safe/store/models/types/gateway.d'\nimport { useTransactionDetails } from './hooks/useTransactionDetails'\nimport { TxDetailsContainer, Centered, AlignItemsWithMargin } from './styled'\nimport { TxData } from './TxData'\nimport { TxExpandedActions } from './TxExpandedActions'\nimport { TxInfo } from './TxInfo'\nimport { TxLocationContext } from './TxLocationProvider'\nimport { TxOwners } from './TxOwners'\nimport { TxSummary } from './TxSummary'\nimport { isCancelTxDetails, NOT_AVAILABLE } from './utils'\nimport useTxStatus from 'src/logic/hooks/useTxStatus'\nimport { useSelector } from 'react-redux'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport TxModuleInfo from './TxModuleInfo'\n\nconst NormalBreakingText = styled(Text)`\n  line-break: normal;\n  word-break: normal;\n`\n\nconst TxDataGroup = ({ txDetails }: { txDetails: ExpandedTxDetails }): ReactElement | null => {\n  if (isTransferTxInfo(txDetails.txInfo) || isSettingsChangeTxInfo(txDetails.txInfo)) {\n    return <TxInfo txInfo={txDetails.txInfo} />\n  }\n\n  if (isCancelTxDetails(txDetails.txInfo) && isMultiSigExecutionDetails(txDetails.detailedExecutionInfo)) {\n    const txNonce = `${txDetails.detailedExecutionInfo.nonce ?? NOT_AVAILABLE}`\n    const isTxExecuted = txDetails.executedAt\n\n    // executed rejection transaction\n    let message = `This is an on-chain rejection that didn't send any funds.\n     This on-chain rejection replaced all transactions with nonce ${txNonce}.`\n\n    if (!isTxExecuted) {\n      // queued rejection transaction\n      message = `This is an on-chain rejection that doesn't send any funds.\n Executing this on-chain rejection will replace all currently awaiting transactions with nonce ${txNonce}.`\n    }\n    return (\n      <>\n        <NormalBreakingText size=\"xl\">{message}</NormalBreakingText>\n        {!isTxExecuted && (\n          <>\n            <br />\n            <Link\n              href=\"https://help.gnosis-safe.io/en/articles/4738501-why-do-i-need-to-pay-for-cancelling-a-transaction\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              title=\"Why do I need to pay for rejecting a transaction?\"\n            >\n              <AlignItemsWithMargin>\n                <Text size=\"xl\" as=\"span\" color=\"primary\">\n                  Why do I need to pay for rejecting a transaction?\n                </Text>\n                <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\n              </AlignItemsWithMargin>\n            </Link>\n          </>\n        )}\n      </>\n    )\n  }\n\n  if (!txDetails.txData) {\n    return null\n  }\n\n  return <TxData txData={txDetails.txData} txInfo={txDetails.txInfo} />\n}\n\ntype TxDetailsProps = {\n  transaction: Transaction\n}\n\nexport const TxDetails = ({ transaction }: TxDetailsProps): ReactElement => {\n  const { txLocation } = useContext(TxLocationContext)\n  const { data, loading } = useTransactionDetails(transaction.id)\n  const txStatus = useTxStatus(transaction)\n  const willBeReplaced = txStatus === LocalTransactionStatus.WILL_BE_REPLACED\n  const isPending = txStatus === LocalTransactionStatus.PENDING\n  const currentUser = useSelector(userAccountSelector)\n  const hasModule = transaction.txDetails && isModuleExecutionInfo(transaction.txDetails.detailedExecutionInfo)\n  const isMultiSend = data && isMultiSendTxInfo(data.txInfo)\n\n  // To avoid prop drilling into TxDataGroup, module details are positioned here accordingly\n  const getModuleDetails = () => {\n    if (!transaction.txDetails || !isModuleExecutionInfo(transaction.txDetails.detailedExecutionInfo)) {\n      return null\n    }\n\n    return (\n      <div className=\"tx-module\">\n        <TxModuleInfo detailedExecutionInfo={transaction.txDetails?.detailedExecutionInfo} />\n      </div>\n    )\n  }\n\n  if (loading) {\n    return (\n      <Centered padding={10}>\n        <Loader size=\"sm\" />\n      </Centered>\n    )\n  }\n\n  if (!data) {\n    return (\n      <TxDetailsContainer>\n        <Text size=\"xl\" strong>\n          No data available\n        </Text>\n      </TxDetailsContainer>\n    )\n  }\n\n  return (\n    <TxDetailsContainer ownerRows={hasModule ? 3 : 2}>\n      <div className={cn('tx-summary', { 'will-be-replaced': willBeReplaced })}>\n        <TxSummary txDetails={data} />\n      </div>\n      {isMultiSend && getModuleDetails()}\n      <div\n        className={cn('tx-details', {\n          'no-padding': isMultiSend,\n          'not-executed': !data.executedAt,\n          'will-be-replaced': willBeReplaced,\n        })}\n      >\n        <TxDataGroup txDetails={data} />\n      </div>\n      {!isMultiSend && getModuleDetails()}\n      <div\n        className={cn('tx-owners', {\n          'will-be-replaced': willBeReplaced,\n        })}\n      >\n        <TxOwners txDetails={data} isPending={isPending} />\n      </div>\n      {!isPending && !data.executedAt && txLocation !== 'history' && !!currentUser && (\n        <div className={cn('tx-details-actions', { 'will-be-replaced': willBeReplaced })}>\n          <TxExpandedActions transaction={transaction} />\n        </div>\n      )}\n    </TxDetailsContainer>\n  )\n}\n","import { useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { ExpandedTxDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { fetchTransactionDetails } from 'src/logic/safe/store/actions/fetchTransactionDetails'\nimport { getTransactionByAttribute } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { AppReduxState } from 'src/store'\n\nexport type LoadTransactionDetails = {\n  data?: ExpandedTxDetails\n  loading: boolean\n}\n\nexport const useTransactionDetails = (transactionId: string): LoadTransactionDetails => {\n  const dispatch = useRef(useDispatch())\n  const [txDetails, setTxDetails] = useState<LoadTransactionDetails>({\n    loading: true,\n    data: undefined,\n  })\n  const data = useSelector((state: AppReduxState) =>\n    getTransactionByAttribute(state, { attributeValue: transactionId, attributeName: 'id' }),\n  )\n\n  useEffect(() => {\n    if (data?.txDetails) {\n      setTxDetails({ loading: false, data: data?.txDetails })\n    } else {\n      // lookup tx details\n      dispatch.current(fetchTransactionDetails({ transactionId }))\n    }\n  }, [data?.txDetails, transactionId])\n\n  return txDetails\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport { getExplorerInfo } from 'src/config'\nimport { formatDateTime } from 'src/utils/date'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { NOT_AVAILABLE } from './utils'\nimport { InlineEthHashInfo, TxDetailsContainer } from './styled'\nimport { Creation } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useKnownAddress } from './hooks/useKnownAddress'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\n\nexport const TxInfoCreation = ({ transaction }: { transaction: Transaction }): ReactElement => {\n  const txInfo = transaction.txInfo as Creation\n  const timestamp = transaction.timestamp\n\n  const creator = useKnownAddress(txInfo.creator)\n  const factory = useKnownAddress(txInfo.factory)\n  const implementation = useKnownAddress(txInfo.implementation)\n\n  return (\n    <TxDetailsContainer>\n      <div className=\"tx-summary\">\n        <div className=\"tx-hash\">\n          <Text size=\"xl\" strong as=\"span\">\n            Transaction hash:{' '}\n          </Text>\n          <InlineEthHashInfo\n            textSize=\"xl\"\n            hash={txInfo.transactionHash}\n            shortenHash={8}\n            showCopyBtn\n            explorerUrl={getExplorerInfo(txInfo.transactionHash)}\n          />\n        </div>\n        <div className=\"tx-created\">\n          <Text size=\"xl\" strong as=\"span\">\n            Created:{' '}\n          </Text>\n          <Text size=\"xl\" as=\"span\">\n            {formatDateTime(timestamp)}\n          </Text>\n        </div>\n      </div>\n      <div className=\"tx-details\">\n        <div className=\"tx-creator\">\n          <Text size=\"xl\" strong>\n            Creator:{' '}\n          </Text>\n          <PrefixedEthHashInfo\n            textSize=\"xl\"\n            hash={txInfo.creator.value}\n            showCopyBtn\n            explorerUrl={getExplorerInfo(txInfo.creator.value)}\n            name={creator.name || undefined}\n            customAvatar={creator.logoUri || undefined}\n            showAvatar\n          />\n        </div>\n        <div className=\"tx-factory\">\n          <Text size=\"xl\" strong>\n            Factory:{' '}\n          </Text>\n          {txInfo.factory ? (\n            <PrefixedEthHashInfo\n              textSize=\"xl\"\n              hash={txInfo.factory.value}\n              showCopyBtn\n              explorerUrl={getExplorerInfo(txInfo.factory.value)}\n              name={factory?.name || undefined}\n              customAvatar={factory?.logoUri || undefined}\n              showAvatar\n            />\n          ) : (\n            <Text size=\"xl\" as=\"span\">\n              {NOT_AVAILABLE}\n            </Text>\n          )}\n        </div>\n        <div className=\"tx-mastercopy\">\n          <Text size=\"xl\" strong>\n            Mastercopy:{' '}\n          </Text>\n          {txInfo.implementation ? (\n            <PrefixedEthHashInfo\n              textSize=\"xl\"\n              hash={txInfo.implementation.value}\n              showCopyBtn\n              explorerUrl={getExplorerInfo(txInfo.implementation.value)}\n              name={implementation?.name || undefined}\n              customAvatar={implementation?.logoUri || undefined}\n              showAvatar\n            />\n          ) : (\n            <Text size=\"xl\" as=\"span\">\n              {NOT_AVAILABLE}\n            </Text>\n          )}\n        </div>\n      </div>\n      <div className=\"tx-owners\" />\n    </TxDetailsContainer>\n  )\n}\n","import { AccordionDetails } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport { isCreationTxInfo, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { NoPaddingAccordion, StyledAccordionSummary } from './styled'\nimport { TxHistoryCollapsed } from './TxHistoryCollapsed'\nimport { TxDetails } from './TxDetails'\nimport { TxInfoCreation } from './TxInfoCreation'\n\nexport const TxHistoryRow = ({ transaction }: { transaction: Transaction }): ReactElement => (\n  <NoPaddingAccordion\n    TransitionProps={{\n      mountOnEnter: false,\n      unmountOnExit: true,\n      appear: true,\n    }}\n  >\n    <StyledAccordionSummary>\n      <TxHistoryCollapsed transaction={transaction} />\n    </StyledAccordionSummary>\n    <AccordionDetails>\n      {isCreationTxInfo(transaction.txInfo) ? (\n        <TxInfoCreation transaction={transaction} />\n      ) : (\n        <TxDetails transaction={transaction} />\n      )}\n    </AccordionDetails>\n  </NoPaddingAccordion>\n)\n","import { ReactElement, useContext } from 'react'\n\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { TxsInfiniteScrollContext } from 'src/routes/safe/components/Transactions/TxList/TxsInfiniteScroll'\nimport { formatWithSchema } from 'src/utils/date'\nimport { sameString } from 'src/utils/strings'\nimport { StyledTransactions, StyledTransactionsGroup, SubTitle } from './styled'\nimport { TxHistoryRow } from './TxHistoryRow'\nimport { TxLocationContext } from './TxLocationProvider'\n\nexport const HistoryTxList = ({ transactions }: { transactions: TransactionDetails['transactions'] }): ReactElement => {\n  const { lastItemId, setLastItemId } = useContext(TxsInfiniteScrollContext)\n\n  const [, lastTransactionsGroup] = transactions[transactions.length - 1]\n  const lastTransaction = lastTransactionsGroup[lastTransactionsGroup.length - 1]\n\n  if (!sameString(lastItemId, lastTransaction.id)) {\n    setLastItemId(lastTransaction.id)\n  }\n\n  return (\n    <TxLocationContext.Provider value={{ txLocation: 'history' }}>\n      {transactions?.map(([timestamp, txs]) => (\n        <StyledTransactionsGroup key={timestamp}>\n          <SubTitle size=\"lg\">{formatWithSchema(Number(timestamp), 'MMM d, yyyy')}</SubTitle>\n          <StyledTransactions>\n            {txs.map((transaction) => (\n              <TxHistoryRow key={transaction.id} transaction={transaction} />\n            ))}\n          </StyledTransactions>\n        </StyledTransactionsGroup>\n      ))}\n    </TxLocationContext.Provider>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/no-transactions.0fc3884a.svg\";","import { Loader, Title } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport { usePagedHistoryTransactions } from './hooks/usePagedHistoryTransactions'\nimport { Centered, NoTransactions } from './styled'\nimport { HistoryTxList } from './HistoryTxList'\nimport { TxsInfiniteScroll } from './TxsInfiniteScroll'\nimport Img from 'src/components/layout/Img'\nimport NoTransactionsImage from './assets/no-transactions.svg'\n\nexport const HistoryTransactions = (): ReactElement => {\n  const { count, hasMore, next, transactions, isLoading } = usePagedHistoryTransactions()\n\n  if (count === 0 && isLoading) {\n    return (\n      <Centered>\n        <Loader size=\"md\" />\n      </Centered>\n    )\n  }\n\n  if (count === 0 || !transactions.length) {\n    return (\n      <NoTransactions>\n        <Img alt=\"No Transactions yet\" src={NoTransactionsImage} />\n        <Title size=\"xs\">History transactions will appear here </Title>\n      </NoTransactions>\n    )\n  }\n\n  return (\n    <TxsInfiniteScroll next={next} hasMore={hasMore} isLoading={isLoading}>\n      <HistoryTxList transactions={transactions} />\n    </TxsInfiniteScroll>\n  )\n}\n","import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loadPagedQueuedTransactions } from 'src/logic/safe/store/actions/transactions/fetchTransactions/loadGatewayTransactions'\nimport { addQueuedTransactions } from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\nimport { currentChainId } from 'src/logic/config/store/selectors'\nimport { QueueTransactionsInfo, useQueueTransactions } from './useQueueTransactions'\nimport { Errors } from 'src/logic/exceptions/CodedException'\nimport { Await } from 'src/types/helpers'\nimport { extractSafeAddress } from 'src/routes/routes'\n\ntype PagedQueuedTransactions = {\n  count: number\n  isLoading: boolean\n  transactions?: QueueTransactionsInfo\n  hasMore: boolean\n  next: () => Promise<void>\n}\n\nexport const usePagedQueuedTransactions = (): PagedQueuedTransactions => {\n  const transactions = useQueueTransactions()\n  const chainId = useSelector(currentChainId)\n\n  const dispatch = useDispatch()\n  const safeAddress = extractSafeAddress()\n  const [hasMore, setHasMore] = useState(true)\n\n  const nextPage = async () => {\n    let results: Await<ReturnType<typeof loadPagedQueuedTransactions>>\n    try {\n      results = await loadPagedQueuedTransactions(safeAddress)\n    } catch (e) {\n      // No next page\n      if (e.content !== Errors._608) {\n        e.log()\n      }\n    }\n\n    if (!results) {\n      setHasMore(false)\n      return\n    }\n\n    const { values, next } = results\n\n    if (next === null) {\n      setHasMore(false)\n    }\n\n    if (values) {\n      dispatch(addQueuedTransactions({ chainId, safeAddress, values }))\n    } else {\n      setHasMore(false)\n    }\n  }\n\n  let count\n  if (transactions) {\n    count = transactions.next.count + transactions.queue.count\n  }\n\n  const isLoading = typeof transactions === 'undefined' || typeof count === 'undefined'\n\n  return { count, isLoading, transactions, hasMore, next: nextPage }\n}\n","import { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { _getChainId } from 'src/config'\nimport { loadQueuedTransactions } from 'src/logic/safe/store/actions/transactions/fetchTransactions/loadGatewayTransactions'\nimport { addQueuedTransactions } from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\n\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { nextTransactions, queuedTransactions } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { extractSafeAddress } from 'src/routes/routes'\n\nexport type QueueTransactionsInfo = {\n  next: TransactionDetails\n  queue: TransactionDetails\n}\n\n/**\n * Get transactions (next and queue) from nextTransactions and queuedTransactions selectors\n */\nexport const useQueueTransactions = (): QueueTransactionsInfo | undefined => {\n  const nextTxs = useSelector(nextTransactions)\n  const queuedTxs = useSelector(queuedTransactions)\n  const dispatch = useDispatch()\n  const [txsCount, setTxsCount] = useState<{ next: number; queued: number } | undefined>()\n\n  useEffect(() => {\n    const next = nextTxs\n      ? Object.entries(nextTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\n      : 0\n    const queued = queuedTxs\n      ? Object.entries(queuedTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\n      : 0\n\n    // If 'queued.queued' deeplinked tx was open then queue visited before next poll\n    const hasDeeplinkLoaded = next === 0 && queued === 1\n    if (hasDeeplinkLoaded) {\n      const getQueuedTxs = async () => {\n        const safeAddress = extractSafeAddress()\n        const values = await loadQueuedTransactions(safeAddress)\n        dispatch(addQueuedTransactions({ chainId: _getChainId(), safeAddress, values }))\n      }\n      getQueuedTxs()\n    }\n\n    setTxsCount({ next, queued })\n  }, [dispatch, nextTxs, queuedTxs])\n\n  // no data loaded to the store yet\n  if ((!nextTxs && !queuedTxs) || typeof txsCount === 'undefined') {\n    return\n  }\n\n  return {\n    next: {\n      count: txsCount.next,\n      transactions: nextTxs ? Object.entries(nextTxs) : [],\n    },\n    queue: {\n      count: txsCount.queued,\n      transactions: queuedTxs ? Object.entries(queuedTxs) : [],\n    },\n  }\n}\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\n\nimport useTxStatus from 'src/logic/hooks/useTxStatus'\nimport { LocalTransactionStatus, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useAssetInfo } from './hooks/useAssetInfo'\nimport { useTransactionStatus } from './hooks/useTransactionStatus'\nimport { useTransactionType } from './hooks/useTransactionType'\nimport { TxCollapsed } from './TxCollapsed'\n\nexport type CalculatedVotes = { votes: string; submitted: number; required: number }\n\nconst calculateVotes = (executionInfo: MultisigExecutionInfo, isPending: boolean): CalculatedVotes | undefined => {\n  if (!executionInfo) return\n\n  const submitted = executionInfo.confirmationsSubmitted\n  const required = executionInfo.confirmationsRequired\n\n  if (isPending && submitted < required) return\n\n  return {\n    votes: `${submitted} out of ${required}`,\n    submitted,\n    required,\n  }\n}\n\ntype TxQueuedCollapsedProps = {\n  isGrouped?: boolean\n  transaction: Transaction\n}\n\nexport const TxQueueCollapsed = ({ isGrouped = false, transaction }: TxQueuedCollapsedProps): ReactElement => {\n  const executionInfo = transaction.executionInfo as MultisigExecutionInfo\n  const nonce = executionInfo?.nonce\n  const type = useTransactionType(transaction)\n  const info = useAssetInfo(transaction.txInfo)\n  const status = useTransactionStatus(transaction)\n  const txStatus = useTxStatus(transaction)\n  const isPending = txStatus === LocalTransactionStatus.PENDING\n  const votes = calculateVotes(executionInfo, isPending)\n\n  return (\n    <TxCollapsed\n      transaction={transaction}\n      isGrouped={isGrouped}\n      nonce={nonce}\n      type={type}\n      info={info}\n      time={transaction.timestamp}\n      votes={votes}\n      status={status}\n    />\n  )\n}\n","import { AccordionDetails } from '@gnosis.pm/safe-react-components'\nimport { ReactElement, useContext, useEffect, useState } from 'react'\n\nimport { LocalTransactionStatus, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { NoPaddingAccordion, StyledAccordionSummary } from './styled'\nimport { TxDetails } from './TxDetails'\nimport { TxHoverContext } from './TxHoverProvider'\nimport { TxQueueCollapsed } from './TxQueueCollapsed'\n\ntype TxQueueRowProps = {\n  isGrouped?: boolean\n  transaction: Transaction\n}\n\nexport const TxQueueRow = ({ isGrouped = false, transaction }: TxQueueRowProps): ReactElement => {\n  const { activeHover } = useContext(TxHoverContext)\n  const [tx, setTx] = useState<Transaction>(transaction)\n\n  useEffect(() => {\n    if (activeHover && activeHover !== transaction.id) {\n      setTx((currTx) => ({ ...currTx, txStatus: LocalTransactionStatus.WILL_BE_REPLACED }))\n      return\n    }\n\n    setTx(transaction)\n  }, [activeHover, transaction])\n\n  return (\n    <NoPaddingAccordion\n      TransitionProps={{\n        mountOnEnter: false,\n        unmountOnExit: true,\n        appear: true,\n      }}\n    >\n      <StyledAccordionSummary>\n        <TxQueueCollapsed isGrouped={isGrouped} transaction={tx} />\n      </StyledAccordionSummary>\n      <AccordionDetails>\n        <TxDetails transaction={tx} />\n      </AccordionDetails>\n    </NoPaddingAccordion>\n  )\n}\n","import { createStyles, makeStyles } from '@material-ui/core'\nimport { lg, md, sm } from 'src/theme/variables'\n\nexport const useStyles = makeStyles(\n  createStyles({\n    container: {\n      padding: `${md} ${lg}`,\n    },\n    nonceNumber: {\n      marginTop: sm,\n      fontSize: md,\n    },\n  }),\n)\n","import { Record } from 'immutable'\nimport { ConfirmationProps } from './types/confirmation'\n\nexport const makeConfirmation = Record<ConfirmationProps>({\n  owner: '',\n  type: 'initialised',\n  hash: '',\n  signature: null,\n})\n","import { List } from 'immutable'\nimport {\n  Erc20Transfer,\n  Erc721Transfer,\n  MultisigExecutionInfo,\n  Operation,\n  TokenType,\n} from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useMemo, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useStyles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Bold from 'src/components/layout/Bold'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { processTransaction } from 'src/logic/safe/store/actions/processTransaction'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { isThresholdReached } from 'src/routes/safe/components/Transactions/TxList/hooks/useTransactionActions'\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\nimport { Overwrite } from 'src/types/helpers'\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { makeConfirmation } from 'src/logic/safe/store/models/confirmation'\nimport { ExpandedTxDetails, isMultiSigExecutionDetails, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { TxModalWrapper } from '../../helpers/TxModalWrapper'\n\nexport const APPROVE_TX_MODAL_SUBMIT_BTN_TEST_ID = 'approve-tx-modal-submit-btn'\nexport const REJECT_TX_MODAL_SUBMIT_BTN_TEST_ID = 'reject-tx-modal-submit-btn'\n\nconst getModalTitleAndDescription = (\n  thresholdReached: boolean,\n  isCancelTx: boolean,\n): { title: string; description: string } => {\n  const modalInfo = {\n    title: 'Execute transaction rejection',\n    description: 'This action will execute this transaction.',\n  }\n\n  if (isCancelTx) {\n    return modalInfo\n  }\n\n  if (thresholdReached) {\n    modalInfo.title = 'Execute transaction'\n    modalInfo.description = 'This action will execute this transaction.'\n  } else {\n    modalInfo.title = 'Approve Transaction'\n    modalInfo.description =\n      'This action will approve this transaction. A separate Transaction will be performed to submit the approval.'\n  }\n\n  return modalInfo\n}\n\nconst useTxInfo = (transaction: Props['transaction']) => {\n  const t = useRef(transaction)\n  const safeAddress = extractSafeAddress()\n\n  const confirmations = useMemo(\n    () =>\n      t.current.txDetails.detailedExecutionInfo && isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? List(\n            t.current.txDetails.detailedExecutionInfo.confirmations.map(({ signer, signature }) =>\n              makeConfirmation({ owner: signer.value, signature }),\n            ),\n          )\n        : List([]),\n    [],\n  )\n\n  const data = useMemo(() => t.current.txDetails.txData?.hexData ?? EMPTY_DATA, [])\n\n  const baseGas = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.baseGas\n        : '0',\n    [],\n  )\n\n  const gasPrice = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.gasPrice\n        : '0',\n    [],\n  )\n\n  const safeTxGas = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.safeTxGas\n        : '0',\n    [],\n  )\n\n  const gasToken = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.gasToken\n        : ZERO_ADDRESS,\n    [],\n  )\n\n  const nonce = useMemo(() => (t.current.executionInfo as MultisigExecutionInfo)?.nonce ?? 0, [])\n\n  const refundReceiver = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.refundReceiver.value\n        : ZERO_ADDRESS,\n    [],\n  )\n\n  const safeTxHash = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.safeTxHash\n        : EMPTY_DATA,\n    [],\n  )\n\n  const value = useMemo(() => {\n    switch (t.current.txInfo.type) {\n      case 'Transfer':\n        if (t.current.txInfo.transferInfo.type === TokenType.NATIVE_COIN) {\n          return t.current.txInfo.transferInfo.value\n        } else {\n          return t.current.txDetails.txData?.value ?? '0'\n        }\n      case 'Custom':\n        return t.current.txInfo.value\n      case 'Creation':\n      case 'SettingsChange':\n      default:\n        return '0'\n    }\n  }, [])\n\n  const to = useMemo(() => {\n    switch (t.current.txInfo.type) {\n      case 'Transfer':\n        if (t.current.txInfo.transferInfo.type === TokenType.NATIVE_COIN) {\n          return t.current.txInfo.recipient.value\n        } else {\n          return (t.current.txInfo.transferInfo as Erc20Transfer | Erc721Transfer).tokenAddress\n        }\n      case 'Custom':\n        return t.current.txInfo.to.value\n      case 'Creation':\n      case 'SettingsChange':\n      default:\n        return safeAddress\n    }\n  }, [safeAddress])\n\n  const operation = useMemo(() => t.current.txDetails.txData?.operation ?? Operation.CALL, [])\n\n  const origin = useMemo(\n    () =>\n      t.current.safeAppInfo ? JSON.stringify({ name: t.current.safeAppInfo.name, url: t.current.safeAppInfo.url }) : '',\n    [],\n  )\n\n  const id = useMemo(() => t.current.id, [])\n\n  return {\n    confirmations,\n    data,\n    baseGas,\n    gasPrice,\n    safeTxGas,\n    gasToken,\n    nonce,\n    refundReceiver,\n    safeTxHash,\n    value,\n    to,\n    operation,\n    origin,\n    id,\n  }\n}\n\ntype Props = {\n  onClose: () => void\n  isCancelTx?: boolean\n  isOpen: boolean\n  transaction: Overwrite<Transaction, { txDetails: ExpandedTxDetails }>\n  txParameters: TxParameters\n}\n\nexport const ApproveTxModal = ({ onClose, isCancelTx = false, isOpen, transaction }: Props): React.ReactElement => {\n  const dispatch = useDispatch()\n  const userAddress = useSelector(userAccountSelector)\n  const classes = useStyles()\n  const safeAddress = extractSafeAddress()\n  const executionInfo = transaction.executionInfo as MultisigExecutionInfo\n  const thresholdReached = !!(executionInfo && isThresholdReached(executionInfo))\n  const { description, title } = getModalTitleAndDescription(thresholdReached, isCancelTx)\n\n  const txInfo = useTxInfo(transaction)\n  const { confirmations } = txInfo\n\n  const approveTx = (txParameters: TxParameters, delayExecution: boolean) => {\n    dispatch(\n      processTransaction({\n        safeAddress,\n        tx: txInfo,\n        userAddress,\n        notifiedTransaction: TX_NOTIFICATION_TYPES.CONFIRMATION_TX,\n        approveAndExecute: !delayExecution,\n        ethParameters: txParameters,\n        thresholdReached,\n      }),\n    )\n    onClose()\n  }\n\n  return (\n    <Modal description={description} handleClose={onClose} open={isOpen} title={title}>\n      <TxModalWrapper\n        operation={txInfo.operation}\n        txNonce={txInfo.nonce.toString()}\n        txConfirmations={confirmations}\n        txThreshold={executionInfo.confirmationsRequired}\n        txTo={txInfo.to}\n        txData={txInfo.data}\n        txValue={txInfo.value}\n        safeTxGas={txInfo.safeTxGas}\n        onSubmit={approveTx}\n        onClose={onClose}\n      >\n        <ModalHeader onClose={onClose} title={title} />\n\n        <Hairline />\n\n        {/* Tx info */}\n        <Block className={classes.container}>\n          <Row style={{ flexDirection: 'column' }}>\n            <Paragraph>{description}</Paragraph>\n            <Paragraph color=\"medium\" size=\"sm\">\n              Transaction nonce:\n              <br />\n              <Bold className={classes.nonceNumber}>{txInfo.nonce}</Bold>\n            </Paragraph>\n          </Row>\n        </Block>\n      </TxModalWrapper>\n    </Modal>\n  )\n}\n","import { List } from 'immutable'\nimport { AnyAction } from 'redux'\nimport { ThunkAction } from 'redux-thunk'\nimport { Operation } from '@gnosis.pm/safe-react-gateway-sdk'\n\nimport { generateSignaturesFromTxConfirmations, getPreValidatedSignatures } from 'src/logic/safe/safeTxSigner'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport { AppReduxState } from 'src/store'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { Dispatch, DispatchReturn } from './types'\nimport { Confirmation } from 'src/logic/safe/store/models/types/confirmation'\nimport { TxSender } from './createTransaction'\nimport { logError, Errors } from 'src/logic/exceptions/CodedException'\nimport { getLastTransaction } from '../selectors/gatewayTransactions'\nimport { shouldExecuteTransaction } from './utils'\n\ninterface ProcessTransactionArgs {\n  approveAndExecute: boolean\n  notifiedTransaction: string\n  safeAddress: string\n  tx: {\n    id: string\n    confirmations: List<Confirmation>\n    origin: string // json.stringified url, name\n    to: string\n    value: string\n    data: string\n    operation: Operation\n    nonce: number\n    safeTxGas: string\n    safeTxHash: string\n    baseGas: string\n    gasPrice: string\n    gasToken: string\n    refundReceiver: string\n  }\n  userAddress: string\n  ethParameters?: Pick<TxParameters, 'ethNonce' | 'ethGasLimit' | 'ethGasPriceInGWei' | 'ethMaxPrioFeeInGWei'>\n  thresholdReached: boolean\n}\n\ntype ProcessTransactionAction = ThunkAction<Promise<void | string>, AppReduxState, DispatchReturn, AnyAction>\n\nexport const processTransaction = (props: ProcessTransactionArgs): ProcessTransactionAction => {\n  return async (dispatch: Dispatch, getState: () => AppReduxState): Promise<void> => {\n    const sender = new TxSender()\n\n    // Selectors\n    const state = getState()\n\n    const { tx, approveAndExecute } = props\n\n    // Set specific transaction being finalised\n    sender.txId = tx.id\n\n    const txProps = {\n      navigateToTransactionsTab: false,\n      notifiedTransaction: props.notifiedTransaction,\n      operation: tx.operation,\n      origin: tx.origin,\n      safeAddress: props.safeAddress,\n      to: tx.to,\n      txData: tx.data ?? EMPTY_DATA,\n      txNonce: tx.nonce,\n      valueInWei: tx.value,\n      safeTxGas: tx.safeTxGas,\n      ethParameters: props.ethParameters,\n    }\n\n    // Populate instance vars\n    try {\n      await sender.prepare(dispatch, state, txProps)\n    } catch (err) {\n      logError(Errors._815, err.message)\n      return\n    }\n\n    // Execute right away?\n    sender.isFinalization =\n      approveAndExecute ||\n      (await shouldExecuteTransaction(sender.safeInstance, sender.nonce, getLastTransaction(state)))\n\n    sender.approveAndExecute = approveAndExecute\n\n    const preApprovingOwner = approveAndExecute && !props.thresholdReached ? props.userAddress : undefined\n\n    sender.txArgs = {\n      ...tx, // Merge previous tx with new data\n      safeInstance: sender.safeInstance,\n      valueInWei: tx.value,\n      data: txProps.txData,\n      gasPrice: tx.gasPrice || '0',\n      sender: sender.from,\n      sigs:\n        generateSignaturesFromTxConfirmations(tx.confirmations, preApprovingOwner) ||\n        getPreValidatedSignatures(sender.from),\n    }\n\n    sender.safeTxHash = tx.safeTxHash\n\n    sender.submitTx(state)\n  }\n}\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\n\nimport { useDispatch } from 'react-redux'\nimport { useStyles } from './style'\nimport Modal, { ButtonStatus, Modal as GenericModal } from 'src/components/Modal'\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\nimport Block from 'src/components/layout/Block'\nimport Bold from 'src/components/layout/Bold'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { ParametersStatus } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport useCanTxExecute from 'src/logic/hooks/useCanTxExecute'\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  gwTransaction: Transaction\n}\n\nexport const RejectTxModal = ({ isOpen, onClose, gwTransaction }: Props): React.ReactElement => {\n  const dispatch = useDispatch()\n  const safeAddress = extractSafeAddress()\n  const classes = useStyles()\n\n  const {\n    gasCostFormatted,\n    txEstimationExecutionStatus,\n    isOffChainSignature,\n    isCreation,\n    gasLimit,\n    gasPriceFormatted,\n  } = useEstimateTransactionGas({\n    txData: EMPTY_DATA,\n    txRecipient: safeAddress,\n  })\n  const canTxExecute = useCanTxExecute()\n\n  const origin = gwTransaction.safeAppInfo\n    ? JSON.stringify({ name: gwTransaction.safeAppInfo.name, url: gwTransaction.safeAppInfo.url })\n    : ''\n\n  const nonce = (gwTransaction.executionInfo as MultisigExecutionInfo)?.nonce ?? 0\n\n  const sendReplacementTransaction = (txParameters: TxParameters) => {\n    dispatch(\n      createTransaction({\n        safeAddress,\n        to: safeAddress,\n        valueInWei: '0',\n        txNonce: nonce,\n        origin,\n        safeTxGas: txParameters.safeTxGas,\n        ethParameters: txParameters,\n        notifiedTransaction: TX_NOTIFICATION_TYPES.CANCELLATION_TX,\n      }),\n    )\n    onClose()\n  }\n\n  const getParametersStatus = (): ParametersStatus => {\n    return 'CANCEL_TRANSACTION'\n  }\n\n  let confirmButtonStatus: ButtonStatus = ButtonStatus.READY\n  let confirmButtonText = 'Reject transaction'\n  if (txEstimationExecutionStatus === EstimationStatus.LOADING) {\n    confirmButtonStatus = ButtonStatus.LOADING\n    confirmButtonText = 'Estimating'\n  }\n\n  return (\n    <Modal description=\"Reject transaction\" handleClose={onClose} open={isOpen} title=\"Reject Transaction\">\n      <EditableTxParameters\n        isOffChainSignature={isOffChainSignature}\n        isExecution={canTxExecute}\n        ethGasLimit={gasLimit}\n        ethGasPrice={gasPriceFormatted}\n        safeTxGas={'0'}\n        safeNonce={nonce.toString()}\n        parametersStatus={getParametersStatus()}\n      >\n        {(txParameters, toggleEditMode) => {\n          return (\n            <>\n              <ModalHeader onClose={onClose} title=\"Reject transaction\" />\n              <Hairline />\n              <Block className={classes.container}>\n                <Row>\n                  <Paragraph>\n                    This action will reject this transaction. A separate transaction will be performed to submit the\n                    rejection.\n                  </Paragraph>\n                  <Paragraph color=\"medium\" size=\"sm\">\n                    Transaction nonce:\n                    <br />\n                    <Bold className={classes.nonceNumber}>{nonce}</Bold>\n                  </Paragraph>\n                </Row>\n                {/* Tx Parameters */}\n                <TxParametersDetail\n                  txParameters={txParameters}\n                  onEdit={toggleEditMode}\n                  parametersStatus={getParametersStatus()}\n                  isTransactionCreation={isCreation}\n                  isTransactionExecution={canTxExecute}\n                  isOffChainSignature={isOffChainSignature}\n                />\n              </Block>\n\n              {txEstimationExecutionStatus === EstimationStatus.LOADING ? null : (\n                <ReviewInfoText\n                  gasCostFormatted={gasCostFormatted}\n                  isCreation={isCreation}\n                  isExecution={canTxExecute}\n                  safeNonce={txParameters.safeNonce}\n                  txEstimationExecutionStatus={txEstimationExecutionStatus}\n                />\n              )}\n              <GenericModal.Footer withoutBorder={confirmButtonStatus !== ButtonStatus.LOADING}>\n                <GenericModal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onClose, text: 'Close' }}\n                  confirmButtonProps={{\n                    onClick: () => sendReplacementTransaction(txParameters),\n                    color: 'error',\n                    type: 'submit',\n                    status: confirmButtonStatus,\n                    text: confirmButtonText,\n                  }}\n                />\n              </GenericModal.Footer>\n            </>\n          )\n        }}\n      </EditableTxParameters>\n    </Modal>\n  )\n}\n","import { ReactElement, useContext } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { ExpandedTxDetails, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { getTransactionByAttribute } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { useTransactionParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { AppReduxState } from 'src/store'\nimport { ApproveTxModal } from './modals/ApproveTxModal'\nimport { RejectTxModal } from './modals/RejectTxModal'\nimport { TransactionActionStateContext } from './TxActionProvider'\nimport { Overwrite } from 'src/types/helpers'\n\nexport const ActionModal = (): ReactElement | null => {\n  const { selectedAction, selectAction } = useContext(TransactionActionStateContext)\n  const txParameters = useTransactionParameters()\n\n  const transaction = useSelector((state: AppReduxState) =>\n    getTransactionByAttribute(state, {\n      attributeValue: selectedAction.transactionId,\n      attributeName: 'id',\n    }),\n  )\n\n  const onClose = () => selectAction({ actionSelected: 'none', transactionId: '' })\n\n  if (!transaction?.txDetails) {\n    return null\n  }\n\n  switch (selectedAction.actionSelected) {\n    case 'cancel':\n      return <RejectTxModal isOpen onClose={onClose} gwTransaction={transaction} />\n\n    case 'confirm':\n    case 'execute':\n      return (\n        <ApproveTxModal\n          isOpen\n          onClose={onClose}\n          transaction={transaction as Overwrite<Transaction, { txDetails: ExpandedTxDetails }>}\n          txParameters={txParameters}\n        />\n      )\n\n    case 'none':\n      return null\n  }\n}\n","import { Icon, Link, Text } from '@gnosis.pm/safe-react-components'\nimport { Fragment, ReactElement, useContext } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Transaction, TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { sameString } from 'src/utils/strings'\nimport { currentSafeNonce } from 'src/logic/safe/store/selectors'\n\nimport {\n  DisclaimerContainer,\n  GroupedTransactions,\n  GroupedTransactionsCard,\n  SubTitle,\n  StyledTransactions,\n  StyledTransactionsGroup,\n  AlignItemsWithMargin,\n} from './styled'\nimport { TxHoverProvider } from './TxHoverProvider'\nimport { TxLocationContext } from './TxLocationProvider'\nimport { TxQueueRow } from './TxQueueRow'\nimport { TxsInfiniteScrollContext } from './TxsInfiniteScroll'\nimport { TxActionProvider } from './TxActionProvider'\nimport { ActionModal } from './ActionModal'\n\nconst TreeView = ({ firstElement }: { firstElement: boolean }): ReactElement => {\n  return <p className=\"tree-lines\">{firstElement ? <span className=\"first-node\" /> : null}</p>\n}\n\nconst Disclaimer = ({ nonce }: { nonce: string }): ReactElement => {\n  return (\n    <DisclaimerContainer className=\"disclaimer-container\">\n      <Text size=\"xl\" className=\"nonce\">\n        {nonce}\n      </Text>\n      <AlignItemsWithMargin className=\"disclaimer\">\n        <Text as=\"span\" size=\"xl\">\n          These transactions conflict as they use the same nonce. Executing one will automatically replace the other(s).{' '}\n        </Text>\n        <Link\n          href=\"https://help.gnosis-safe.io/en/articles/4730252-why-are-transactions-with-the-same-nonce-conflicting-with-each-other\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          title=\"Why are transactions with the same nonce conflicting with each other?\"\n        >\n          <AlignItemsWithMargin>\n            <Text size=\"xl\" as=\"span\" color=\"primary\">\n              Learn more\n            </Text>\n            <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\n          </AlignItemsWithMargin>\n        </Link>\n      </AlignItemsWithMargin>\n    </DisclaimerContainer>\n  )\n}\n\ntype QueueTransactionProps = {\n  nonce: string\n  transactions: Transaction[]\n}\n\nconst QueueTransaction = ({ nonce, transactions }: QueueTransactionProps): ReactElement =>\n  transactions.length > 1 ? (\n    <GroupedTransactionsCard>\n      <TxHoverProvider>\n        <Disclaimer nonce={nonce} />\n        <GroupedTransactions>\n          {transactions.map((transaction, index) => (\n            <Fragment key={`${nonce}-${transaction.id}`}>\n              <TreeView firstElement={!index} />\n              <TxQueueRow isGrouped transaction={transaction} />\n            </Fragment>\n          ))}\n        </GroupedTransactions>\n      </TxHoverProvider>\n    </GroupedTransactionsCard>\n  ) : (\n    <TxQueueRow transaction={transactions[0]} />\n  )\n\ntype QueueTxListProps = {\n  transactions: TransactionDetails['transactions']\n}\n\nexport const QueueTxList = ({ transactions }: QueueTxListProps): ReactElement => {\n  const { txLocation } = useContext(TxLocationContext)\n  const nonce = useSelector(currentSafeNonce)\n\n  const { lastItemId, setLastItemId } = useContext(TxsInfiniteScrollContext)\n  if (transactions.length) {\n    const [, lastTransactionsGroup] = transactions[transactions.length - 1]\n    const lastTransaction = lastTransactionsGroup[lastTransactionsGroup.length - 1]\n\n    if (txLocation === 'queued.queued' && !sameString(lastItemId, lastTransaction.id)) {\n      setLastItemId(lastTransaction.id)\n    }\n  }\n\n  const title =\n    txLocation === 'queued.next'\n      ? 'NEXT TRANSACTION'\n      : `QUEUE - Transaction with nonce ${nonce} needs to be executed first`\n\n  return (\n    <TxActionProvider>\n      <StyledTransactionsGroup>\n        <SubTitle size=\"lg\">{title}</SubTitle>\n        <StyledTransactions>\n          {transactions.map(([nonce, txs]) => (\n            <QueueTransaction key={nonce} nonce={nonce} transactions={txs} />\n          ))}\n        </StyledTransactions>\n      </StyledTransactionsGroup>\n      <ActionModal />\n    </TxActionProvider>\n  )\n}\n","import { Loader, Title } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport Img from 'src/components/layout/Img'\nimport NoTransactionsImage from './assets/no-transactions.svg'\nimport { usePagedQueuedTransactions } from './hooks/usePagedQueuedTransactions'\nimport { QueueTxList } from './QueueTxList'\nimport { Centered, NoTransactions } from './styled'\nimport { TxsInfiniteScroll } from './TxsInfiniteScroll'\nimport { TxLocationContext } from './TxLocationProvider'\n\nexport const QueueTransactions = (): ReactElement => {\n  const { count, isLoading, hasMore, next, transactions } = usePagedQueuedTransactions()\n\n  if (count === 0 && isLoading) {\n    return (\n      <Centered>\n        <Loader size=\"md\" />\n      </Centered>\n    )\n  }\n\n  // `loading` is, actually `!transactions`\n  // added the `transaction` verification to prevent `Object is possibly 'undefined'` error\n  if (count === 0 || !transactions) {\n    return (\n      <NoTransactions>\n        <Img alt=\"No Transactions yet\" src={NoTransactionsImage} />\n        <Title size=\"xs\">Queue transactions will appear here </Title>\n      </NoTransactions>\n    )\n  }\n\n  return (\n    <TxsInfiniteScroll next={next} hasMore={hasMore} isLoading={isLoading}>\n      {/* Next list */}\n      <TxLocationContext.Provider value={{ txLocation: 'queued.next' }}>\n        {transactions.next.count !== 0 && <QueueTxList transactions={transactions.next.transactions} />}\n      </TxLocationContext.Provider>\n\n      {/* Queue list */}\n      <TxLocationContext.Provider value={{ txLocation: 'queued.queued' }}>\n        {transactions.queue.count !== 0 && <QueueTxList transactions={transactions.queue.transactions} />}\n      </TxLocationContext.Provider>\n    </TxsInfiniteScroll>\n  )\n}\n","import { ReactElement, useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Loader } from '@gnosis.pm/safe-react-components'\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux'\nimport { TransactionDetails } from '@gnosis.pm/safe-react-gateway-sdk'\n\nimport { isTxQueued, TxLocation } from 'src/logic/safe/store/models/types/gateway.d'\nimport {\n  extractPrefixedSafeAddress,\n  extractSafeAddress,\n  generateSafeRoute,\n  SafeRouteSlugs,\n  SAFE_ROUTES,\n  TRANSACTION_ID_SLUG,\n  history,\n} from 'src/routes/routes'\nimport { Centered } from './styled'\nimport { getTransactionWithLocationByAttribute } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { TxLocationContext } from './TxLocationProvider'\nimport { AppReduxState } from 'src/store'\nimport { logError, Errors } from 'src/logic/exceptions/CodedException'\nimport { fetchSafeTransaction } from 'src/logic/safe/transactions/api/fetchSafeTransaction'\nimport { makeTxFromDetails } from './utils'\nimport {\n  addQueuedTransactions,\n  addHistoryTransactions,\n} from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\nimport { HistoryPayload, QueuedPayload } from 'src/logic/safe/store/reducer/gatewayTransactions'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { currentChainId } from 'src/logic/config/store/selectors'\nimport { QueueTxList } from './QueueTxList'\nimport { HistoryTxList } from './HistoryTxList'\n\nconst TxSingularDetails = (): ReactElement => {\n  const { [TRANSACTION_ID_SLUG]: safeTxHash = '' } = useParams<SafeRouteSlugs>()\n  const [fetchedTx, setFetchedTx] = useState<TransactionDetails>()\n  const [liveTx, setLiveTx] = useState<{ txLocation: TxLocation; transaction: Transaction }>()\n  const dispatch = useDispatch()\n  const chainId = useSelector(currentChainId)\n\n  // We must use the tx from the store as the queue actions alter the tx\n  const indexedTx = useSelector(\n    (state: AppReduxState) =>\n      fetchedTx\n        ? getTransactionWithLocationByAttribute(state, { attributeName: 'id', attributeValue: fetchedTx.txId })\n        : null,\n    shallowEqual,\n  )\n\n  // The indexedTx can be temporailiy not found when re-fetching the queue\n  // To avoid showing a loader, we use a locally cached version of it\n  useEffect(() => {\n    if (indexedTx != null) {\n      setLiveTx(indexedTx)\n    }\n  }, [indexedTx])\n\n  // When safeTxHash changes, we fetch tx details for this hash\n  useEffect(() => {\n    let isCurrent = true\n\n    setFetchedTx(undefined)\n\n    if (!safeTxHash) {\n      const txsRoute = generateSafeRoute(SAFE_ROUTES.TRANSACTIONS, extractPrefixedSafeAddress())\n      history.replace(txsRoute)\n      return\n    }\n\n    const getTransaction = async (): Promise<void> => {\n      // Remove the previously loaded tx (when making a new tx from the single tx route)\n      setLiveTx(undefined)\n\n      let txDetails: TransactionDetails\n      try {\n        txDetails = await fetchSafeTransaction(safeTxHash)\n      } catch (e) {\n        logError(Errors._614, e.message)\n        return\n      }\n\n      if (isCurrent) {\n        setFetchedTx(txDetails)\n      }\n    }\n\n    getTransaction()\n\n    return () => {\n      isCurrent = false\n    }\n  }, [safeTxHash, setFetchedTx, setLiveTx])\n\n  // Add the tx to the store\n  useEffect(() => {\n    if (!fetchedTx) return\n\n    // Format the tx details into a History or Queue-like tx item\n    const listItemTx = makeTxFromDetails(fetchedTx)\n    const payload: HistoryPayload | QueuedPayload = {\n      chainId,\n      safeAddress: extractSafeAddress(),\n      values: [\n        {\n          transaction: listItemTx,\n          type: 'TRANSACTION', // Other types are discarded in reducer\n          conflictType: 'None', // Not used in reducer\n        },\n      ],\n    }\n    // And add it to the corresponding list in the store\n    dispatch(isTxQueued(listItemTx.txStatus) ? addQueuedTransactions(payload) : addHistoryTransactions(payload))\n  }, [fetchedTx, chainId, dispatch])\n\n  if (!liveTx) {\n    return (\n      <Centered padding={10}>\n        <Loader size=\"sm\" />\n      </Centered>\n    )\n  }\n\n  const { transaction, txLocation } = liveTx\n  const TxList = isTxQueued(transaction.txStatus) ? QueueTxList : HistoryTxList\n\n  return (\n    <TxLocationContext.Provider value={{ txLocation }}>\n      <TxList transactions={[[transaction.timestamp.toString(), [transaction]]]} />\n    </TxLocationContext.Provider>\n  )\n}\n\nexport default TxSingularDetails\n","import { Menu, Breadcrumb, BreadcrumbElement, Tab } from '@gnosis.pm/safe-react-components'\nimport { Item } from '@gnosis.pm/safe-react-components/dist/navigation/Tab'\nimport { ReactElement, useEffect } from 'react'\nimport { Redirect, Route, Switch, useHistory, useRouteMatch } from 'react-router-dom'\n\nimport Col from 'src/components/layout/Col'\nimport { extractPrefixedSafeAddress, generateSafeRoute, SAFE_ROUTES } from 'src/routes/routes'\nimport { SAFE_EVENTS, useAnalytics } from 'src/utils/googleAnalytics'\nimport { HistoryTransactions } from './HistoryTransactions'\nimport { QueueTransactions } from './QueueTransactions'\nimport { ContentWrapper, Wrapper } from './styled'\nimport TxSingularDetails from './TxSingularDetails'\nimport { isDeeplinkedTx } from './utils'\n\nconst TRANSACTION_TABS: Item[] = [\n  { label: 'Queue', id: SAFE_ROUTES.TRANSACTIONS_QUEUE },\n  { label: 'History', id: SAFE_ROUTES.TRANSACTIONS_HISTORY },\n]\n\nconst GatewayTransactions = (): ReactElement => {\n  const history = useHistory()\n  const { path } = useRouteMatch()\n\n  const { trackEvent } = useAnalytics()\n\n  useEffect(() => {\n    trackEvent(SAFE_EVENTS.TRANSACTIONS)\n  }, [trackEvent])\n\n  const onTabChange = (path: string) => history.replace(generateSafeRoute(path, extractPrefixedSafeAddress()))\n\n  return (\n    <Wrapper>\n      <Menu>\n        <Col start=\"sm\" xs={12}>\n          <Breadcrumb>\n            <BreadcrumbElement iconType=\"transactionsInactive\" text=\"TRANSACTIONS\" />\n            {isDeeplinkedTx() && <BreadcrumbElement text=\"DETAILS\" color=\"placeHolder\" />}\n          </Breadcrumb>\n        </Col>\n      </Menu>\n      {!isDeeplinkedTx() && <Tab onChange={onTabChange} items={TRANSACTION_TABS} selectedTab={path} />}\n      <ContentWrapper>\n        <Switch>\n          <Route exact path={SAFE_ROUTES.TRANSACTIONS_QUEUE} render={() => <QueueTransactions />} />\n          <Route exact path={SAFE_ROUTES.TRANSACTIONS_HISTORY} render={() => <HistoryTransactions />} />\n          <Route exact path={SAFE_ROUTES.TRANSACTIONS_SINGULAR} render={() => <TxSingularDetails />} />\n          <Redirect to={SAFE_ROUTES.TRANSACTIONS_HISTORY} />\n        </Switch>\n      </ContentWrapper>\n    </Wrapper>\n  )\n}\n\nexport default GatewayTransactions\n"],"sourceRoot":""}